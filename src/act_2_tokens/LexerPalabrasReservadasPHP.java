/* The following code was generated by JFlex 1.6.1 */

/* 
VASQUEZ DENIZ ROBERTO
ESTRADA RAMIREZ JESUS ISAAC
PUENTES VEGA ANGEL DANIEL
CORTES UBALDO HAYDEE JOSSELYN
LENGUAJE PHP
*/

package act_2_tokens;

/*Aqui mas importaciones*/


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/act_2_tokens/lexico_php.flex</tt>
 */
public class LexerPalabrasReservadasPHP {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\66\1\61\1\62\1\62\1\61\22\0\1\66\1\44\1\63"+
    "\2\0\1\51\1\52\1\0\1\34\1\35\1\47\1\45\1\41\1\46"+
    "\1\42\1\50\12\55\1\0\1\40\1\57\1\43\1\60\2\0\22\54"+
    "\1\10\7\54\1\36\1\65\1\37\1\64\1\54\1\0\1\7\1\13"+
    "\1\20\1\21\1\14\1\4\1\12\1\23\1\1\1\54\1\22\1\5"+
    "\1\24\1\2\1\6\1\25\1\31\1\11\1\17\1\3\1\16\1\27"+
    "\1\26\1\30\1\15\1\54\1\32\1\53\1\33\7\0\1\62\u05da\0"+
    "\12\56\206\0\12\56\306\0\12\56\u019c\0\12\56\166\0\12\56\166\0"+
    "\12\56\166\0\12\56\166\0\12\56\166\0\12\56\166\0\12\56\166\0"+
    "\12\56\166\0\12\56\166\0\12\56\140\0\12\56\166\0\12\56\106\0"+
    "\12\56\u0116\0\12\56\106\0\12\56\u0746\0\12\56\46\0\12\56\u012c\0"+
    "\12\56\200\0\12\56\246\0\12\56\6\0\12\56\266\0\12\56\126\0"+
    "\12\56\206\0\12\56\6\0\12\56\u03ce\0\1\62\1\62\u85f6\0\12\56"+
    "\u02a6\0\12\56\46\0\12\56\306\0\12\56\26\0\12\56\126\0\12\56"+
    "\u0196\0\12\56\u5316\0\12\56\u0586\0\12\56\u0bbc\0\12\56\200\0\12\56"+
    "\74\0\12\56\220\0\12\56\u0116\0\12\56\u01d6\0\12\56\u0176\0\12\56"+
    "\146\0\12\56\u0216\0\12\56\u5176\0\12\56\346\0\12\56\u6c74\0\62\56"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u280f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\26\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\2\1\1\23\1\24\1\1\1\25"+
    "\1\26\1\27\1\2\1\30\14\2\1\31\3\2\1\32"+
    "\24\2\1\33\6\2\1\34\1\35\1\0\1\36\1\37"+
    "\1\40\1\0\1\24\1\0\1\41\5\2\1\42\2\2"+
    "\1\43\3\2\1\44\2\2\1\45\22\2\1\46\14\2"+
    "\1\47\1\50\1\51\1\0\1\52\1\0\6\2\1\53"+
    "\6\2\1\54\6\2\1\55\7\2\1\56\1\57\1\2"+
    "\1\60\1\61\11\2\1\62\7\2\1\63\1\0\4\2"+
    "\1\64\2\2\1\65\1\66\1\67\1\70\2\2\1\71"+
    "\6\2\1\72\1\73\5\2\1\74\1\2\1\75\1\76"+
    "\2\2\1\77\1\2\1\100\1\101\2\2\1\102\3\2"+
    "\1\103\1\0\12\2\1\104\1\105\1\2\1\106\1\2"+
    "\1\107\3\2\1\110\1\2\1\111\1\112\5\2\1\113"+
    "\1\0\3\2\1\114\2\2\1\115\1\116\2\2\1\117"+
    "\1\120\4\2\1\121\1\2\1\122\1\123\1\124\1\2"+
    "\1\0\5\2\1\125\1\126\3\2\1\127\1\130\1\2"+
    "\1\0\1\131\1\2\1\132\1\2\1\133\1\2\1\134"+
    "\1\2\1\135\1\0\1\136\1\137\1\140\1\141\5\0"+
    "\1\142";

  private static int [] zzUnpackAction() {
    int [] result = new int[341];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1"+
    "\0\67\0\67\0\67\0\67\0\67\0\67\0\67\0\67"+
    "\0\67\0\u0528\0\u055f\0\67\0\67\0\67\0\u0596\0\67"+
    "\0\u05cd\0\u0604\0\u063b\0\u0672\0\u0672\0\u06a9\0\67\0\u06e0"+
    "\0\u0717\0\u0415\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0861"+
    "\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u0415\0\u09e2"+
    "\0\u0a19\0\u0a50\0\u0415\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63"+
    "\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b"+
    "\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0415"+
    "\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\67"+
    "\0\u1054\0\u108b\0\67\0\67\0\u10c2\0\67\0\u10f9\0\u1130"+
    "\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243\0\u0415\0\u127a\0\u12b1"+
    "\0\u0415\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u0415"+
    "\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3"+
    "\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b"+
    "\0\u17a2\0\u17d9\0\u0415\0\u1810\0\u1847\0\u187e\0\u18b5\0\u18ec"+
    "\0\u1923\0\u195a\0\u1991\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\u0415"+
    "\0\u0415\0\67\0\u1aa4\0\u10c2\0\u1adb\0\u1b12\0\u1b49\0\u1b80"+
    "\0\u1bb7\0\u1bee\0\u1c25\0\u0415\0\u1c5c\0\u1c93\0\u1cca\0\u1d01"+
    "\0\u1d38\0\u1d6f\0\u0415\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82"+
    "\0\u1eb9\0\u0415\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003"+
    "\0\u203a\0\u2071\0\u0415\0\u20a8\0\u0415\0\u0415\0\u20df\0\u2116"+
    "\0\u214d\0\u2184\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u2297\0\u0415"+
    "\0\u22ce\0\u2305\0\u233c\0\u2373\0\u23aa\0\u23e1\0\u2418\0\u1054"+
    "\0\u244f\0\u2486\0\u24bd\0\u24f4\0\u252b\0\u0415\0\u2562\0\u2599"+
    "\0\u0415\0\u0415\0\u25d0\0\u0415\0\u2607\0\u263e\0\u0415\0\u2675"+
    "\0\u26ac\0\u26e3\0\u271a\0\u2751\0\u2788\0\u0415\0\u0415\0\u27bf"+
    "\0\u27f6\0\u282d\0\u2864\0\u289b\0\u0415\0\u28d2\0\u0415\0\u0415"+
    "\0\u2909\0\u2940\0\u0415\0\u2977\0\u0415\0\u0415\0\u29ae\0\u29e5"+
    "\0\u0415\0\u2a1c\0\u2a53\0\u2a8a\0\u0415\0\u2ac1\0\u2af8\0\u2b2f"+
    "\0\u2b66\0\u2b9d\0\u2bd4\0\u2c0b\0\u2c42\0\u2c79\0\u2cb0\0\u2ce7"+
    "\0\u0415\0\u0415\0\u2d1e\0\u0415\0\u2d55\0\u2d8c\0\u2dc3\0\u2dfa"+
    "\0\u2e31\0\u0415\0\u2e68\0\u0415\0\u0415\0\u2e9f\0\u2ed6\0\u2f0d"+
    "\0\u2f44\0\u2f7b\0\u0415\0\u2fb2\0\u2fe9\0\u3020\0\u3057\0\u0415"+
    "\0\u308e\0\u30c5\0\u0415\0\u0415\0\u30fc\0\u3133\0\u0415\0\u0415"+
    "\0\u316a\0\u31a1\0\u31d8\0\u320f\0\u0415\0\u3246\0\u0415\0\u0415"+
    "\0\u0415\0\u327d\0\u32b4\0\u32eb\0\u3322\0\u3359\0\u3390\0\u33c7"+
    "\0\u0415\0\u0415\0\u33fe\0\u3435\0\u346c\0\u0415\0\u0415\0\u34a3"+
    "\0\u34da\0\u0415\0\u3511\0\u0415\0\u3548\0\u0415\0\u357f\0\u0415"+
    "\0\u35b6\0\u0415\0\u35ed\0\u0415\0\u0415\0\u0415\0\u0415\0\u3624"+
    "\0\u365b\0\u3692\0\u36c9\0\u3700\0\67";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[341];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\3\24\1\25\1\26\1\27\1\30\1\24"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\24\2\53\1\54\1\55\1\56\1\57"+
    "\1\60\2\2\1\56\70\0\1\24\1\61\1\24\1\62"+
    "\12\24\1\63\4\24\1\64\5\24\22\0\2\24\12\0"+
    "\6\24\1\65\4\24\1\66\1\24\1\67\13\24\22\0"+
    "\2\24\12\0\10\24\1\70\11\24\1\71\6\24\22\0"+
    "\2\24\12\0\1\72\3\24\1\73\1\74\7\24\1\75"+
    "\13\24\22\0\2\24\12\0\1\76\30\24\22\0\2\24"+
    "\12\0\10\24\1\77\20\24\22\0\2\24\12\0\1\24"+
    "\1\100\6\24\1\101\1\24\1\102\3\24\1\103\12\24"+
    "\22\0\2\24\12\0\2\24\1\104\26\24\22\0\2\24"+
    "\12\0\13\24\1\105\15\24\22\0\2\24\12\0\4\24"+
    "\1\106\1\107\23\24\22\0\2\24\12\0\5\24\1\110"+
    "\2\24\1\111\20\24\22\0\2\24\12\0\1\24\1\112"+
    "\2\24\1\113\12\24\1\114\3\24\1\115\2\24\1\116"+
    "\1\117\1\24\22\0\2\24\12\0\1\120\30\24\22\0"+
    "\2\24\12\0\1\24\1\121\14\24\1\122\12\24\22\0"+
    "\2\24\12\0\2\24\1\123\22\24\1\124\3\24\22\0"+
    "\2\24\12\0\4\24\1\125\1\126\1\127\22\24\22\0"+
    "\2\24\12\0\5\24\1\130\5\24\1\131\15\24\22\0"+
    "\2\24\12\0\31\24\22\0\2\24\12\0\10\24\1\132"+
    "\4\24\1\133\13\24\22\0\2\24\12\0\22\24\1\134"+
    "\6\24\22\0\2\24\12\0\6\24\1\135\22\24\22\0"+
    "\2\24\12\0\5\24\1\136\23\24\22\0\2\24\54\0"+
    "\1\137\66\0\1\140\72\0\1\141\1\142\70\0\1\143"+
    "\67\0\1\144\55\0\1\145\12\0\2\53\53\0\1\146"+
    "\104\0\1\56\4\0\1\56\34\0\1\147\33\0\2\24"+
    "\1\150\13\24\1\151\1\152\11\24\22\0\2\24\12\0"+
    "\16\24\1\153\12\24\22\0\2\24\12\0\24\24\1\154"+
    "\4\24\22\0\2\24\12\0\23\24\1\155\5\24\22\0"+
    "\2\24\12\0\25\24\1\156\3\24\22\0\2\24\12\0"+
    "\4\24\1\157\24\24\22\0\2\24\12\0\6\24\1\160"+
    "\5\24\1\161\14\24\22\0\2\24\12\0\10\24\1\162"+
    "\20\24\22\0\2\24\12\0\1\24\1\163\27\24\22\0"+
    "\2\24\12\0\5\24\1\164\23\24\22\0\2\24\12\0"+
    "\10\24\1\165\20\24\22\0\2\24\12\0\1\24\1\166"+
    "\27\24\22\0\2\24\12\0\16\24\1\167\12\24\22\0"+
    "\2\24\12\0\20\24\1\170\10\24\22\0\2\24\12\0"+
    "\10\24\1\171\20\24\22\0\2\24\12\0\16\24\1\172"+
    "\12\24\22\0\2\24\12\0\10\24\1\173\20\24\22\0"+
    "\2\24\12\0\2\24\1\174\25\24\1\175\22\0\2\24"+
    "\12\0\5\24\1\176\23\24\22\0\2\24\12\0\2\24"+
    "\1\177\26\24\22\0\2\24\12\0\5\24\1\200\23\24"+
    "\22\0\2\24\12\0\13\24\1\201\15\24\22\0\2\24"+
    "\12\0\20\24\1\202\10\24\22\0\2\24\12\0\16\24"+
    "\1\203\12\24\22\0\2\24\12\0\22\24\1\204\6\24"+
    "\22\0\2\24\12\0\24\24\1\205\4\24\22\0\2\24"+
    "\12\0\6\24\1\206\22\24\22\0\2\24\12\0\1\207"+
    "\1\24\1\210\26\24\22\0\2\24\12\0\13\24\1\211"+
    "\15\24\22\0\2\24\12\0\16\24\1\212\12\24\22\0"+
    "\2\24\12\0\13\24\1\213\15\24\22\0\2\24\12\0"+
    "\6\24\1\214\22\24\22\0\2\24\12\0\1\215\30\24"+
    "\22\0\2\24\12\0\6\24\1\216\22\24\22\0\2\24"+
    "\12\0\1\24\1\217\27\24\22\0\2\24\12\0\2\24"+
    "\1\220\13\24\1\221\12\24\22\0\2\24\12\0\3\24"+
    "\1\222\13\24\1\223\11\24\22\0\2\24\12\0\1\224"+
    "\4\24\1\225\23\24\22\0\2\24\12\0\12\24\1\226"+
    "\16\24\22\0\2\24\12\0\1\227\30\24\22\0\2\24"+
    "\12\0\10\24\1\230\20\24\22\0\2\24\12\0\10\24"+
    "\1\231\20\24\22\0\2\24\54\0\1\232\23\0\47\141"+
    "\1\233\17\141\61\142\2\0\4\142\55\0\2\234\46\0"+
    "\1\235\31\0\13\24\1\236\15\24\22\0\2\24\12\0"+
    "\2\24\1\237\26\24\22\0\2\24\12\0\4\24\1\240"+
    "\24\24\22\0\2\24\12\0\13\24\1\241\15\24\22\0"+
    "\2\24\12\0\4\24\1\242\24\24\22\0\2\24\12\0"+
    "\13\24\1\243\15\24\22\0\2\24\12\0\4\24\1\244"+
    "\24\24\22\0\2\24\12\0\1\245\30\24\22\0\2\24"+
    "\12\0\5\24\1\246\23\24\22\0\2\24\12\0\6\24"+
    "\1\247\22\24\22\0\2\24\12\0\6\24\1\250\22\24"+
    "\22\0\2\24\12\0\13\24\1\251\15\24\22\0\2\24"+
    "\12\0\17\24\1\252\11\24\22\0\2\24\12\0\2\24"+
    "\1\253\26\24\22\0\2\24\12\0\6\24\1\254\22\24"+
    "\22\0\2\24\12\0\2\24\1\255\26\24\22\0\2\24"+
    "\12\0\1\256\30\24\22\0\2\24\12\0\15\24\1\257"+
    "\13\24\22\0\2\24\12\0\15\24\1\260\13\24\22\0"+
    "\2\24\12\0\12\24\1\261\16\24\22\0\2\24\12\0"+
    "\5\24\1\262\23\24\22\0\2\24\12\0\4\24\1\263"+
    "\24\24\22\0\2\24\12\0\6\24\1\264\22\24\22\0"+
    "\2\24\12\0\1\265\2\24\1\266\12\24\1\267\1\24"+
    "\1\270\4\24\1\271\3\24\22\0\2\24\12\0\13\24"+
    "\1\272\15\24\22\0\2\24\12\0\5\24\1\273\23\24"+
    "\22\0\2\24\12\0\2\24\1\274\26\24\22\0\2\24"+
    "\12\0\4\24\1\275\24\24\22\0\2\24\12\0\2\24"+
    "\1\276\26\24\22\0\2\24\12\0\13\24\1\277\15\24"+
    "\22\0\2\24\12\0\4\24\1\300\24\24\22\0\2\24"+
    "\12\0\13\24\1\301\15\24\22\0\2\24\12\0\2\24"+
    "\1\302\26\24\22\0\2\24\12\0\2\24\1\303\26\24"+
    "\22\0\2\24\12\0\16\24\1\304\12\24\22\0\2\24"+
    "\12\0\2\24\1\305\13\24\1\306\12\24\22\0\2\24"+
    "\12\0\17\24\1\307\11\24\22\0\2\24\12\0\13\24"+
    "\1\310\15\24\22\0\2\24\12\0\6\24\1\311\22\24"+
    "\22\0\2\24\12\0\4\24\1\312\24\24\22\0\2\24"+
    "\12\0\1\24\1\313\24\24\1\314\2\24\22\0\2\24"+
    "\12\0\2\24\1\315\26\24\22\0\2\24\12\0\4\24"+
    "\1\316\24\24\22\0\2\24\12\0\4\24\1\317\24\24"+
    "\22\0\2\24\11\0\47\141\1\233\1\320\16\141\64\0"+
    "\1\321\3\0\10\24\1\322\20\24\22\0\2\24\12\0"+
    "\6\24\1\323\4\24\1\324\15\24\22\0\2\24\12\0"+
    "\15\24\1\325\13\24\22\0\2\24\12\0\2\24\1\326"+
    "\26\24\22\0\2\24\12\0\13\24\1\327\15\24\22\0"+
    "\2\24\12\0\16\24\1\330\12\24\22\0\2\24\12\0"+
    "\2\24\1\331\26\24\22\0\2\24\12\0\25\24\1\332"+
    "\3\24\22\0\2\24\12\0\4\24\1\333\24\24\22\0"+
    "\2\24\12\0\2\24\1\334\26\24\22\0\2\24\12\0"+
    "\6\24\1\335\22\24\22\0\2\24\12\0\2\24\1\336"+
    "\26\24\22\0\2\24\12\0\14\24\1\337\14\24\22\0"+
    "\2\24\12\0\10\24\1\340\20\24\22\0\2\24\12\0"+
    "\1\24\1\341\27\24\22\0\2\24\12\0\10\24\1\342"+
    "\20\24\22\0\2\24\12\0\1\343\30\24\22\0\2\24"+
    "\12\0\6\24\1\344\22\24\22\0\2\24\12\0\13\24"+
    "\1\345\15\24\22\0\2\24\12\0\21\24\1\346\7\24"+
    "\22\0\2\24\12\0\3\24\1\347\25\24\22\0\2\24"+
    "\12\0\5\24\1\350\23\24\22\0\2\24\12\0\25\24"+
    "\1\351\3\24\22\0\2\24\12\0\13\24\1\352\15\24"+
    "\22\0\2\24\12\0\22\24\1\353\6\24\22\0\2\24"+
    "\12\0\1\354\30\24\22\0\2\24\12\0\14\24\1\355"+
    "\14\24\22\0\2\24\12\0\1\24\1\356\27\24\22\0"+
    "\2\24\12\0\20\24\1\357\10\24\22\0\2\24\12\0"+
    "\2\24\1\360\26\24\22\0\2\24\12\0\1\361\30\24"+
    "\22\0\2\24\12\0\17\24\1\362\11\24\22\0\2\24"+
    "\12\0\16\24\1\363\12\24\22\0\2\24\12\0\1\364"+
    "\30\24\22\0\2\24\12\0\2\24\1\365\26\24\22\0"+
    "\2\24\12\0\22\24\1\366\6\24\22\0\2\24\12\0"+
    "\15\24\1\367\13\24\22\0\2\24\12\0\6\24\1\370"+
    "\22\24\22\0\2\24\12\0\2\24\1\371\26\24\22\0"+
    "\2\24\12\0\6\24\1\372\22\24\22\0\2\24\12\0"+
    "\13\24\1\373\15\24\22\0\2\24\12\0\1\374\30\24"+
    "\22\0\2\24\12\0\13\24\1\375\15\24\22\0\2\24"+
    "\74\0\1\376\4\0\3\24\1\377\25\24\22\0\2\24"+
    "\12\0\1\24\1\u0100\27\24\22\0\2\24\12\0\6\24"+
    "\1\u0101\22\24\22\0\2\24\12\0\20\24\1\u0102\10\24"+
    "\22\0\2\24\12\0\23\24\1\u0103\5\24\22\0\2\24"+
    "\12\0\24\24\1\u0104\4\24\22\0\2\24\12\0\4\24"+
    "\1\u0105\24\24\22\0\2\24\12\0\17\24\1\u0106\11\24"+
    "\22\0\2\24\12\0\1\u0107\30\24\22\0\2\24\12\0"+
    "\6\24\1\u0108\22\24\22\0\2\24\12\0\11\24\1\u0109"+
    "\17\24\22\0\2\24\12\0\1\24\1\u010a\27\24\22\0"+
    "\2\24\12\0\10\24\1\u010b\20\24\22\0\2\24\12\0"+
    "\4\24\1\u010c\24\24\22\0\2\24\12\0\6\24\1\u010d"+
    "\22\24\22\0\2\24\12\0\10\24\1\u010e\20\24\22\0"+
    "\2\24\12\0\1\u010f\30\24\22\0\2\24\12\0\17\24"+
    "\1\u0110\11\24\22\0\2\24\12\0\1\u0111\30\24\22\0"+
    "\2\24\12\0\3\24\1\u0112\25\24\22\0\2\24\12\0"+
    "\20\24\1\u0113\10\24\22\0\2\24\12\0\17\24\1\u0114"+
    "\11\24\22\0\2\24\12\0\22\24\1\u0115\6\24\22\0"+
    "\2\24\12\0\1\24\1\u0116\27\24\22\0\2\24\12\0"+
    "\4\24\1\u0117\24\24\22\0\2\24\12\0\10\24\1\u0118"+
    "\20\24\22\0\2\24\12\0\2\24\1\u0119\26\24\22\0"+
    "\2\24\12\0\17\24\1\u011a\11\24\22\0\2\24\12\0"+
    "\17\24\1\u011b\11\24\22\0\2\24\76\0\1\u011c\2\0"+
    "\6\24\1\u011d\22\24\22\0\2\24\12\0\17\24\1\u011e"+
    "\11\24\22\0\2\24\12\0\20\24\1\u011f\10\24\22\0"+
    "\2\24\12\0\13\24\1\u0120\15\24\22\0\2\24\12\0"+
    "\13\24\1\u0121\15\24\22\0\2\24\12\0\6\24\1\u0122"+
    "\22\24\22\0\2\24\12\0\14\24\1\u0123\14\24\22\0"+
    "\2\24\12\0\22\24\1\u0124\6\24\22\0\2\24\12\0"+
    "\5\24\1\u0125\23\24\22\0\2\24\12\0\17\24\1\u0126"+
    "\11\24\22\0\2\24\12\0\13\24\1\u0127\15\24\22\0"+
    "\2\24\12\0\1\24\1\u0128\27\24\22\0\2\24\12\0"+
    "\13\24\1\u0129\15\24\22\0\2\24\12\0\2\24\1\u012a"+
    "\26\24\22\0\2\24\12\0\4\24\1\u012b\24\24\22\0"+
    "\2\24\12\0\4\24\1\u012c\24\24\22\0\2\24\12\0"+
    "\16\24\1\u012d\12\24\22\0\2\24\12\0\15\24\1\u012e"+
    "\13\24\22\0\2\24\12\0\2\24\1\u012f\26\24\22\0"+
    "\2\24\12\0\13\24\1\u0130\15\24\22\0\2\24\12\0"+
    "\13\24\1\u0131\15\24\22\0\2\24\12\0\2\24\1\u0132"+
    "\26\24\22\0\2\24\76\0\1\u0133\2\0\17\24\1\u0134"+
    "\11\24\22\0\2\24\12\0\13\24\1\u0135\15\24\22\0"+
    "\2\24\12\0\5\24\1\u0136\23\24\22\0\2\24\12\0"+
    "\1\24\1\u0137\27\24\22\0\2\24\12\0\17\24\1\u0138"+
    "\11\24\22\0\2\24\12\0\1\24\1\u0139\27\24\22\0"+
    "\2\24\12\0\2\24\1\u013a\26\24\22\0\2\24\12\0"+
    "\6\24\1\u013b\22\24\22\0\2\24\12\0\17\24\1\u013c"+
    "\11\24\22\0\2\24\12\0\6\24\1\u013d\22\24\22\0"+
    "\2\24\12\0\13\24\1\u013e\15\24\22\0\2\24\12\0"+
    "\13\24\1\u013f\15\24\22\0\2\24\12\0\13\24\1\u0140"+
    "\15\24\22\0\2\24\50\0\1\u0141\30\0\13\24\1\u0142"+
    "\15\24\22\0\2\24\12\0\5\24\1\u0143\23\24\22\0"+
    "\2\24\12\0\3\24\1\u0144\25\24\22\0\2\24\12\0"+
    "\2\24\1\u0145\26\24\22\0\2\24\12\0\13\24\1\u0146"+
    "\15\24\22\0\2\24\12\0\17\24\1\u0147\11\24\22\0"+
    "\2\24\12\0\22\24\1\u0148\6\24\22\0\2\24\12\0"+
    "\10\24\1\u0149\20\24\22\0\2\24\12\0\20\24\1\u014a"+
    "\10\24\22\0\2\24\64\0\1\u014b\14\0\3\24\1\u014c"+
    "\25\24\22\0\2\24\12\0\16\24\1\u014d\12\24\22\0"+
    "\2\24\12\0\22\24\1\u014e\6\24\22\0\2\24\12\0"+
    "\13\24\1\u014f\15\24\22\0\2\24\76\0\1\u0150\66\0"+
    "\1\u0151\43\0\1\u0152\61\0\1\u0153\100\0\1\u0154\102\0"+
    "\1\u0155\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14135];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\26\1\11\11\2\1\3\11\1\1\1\11"+
    "\6\1\1\11\60\1\1\11\1\0\1\1\2\11\1\0"+
    "\1\11\1\0\62\1\1\11\1\0\1\1\1\0\63\1"+
    "\1\0\54\1\1\0\35\1\1\0\26\1\1\0\15\1"+
    "\1\0\11\1\1\0\4\1\5\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[341];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerPalabrasReservadasPHP(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 372) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> ERROR Token no reconocido");
            }
          case 99: break;
          case 2: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Identificador ");                
                return TokensPHP.IDENTIFICADOR;
            }
          case 100: break;
          case 3: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Llave de apertura ");                
                return TokensPHP.LLAVE_APERTURA;
            }
          case 101: break;
          case 4: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Llave de cierre ");                
                return TokensPHP.LLAVE_CIERRE;
            }
          case 102: break;
          case 5: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Parentesis de apertura ");                
                return TokensPHP.PARENTESIS_APERTURA;
            }
          case 103: break;
          case 6: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Parentesis de cierre ");                
                return TokensPHP.PARENTESIS_CIERRE;
            }
          case 104: break;
          case 7: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Corchete de apertura ");                
                return TokensPHP.CORCHETE_APERTURA;
            }
          case 105: break;
          case 8: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Corchete de cierre ");                
                return TokensPHP.CORCHETE_CIERRE;
            }
          case 106: break;
          case 9: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Punto y coma ");                
                return TokensPHP.PUNTO_Y_COMA;
            }
          case 107: break;
          case 10: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Coma ");                
                return TokensPHP.COMA;
            }
          case 108: break;
          case 11: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Punto ");                
                return TokensPHP.PUNTO;
            }
          case 109: break;
          case 12: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador de asignacion ");                
                return TokensPHP.OPERADOR_ASIGNACION;
            }
          case 110: break;
          case 13: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador logico NOT ");                
                return TokensPHP.OPERADOR_LOGICO_NOT;
            }
          case 111: break;
          case 14: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador de suma ");                
                return TokensPHP.OPERADOR_SUMA;
            }
          case 112: break;
          case 15: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador de resta ");                
                return TokensPHP.OPERADOR_RESTA;
            }
          case 113: break;
          case 16: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador de multiplicacion ");                
                return TokensPHP.OPERADOR_MULTIPLICACION;
            }
          case 114: break;
          case 17: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador de division ");                
                return TokensPHP.OPERADOR_DIVISION;
            }
          case 115: break;
          case 18: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador de modulo ");                
                return TokensPHP.OPERADOR_MODULO;
            }
          case 116: break;
          case 19: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Numero entero ");                
                return TokensPHP.NUMERO_ENTERO;
            }
          case 117: break;
          case 20: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador relacional ");                
                return TokensPHP.OPERADOR_RELACIONAL;
            }
          case 118: break;
          case 21: 
            { /* Ignorar espacios en blanco */
            }
          case 119: break;
          case 22: 
            { System.out.print(yytext());
            }
          case 120: break;
          case 23: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Comillas dobles ");                
                return TokensPHP.COMILLAS_DOBLES;
            }
          case 121: break;
          case 24: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'if' ");
                return TokensPHP.IF;
            }
          case 122: break;
          case 25: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'or' ");
                return TokensPHP.OR;
            }
          case 123: break;
          case 26: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'as' ");
                return TokensPHP.AS;
            }
          case 124: break;
          case 27: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'do' ");
                return TokensPHP.DO;
            }
          case 125: break;
          case 28: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador de igualdad ");                
                return TokensPHP.OPERADOR_IGUALDAD;
            }
          case 126: break;
          case 29: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador de desigualdad ");                
                return TokensPHP.OPERADOR_DESIGUALDAD;
            }
          case 127: break;
          case 30: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Comentario de linea ");                
                return TokensPHP.COMENTARIO_LINEA;
            }
          case 128: break;
          case 31: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador logico AND ");                
                return TokensPHP.OPERADOR_LOGICO_AND;
            }
          case 129: break;
          case 32: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador logico OR ");                
                return TokensPHP.OPERADOR_LOGICO_OR;
            }
          case 130: break;
          case 33: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Tipo de dato int ");
                return TokensPHP.INT;
            }
          case 131: break;
          case 34: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'new' ");
                return TokensPHP.NEW;
            }
          case 132: break;
          case 35: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'try' ");
                return TokensPHP.TRY;
            }
          case 133: break;
          case 36: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'for' ");
                return TokensPHP.FOR;
            }
          case 134: break;
          case 37: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'and' ");
                return TokensPHP.AND;
            }
          case 135: break;
          case 38: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'use' ");
                return TokensPHP.USE;
            }
          case 136: break;
          case 39: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'var' ");
                return TokensPHP.VAR;
            }
          case 137: break;
          case 40: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'xor' ");
                return TokensPHP.XOR;
            }
          case 138: break;
          case 41: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador de identidad ");                
                return TokensPHP.OPERADOR_IDENTIDAD;
            }
          case 139: break;
          case 42: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Numero en punto flotante ");                
                return TokensPHP.NUMERO_FLOTANTE;
            }
          case 140: break;
          case 43: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Tipo de dato null ");
                return TokensPHP.NULL;
            }
          case 141: break;
          case 44: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'list' ");
                return TokensPHP.LIST;
            }
          case 142: break;
          case 45: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'goto' ");
                return TokensPHP.GOTO;
            }
          case 143: break;
          case 46: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'else' ");
                return TokensPHP.ELSE;
            }
          case 144: break;
          case 47: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'echo' ");
                return TokensPHP.ECHO;
            }
          case 145: break;
          case 48: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'eval' ");
                return TokensPHP.EVAL;
            }
          case 146: break;
          case 49: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'exit' ");
                return TokensPHP.EXIT;
            }
          case 147: break;
          case 50: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'case' ");
                return TokensPHP.CASE;
            }
          case 148: break;
          case 51: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Comentario de bloque ");                
                return TokensPHP.COMENTARIO_BLOQUE;
            }
          case 149: break;
          case 52: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'isset' ");
                return TokensPHP.ISSET;
            }
          case 150: break;
          case 53: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'trait' ");
                return TokensPHP.TRAIT;
            }
          case 151: break;
          case 54: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'throw' ");
                return TokensPHP.THROW;
            }
          case 152: break;
          case 55: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'final' ");
                return TokensPHP.FINAL;
            }
          case 153: break;
          case 56: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Tipo de dato float ");
                return TokensPHP.FLOAT;
            }
          case 154: break;
          case 57: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Tipo de dato array ");
                return TokensPHP.ARRAY;
            }
          case 155: break;
          case 58: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'break' ");
                return TokensPHP.BREAK;
            }
          case 156: break;
          case 59: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'endif' ");
                return TokensPHP.ENDIF;
            }
          case 157: break;
          case 60: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'empty' ");
                return TokensPHP.EMPTY;
            }
          case 158: break;
          case 61: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + "-> Palabra reservada: 'yield' ");
                return TokensPHP.YIELD;
            }
          case 159: break;
          case 62: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'unset' ");
                return TokensPHP.UNSET;
            }
          case 160: break;
          case 63: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'class' ");
                return TokensPHP.CLASS;
            }
          case 161: break;
          case 64: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'const' ");
                return TokensPHP.CONST;
            }
          case 162: break;
          case 65: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'catch' ");
                return TokensPHP.CATCH;
            }
          case 163: break;
          case 66: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'print' ");
                return TokensPHP.PRINT;
            }
          case 164: break;
          case 67: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'while' ");
                return TokensPHP.WHILE;
            }
          case 165: break;
          case 68: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Tipo de dato String ");
                return TokensPHP.STRING;
            }
          case 166: break;
          case 69: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'return' ");
                return TokensPHP.RETURN;
            }
          case 167: break;
          case 70: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'global' ");
                return TokensPHP.GLOBAL;
            }
          case 168: break;
          case 71: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'endfor' ");
                return TokensPHP.ENDFOR;
            }
          case 169: break;
          case 72: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'elseif' ");
                return TokensPHP.ELSEIF;
            }
          case 170: break;
          case 73: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'static' ");
                return TokensPHP.STATIC;
            }
          case 171: break;
          case 74: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'switch' ");
                return TokensPHP.SWITCH;
            }
          case 172: break;
          case 75: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'public' ");
                return TokensPHP.PUBLIC;
            }
          case 173: break;
          case 76: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'include' ");
                return TokensPHP.INCLUDE;
            }
          case 174: break;
          case 77: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'finally'");
                return TokensPHP.FINALLY;
            }
          case 175: break;
          case 78: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'foreach' ");
                return TokensPHP.FOREACH;
            }
          case 176: break;
          case 79: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'require' ");
                return TokensPHP.REQUIRE;
            }
          case 177: break;
          case 80: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Tipo de dato boolean ");
                return TokensPHP.BOOLEAN;
            }
          case 178: break;
          case 81: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'extends' ");
                return TokensPHP.EXTENDS;
            }
          case 179: break;
          case 82: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'default' ");
                return TokensPHP.DEFAULT;
            }
          case 180: break;
          case 83: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'declare' ");
                return TokensPHP.DECLARE;
            }
          case 181: break;
          case 84: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'private' ");
                return TokensPHP.PRIVATE;
            }
          case 182: break;
          case 85: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'function' ");
                return TokensPHP.FUNCTION;
            }
          case 183: break;
          case 86: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'abstract' ");
                return TokensPHP.ABSTRACT;
            }
          case 184: break;
          case 87: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'endwhile' ");
                return TokensPHP.ENDWHILE;
            }
          case 185: break;
          case 88: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'continue' ");
                return TokensPHP.CONTINUE;
            }
          case 186: break;
          case 89: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'interface' ");
                return TokensPHP.INTERFACE;
            }
          case 187: break;
          case 90: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'insteadof' ");
                return TokensPHP.INSTEADOF;
            }
          case 188: break;
          case 91: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'namespace' ");
                return TokensPHP.NAMESPACE;
            }
          case 189: break;
          case 92: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'endswitch' ");
                return TokensPHP.ENDSWITCH;
            }
          case 190: break;
          case 93: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'protected' ");
                return TokensPHP.PROTECTED;
            }
          case 191: break;
          case 94: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'instanceof' ");
                return TokensPHP.INSTANCEOF;
            }
          case 192: break;
          case 95: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'implements' ");
                return TokensPHP.IMPLEMENTS;
            }
          case 193: break;
          case 96: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'endforeach' ");
                return TokensPHP.ENDFOREACH;
            }
          case 194: break;
          case 97: 
            { System.out.print("Linea:" + (yyline + 1) + ", Columna:" + (yycolumn + 1) + "\t");
                System.out.println(yytext() + " -> Palabra reservada: 'enddeclare' ");
                return TokensPHP.ENDDECLARE;
            }
          case 195: break;
          case 98: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Cadena de texto ");                
                return TokensPHP.CADENA_TEXTO;
            }
          case 196: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexerPalabrasReservadasPHP [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexerPalabrasReservadasPHP scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexerPalabrasReservadasPHP(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
