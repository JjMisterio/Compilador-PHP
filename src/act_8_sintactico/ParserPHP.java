
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Oct 25 12:17:14 CST 2024
//----------------------------------------------------

package act_8_sintactico;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Oct 25 12:17:14 CST 2024
  */
public class ParserPHP extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserPHP() {super();}

  /** Constructor which sets the default scanner. */
  public ParserPHP(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserPHP(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\212\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\002\004\000\002\002\003\000\002\003\003" +
    "\000\002\003\002\000\002\005\005\000\002\005\004\000" +
    "\002\005\004\000\002\005\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\005\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\007\006\000\002\010\006\000\002" +
    "\011\005\000\002\011\002\000\002\012\005\000\002\012" +
    "\002\000\002\013\005\000\002\014\005\000\002\015\005" +
    "\000\002\016\003\000\002\016\003\000\002\017\005\000" +
    "\002\020\005\000\002\021\005\000\002\021\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\002" +
    "\000\002\024\013\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\027\005" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\031\012" +
    "\000\002\032\006\000\002\032\012\000\002\033\011\000" +
    "\002\034\013\000\002\035\015\000\002\036\022\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\040\011\000\002\040\002\000\002\041\007" +
    "\000\002\042\006\000\002\042\005\000\002\042\005\000" +
    "\002\042\005\000\002\042\005\000\002\042\004\000\002" +
    "\042\004\000\002\042\004\000\002\042\004\000\002\042" +
    "\004\000\002\042\004\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\002\000" +
    "\002\044\006\000\002\044\007\000\002\053\003\000\002" +
    "\053\005\000\002\045\010\000\002\045\010\000\002\045" +
    "\010\000\002\045\010\000\002\052\010\000\002\052\010" +
    "\000\002\052\010\000\002\052\010\000\002\052\002\000" +
    "\002\043\005\000\002\043\002\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\004\000\002\046" +
    "\004\000\002\046\004\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\004\000\002\047\004\000" +
    "\002\047\004\000\002\047\004\000\002\047\004\000\002" +
    "\047\004\000\002\050\014\000\002\056\003\000\002\056" +
    "\004\000\002\051\011\000\002\051\013\000\002\051\012" +
    "\000\002\051\014\000\002\054\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013a\000\010\004\004\005\011\006\006\001\002\000" +
    "\004\075\u0137\001\002\000\004\002\u0136\001\002\000\004" +
    "\075\025\001\002\000\004\002\ufffd\001\002\000\004\006" +
    "\006\001\002\000\004\075\016\001\002\000\006\005\011" +
    "\006\006\001\002\000\004\002\uffff\001\002\000\004\006" +
    "\006\001\002\000\004\002\000\001\002\000\006\050\uffe5" +
    "\064\020\001\002\000\004\050\023\001\002\000\004\075" +
    "\021\001\002\000\006\050\uffe5\064\020\001\002\000\004" +
    "\050\uffe6\001\002\000\004\006\uffe9\001\002\000\004\002" +
    "\ufffe\001\002\000\004\042\026\001\002\000\014\007\027" +
    "\010\037\011\034\016\042\043\uff9e\001\002\000\012\012" +
    "\u0135\013\112\014\uff88\076\uff8e\001\002\000\014\007\027" +
    "\010\037\011\034\016\042\043\uffa2\001\002\000\012\007" +
    "\105\010\106\011\102\043\uffa0\001\002\000\004\014\u0120" +
    "\001\002\000\012\007\105\010\106\011\102\043\uff9f\001" +
    "\002\000\012\012\u011f\013\u0116\014\uff86\076\uff8c\001\002" +
    "\000\004\076\u0119\001\002\000\012\007\uff7e\010\uff7e\011" +
    "\uff7e\043\uff7e\001\002\000\012\012\u0118\013\110\014\uff87" +
    "\076\uff8d\001\002\000\004\043\u0117\001\002\000\012\007" +
    "\105\010\106\011\102\043\uffa1\001\002\000\004\077\043" +
    "\001\002\000\004\054\044\001\002\000\014\021\047\022" +
    "\050\100\051\101\046\105\052\001\002\000\004\050\100" +
    "\001\002\000\004\050\076\001\002\000\006\050\uffe1\052" +
    "\uffe1\001\002\000\006\050\uffe0\052\uffe0\001\002\000\004" +
    "\050\074\001\002\000\004\050\053\001\002\000\014\007" +
    "\uff91\010\uff91\011\uff91\016\054\043\uff91\001\002\000\004" +
    "\077\056\001\002\000\012\007\uff99\010\uff99\011\uff99\043" +
    "\uff99\001\002\000\004\054\057\001\002\000\014\021\047" +
    "\022\050\100\062\101\061\105\063\001\002\000\004\050" +
    "\072\001\002\000\004\050\070\001\002\000\004\050\066" +
    "\001\002\000\004\050\064\001\002\000\014\007\uff91\010" +
    "\uff91\011\uff91\016\054\043\uff91\001\002\000\012\007\uff95" +
    "\010\uff95\011\uff95\043\uff95\001\002\000\014\007\uff91\010" +
    "\uff91\011\uff91\016\054\043\uff91\001\002\000\012\007\uff94" +
    "\010\uff94\011\uff94\043\uff94\001\002\000\014\007\uff91\010" +
    "\uff91\011\uff91\016\054\043\uff91\001\002\000\012\007\uff93" +
    "\010\uff93\011\uff93\043\uff93\001\002\000\014\007\uff91\010" +
    "\uff91\011\uff91\016\054\043\uff91\001\002\000\012\007\uff92" +
    "\010\uff92\011\uff92\043\uff92\001\002\000\014\007\uff91\010" +
    "\uff91\011\uff91\016\054\043\uff91\001\002\000\012\007\uff98" +
    "\010\uff98\011\uff98\043\uff98\001\002\000\014\007\uff91\010" +
    "\uff91\011\uff91\016\054\043\uff91\001\002\000\012\007\uff97" +
    "\010\uff97\011\uff97\043\uff97\001\002\000\014\007\uff91\010" +
    "\uff91\011\uff91\016\054\043\uff91\001\002\000\012\007\uff96" +
    "\010\uff96\011\uff96\043\uff96\001\002\000\010\012\u0115\013" +
    "\u0116\014\uff86\001\002\000\012\007\105\010\106\011\102" +
    "\043\uffa6\001\002\000\012\007\105\010\106\011\102\043" +
    "\uffa5\001\002\000\010\012\111\013\112\014\uff88\001\002" +
    "\000\010\012\107\013\110\014\uff87\001\002\000\004\014" +
    "\uff84\001\002\000\004\014\uff81\001\002\000\004\014\uff85" +
    "\001\002\000\004\014\uff82\001\002\000\012\007\105\010" +
    "\106\011\102\043\uffac\001\002\000\004\014\115\001\002" +
    "\000\004\075\116\001\002\000\004\044\117\001\002\000" +
    "\006\045\u0107\076\u0108\001\002\000\006\042\121\052\122" +
    "\001\002\000\032\023\144\026\161\027\134\030\151\031" +
    "\141\035\132\036\156\043\ufffb\044\142\076\143\100\147" +
    "\101\140\001\002\000\004\017\123\001\002\000\004\042" +
    "\124\001\002\000\032\023\144\026\161\027\134\030\151" +
    "\031\141\035\132\036\156\043\ufffb\044\142\076\143\100" +
    "\147\101\140\001\002\000\034\023\ufff7\026\ufff7\027\ufff7" +
    "\030\ufff7\031\ufff7\033\ufff7\035\ufff7\036\ufff7\043\ufff7\044" +
    "\ufff7\076\ufff7\100\ufff7\101\ufff7\001\002\000\004\050\ufff2" +
    "\001\002\000\004\050\ufff1\001\002\000\004\050\ufff0\001" +
    "\002\000\004\043\u0103\001\002\000\006\076\u0100\105\377" +
    "\001\002\000\004\050\uffed\001\002\000\004\044\371\001" +
    "\002\000\004\050\uffeb\001\002\000\034\023\144\026\161" +
    "\027\134\030\151\031\141\033\ufffc\035\132\036\156\043" +
    "\ufffc\044\142\076\143\100\147\101\140\001\002\000\034" +
    "\055\202\057\212\060\206\061\210\062\201\063\213\065" +
    "\207\066\214\067\200\071\211\072\203\073\205\074\215" +
    "\001\002\000\040\045\uffd0\050\uffd0\055\uffd0\057\uffd0\060" +
    "\uffd0\061\uffd0\062\uffd0\063\uffd0\065\uffd0\066\uffd0\067\uffd0" +
    "\071\uffd0\072\uffd0\073\uffd0\074\uffd0\001\002\000\004\044" +
    "\334\001\002\000\012\044\173\076\176\100\147\101\140" +
    "\001\002\000\036\054\313\055\uffcf\057\uffcf\060\312\061" +
    "\314\062\uffcf\063\uffcf\065\uffcf\066\uffcf\067\uffcf\071\uffcf" +
    "\072\uffcf\073\uffcf\074\uffcf\001\002\000\004\044\267\001" +
    "\002\000\034\023\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc" +
    "\033\uffbc\035\uffbc\036\uffbc\043\uffbc\044\uffbc\076\uffbc\100" +
    "\uffbc\101\uffbc\001\002\000\004\050\uffef\001\002\000\040" +
    "\045\uffd1\050\uffd1\055\uffd1\057\uffd1\060\uffd1\061\uffd1\062" +
    "\uffd1\063\uffd1\065\uffd1\066\uffd1\067\uffd1\071\uffd1\072\uffd1" +
    "\073\uffd1\074\uffd1\001\002\000\004\050\uffee\001\002\000" +
    "\004\042\257\001\002\000\004\050\256\001\002\000\034" +
    "\023\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\033\uffc0\035" +
    "\uffc0\036\uffc0\043\uffc0\044\uffc0\076\uffc0\100\uffc0\101\uffc0" +
    "\001\002\000\034\023\uffbf\026\uffbf\027\uffbf\030\uffbf\031" +
    "\uffbf\033\uffbf\035\uffbf\036\uffbf\043\uffbf\044\uffbf\076\uffbf" +
    "\100\uffbf\101\uffbf\001\002\000\036\050\ufff4\055\uffd2\057" +
    "\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\065\uffd2\066\uffd2" +
    "\067\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2\001\002\000" +
    "\006\076\246\105\245\001\002\000\004\050\uffec\001\002" +
    "\000\036\050\ufff5\055\uffd3\057\uffd3\060\uffd3\061\uffd3\062" +
    "\uffd3\063\uffd3\065\uffd3\066\uffd3\067\uffd3\071\uffd3\072\uffd3" +
    "\073\uffd3\074\uffd3\001\002\000\004\044\165\001\002\000" +
    "\034\023\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\033\uffbd" +
    "\035\uffbd\036\uffbd\043\uffbd\044\uffbd\076\uffbd\100\uffbd\101" +
    "\uffbd\001\002\000\034\023\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\031\uffbe\033\uffbe\035\uffbe\036\uffbe\043\uffbe\044\uffbe\076" +
    "\uffbe\100\uffbe\101\uffbe\001\002\000\004\050\ufff6\001\002" +
    "\000\004\076\167\001\002\000\004\050\172\001\002\000" +
    "\004\054\170\001\002\000\004\100\171\001\002\000\004" +
    "\050\uffe4\001\002\000\012\044\173\076\176\100\147\101" +
    "\140\001\002\000\012\044\173\076\176\100\147\101\140" +
    "\001\002\000\040\045\uffd2\050\uffd2\055\uffd2\057\uffd2\060" +
    "\uffd2\061\uffd2\062\uffd2\063\uffd2\065\uffd2\066\uffd2\067\uffd2" +
    "\071\uffd2\072\uffd2\073\uffd2\074\uffd2\001\002\000\040\045" +
    "\uffd3\050\uffd3\055\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3" +
    "\063\uffd3\065\uffd3\066\uffd3\067\uffd3\071\uffd3\072\uffd3\073" +
    "\uffd3\074\uffd3\001\002\000\040\045\uffcf\050\uffcf\055\uffcf" +
    "\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\065\uffcf\066" +
    "\uffcf\067\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf\001\002" +
    "\000\036\050\204\055\202\057\212\060\206\061\210\062" +
    "\201\063\213\065\207\066\214\067\200\071\211\072\203" +
    "\073\205\074\215\001\002\000\012\044\173\076\176\100" +
    "\147\101\140\001\002\000\012\044\173\076\176\100\147" +
    "\101\140\001\002\000\012\044\173\076\176\100\147\101" +
    "\140\001\002\000\012\044\173\076\176\100\147\101\140" +
    "\001\002\000\004\076\227\001\002\000\012\044\173\076" +
    "\176\100\147\101\140\001\002\000\012\044\173\076\176" +
    "\100\147\101\140\001\002\000\012\044\173\076\176\100" +
    "\147\101\140\001\002\000\012\044\173\076\176\100\147" +
    "\101\140\001\002\000\012\044\173\076\176\100\147\101" +
    "\140\001\002\000\012\044\173\076\176\100\147\101\140" +
    "\001\002\000\012\044\173\076\176\100\147\101\140\001" +
    "\002\000\012\044\173\076\176\100\147\101\140\001\002" +
    "\000\012\044\173\076\176\100\147\101\140\001\002\000" +
    "\040\045\uffc5\050\uffc5\055\uffc5\057\uffc5\060\206\061\210" +
    "\062\201\063\213\065\207\066\uffc5\067\uffc5\071\uffc5\072" +
    "\uffc5\073\uffc5\074\uffc5\001\002\000\040\045\uffc2\050\uffc2" +
    "\055\202\057\212\060\206\061\210\062\201\063\213\065" +
    "\207\066\uffc2\067\uffc2\071\211\072\203\073\205\074\215" +
    "\001\002\000\040\045\uffca\050\uffca\055\uffca\057\uffca\060" +
    "\uffca\061\uffca\062\uffca\063\uffca\065\uffca\066\uffca\067\uffca" +
    "\071\uffca\072\uffca\073\uffca\074\uffca\001\002\000\040\045" +
    "\uffc3\050\uffc3\055\uffc3\057\uffc3\060\206\061\210\062\201" +
    "\063\213\065\207\066\uffc3\067\uffc3\071\211\072\203\073" +
    "\205\074\215\001\002\000\040\045\uffc8\050\uffc8\055\uffc8" +
    "\057\uffc8\060\206\061\210\062\201\063\213\065\207\066" +
    "\uffc8\067\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8\001\002" +
    "\000\040\045\uffcc\050\uffcc\055\uffcc\057\uffcc\060\uffcc\061" +
    "\uffcc\062\201\063\213\065\207\066\uffcc\067\uffcc\071\uffcc" +
    "\072\uffcc\073\uffcc\074\uffcc\001\002\000\040\045\uffc9\050" +
    "\uffc9\055\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9" +
    "\065\uffc9\066\uffc9\067\uffc9\071\uffc9\072\uffc9\073\uffc9\074" +
    "\uffc9\001\002\000\040\045\uffcd\050\uffcd\055\uffcd\057\uffcd" +
    "\060\uffcd\061\uffcd\062\201\063\213\065\207\066\uffcd\067" +
    "\uffcd\071\uffcd\072\uffcd\073\uffcd\074\uffcd\001\002\000\040" +
    "\045\uffc6\050\uffc6\055\uffc6\057\uffc6\060\206\061\210\062" +
    "\201\063\213\065\207\066\uffc6\067\uffc6\071\uffc6\072\uffc6" +
    "\073\uffc6\074\uffc6\001\002\000\004\054\235\001\002\000" +
    "\004\045\231\001\002\000\004\042\232\001\002\000\032" +
    "\023\144\026\161\027\134\030\151\031\141\035\132\036" +
    "\156\043\ufffb\044\142\076\143\100\147\101\140\001\002" +
    "\000\004\043\234\001\002\000\034\023\uffb6\026\uffb6\027" +
    "\uffb6\030\uffb6\031\uffb6\033\uffb6\035\uffb6\036\uffb6\043\uffb6" +
    "\044\uffb6\076\uffb6\100\uffb6\101\uffb6\001\002\000\012\044" +
    "\173\076\176\100\147\101\140\001\002\000\040\045\uffde" +
    "\050\uffde\055\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063" +
    "\uffd3\065\uffd3\066\uffd3\067\uffd3\071\uffd3\072\uffd3\073\uffd3" +
    "\074\uffd3\001\002\000\040\045\uffc7\050\uffc7\055\uffc7\057" +
    "\uffc7\060\206\061\210\062\201\063\213\065\207\066\uffc7" +
    "\067\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\001\002\000" +
    "\040\045\uffc4\050\uffc4\055\uffc4\057\uffc4\060\206\061\210" +
    "\062\201\063\213\065\207\066\uffc4\067\uffc4\071\211\072" +
    "\203\073\205\074\215\001\002\000\040\045\uffcb\050\uffcb" +
    "\055\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\065" +
    "\uffcb\066\uffcb\067\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb" +
    "\001\002\000\040\045\uffc1\050\uffc1\055\202\057\212\060" +
    "\206\061\210\062\201\063\213\065\207\066\214\067\uffc1" +
    "\071\211\072\203\073\205\074\215\001\002\000\036\045" +
    "\244\055\202\057\212\060\206\061\210\062\201\063\213" +
    "\065\207\066\214\067\200\071\211\072\203\073\205\074" +
    "\215\001\002\000\040\045\uffce\050\uffce\055\uffce\057\uffce" +
    "\060\uffce\061\uffce\062\uffce\063\uffce\065\uffce\066\uffce\067" +
    "\uffce\071\uffce\072\uffce\073\uffce\074\uffce\001\002\000\006" +
    "\050\uffd5\053\247\001\002\000\006\050\uffd5\053\247\001" +
    "\002\000\006\076\251\105\252\001\002\000\004\050\uffd9" +
    "\001\002\000\006\050\uffd5\053\247\001\002\000\006\050" +
    "\uffd5\053\247\001\002\000\004\050\uffd6\001\002\000\004" +
    "\050\uffd7\001\002\000\004\050\uffd8\001\002\000\034\023" +
    "\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\033\ufff8\035\ufff8" +
    "\036\ufff8\043\ufff8\044\ufff8\076\ufff8\100\ufff8\101\ufff8\001" +
    "\002\000\032\023\144\026\161\027\134\030\151\031\141" +
    "\035\132\036\156\043\ufffb\044\142\076\143\100\147\101" +
    "\140\001\002\000\004\043\261\001\002\000\004\027\262" +
    "\001\002\000\004\044\263\001\002\000\012\044\173\076" +
    "\176\100\147\101\140\001\002\000\036\045\265\055\202" +
    "\057\212\060\206\061\210\062\201\063\213\065\207\066" +
    "\214\067\200\071\211\072\203\073\205\074\215\001\002" +
    "\000\004\050\266\001\002\000\034\023\uffb7\026\uffb7\027" +
    "\uffb7\030\uffb7\031\uffb7\033\uffb7\035\uffb7\036\uffb7\043\uffb7" +
    "\044\uffb7\076\uffb7\100\uffb7\101\uffb7\001\002\000\012\044" +
    "\173\076\176\100\147\101\140\001\002\000\036\045\271" +
    "\055\202\057\212\060\206\061\210\062\201\063\213\065" +
    "\207\066\214\067\200\071\211\072\203\073\205\074\215" +
    "\001\002\000\004\042\272\001\002\000\032\023\144\026" +
    "\161\027\134\030\151\031\141\035\132\036\156\043\ufffb" +
    "\044\142\076\143\100\147\101\140\001\002\000\004\043" +
    "\274\001\002\000\006\024\275\025\276\001\002\000\004" +
    "\044\303\001\002\000\004\042\300\001\002\000\034\023" +
    "\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\033\uffbb\035\uffbb" +
    "\036\uffbb\043\uffbb\044\uffbb\076\uffbb\100\uffbb\101\uffbb\001" +
    "\002\000\032\023\144\026\161\027\134\030\151\031\141" +
    "\035\132\036\156\043\ufffb\044\142\076\143\100\147\101" +
    "\140\001\002\000\004\043\302\001\002\000\034\023\uffba" +
    "\026\uffba\027\uffba\030\uffba\031\uffba\033\uffba\035\uffba\036" +
    "\uffba\043\uffba\044\uffba\076\uffba\100\uffba\101\uffba\001\002" +
    "\000\012\044\173\076\176\100\147\101\140\001\002\000" +
    "\036\045\305\055\202\057\212\060\206\061\210\062\201" +
    "\063\213\065\207\066\214\067\200\071\211\072\203\073" +
    "\205\074\215\001\002\000\004\042\306\001\002\000\032" +
    "\023\144\026\161\027\134\030\151\031\141\035\132\036" +
    "\156\043\ufffb\044\142\076\143\100\147\101\140\001\002" +
    "\000\004\043\310\001\002\000\006\024\275\025\276\001" +
    "\002\000\034\023\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9" +
    "\033\uffb9\035\uffb9\036\uffb9\043\uffb9\044\uffb9\076\uffb9\100" +
    "\uffb9\101\uffb9\001\002\000\004\060\331\001\002\000\022" +
    "\021\047\022\050\037\317\044\173\076\176\100\321\101" +
    "\322\105\316\001\002\000\004\061\315\001\002\000\004" +
    "\050\uffdc\001\002\000\004\050\uffdf\001\002\000\004\044" +
    "\323\001\002\000\004\050\uffe2\001\002\000\036\050\uffe4" +
    "\055\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\065" +
    "\uffd1\066\uffd1\067\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1" +
    "\001\002\000\036\050\uffe3\055\uffd0\057\uffd0\060\uffd0\061" +
    "\uffd0\062\uffd0\063\uffd0\065\uffd0\066\uffd0\067\uffd0\071\uffd0" +
    "\072\uffd0\073\uffd0\074\uffd0\001\002\000\004\040\324\001" +
    "\002\000\004\044\325\001\002\000\004\041\326\001\002" +
    "\000\004\045\327\001\002\000\004\045\330\001\002\000" +
    "\004\050\uffd4\001\002\000\004\050\uffdd\001\002\000\036" +
    "\045\333\055\202\057\212\060\206\061\210\062\201\063" +
    "\213\065\207\066\214\067\200\071\211\072\203\073\205" +
    "\074\215\001\002\000\036\050\ufff3\055\uffce\057\uffce\060" +
    "\uffce\061\uffce\062\uffce\063\uffce\065\uffce\066\uffce\067\uffce" +
    "\071\uffce\072\uffce\073\uffce\074\uffce\001\002\000\004\076" +
    "\335\001\002\000\004\045\336\001\002\000\004\042\337" +
    "\001\002\000\004\032\340\001\002\000\014\021\047\022" +
    "\050\100\343\101\342\105\345\001\002\000\004\052\uffb1" +
    "\001\002\000\004\052\uffb2\001\002\000\004\052\uffb3\001" +
    "\002\000\004\052\346\001\002\000\004\052\uffb4\001\002" +
    "\000\032\023\144\026\161\027\134\030\151\031\141\033" +
    "\ufffb\035\132\036\156\044\142\076\143\100\147\101\140" +
    "\001\002\000\004\033\350\001\002\000\004\050\351\001" +
    "\002\000\006\032\353\034\uffaf\001\002\000\004\034\362" +
    "\001\002\000\014\021\047\022\050\100\343\101\342\105" +
    "\345\001\002\000\004\052\355\001\002\000\032\023\144" +
    "\026\161\027\134\030\151\031\141\033\ufffb\035\132\036" +
    "\156\044\142\076\143\100\147\101\140\001\002\000\004" +
    "\033\357\001\002\000\004\050\360\001\002\000\006\032" +
    "\353\034\uffaf\001\002\000\004\034\uffb0\001\002\000\004" +
    "\052\363\001\002\000\032\023\144\026\161\027\134\030" +
    "\151\031\141\035\132\036\156\043\ufffb\044\142\076\143" +
    "\100\147\101\140\001\002\000\004\043\365\001\002\000" +
    "\034\023\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\033\uffb5" +
    "\035\uffb5\036\uffb5\043\uffb5\044\uffb5\076\uffb5\100\uffb5\101" +
    "\uffb5\001\002\000\034\023\ufff9\026\ufff9\027\ufff9\030\ufff9" +
    "\031\ufff9\033\ufff9\035\ufff9\036\ufff9\043\ufff9\044\ufff9\076" +
    "\ufff9\100\ufff9\101\ufff9\001\002\000\004\050\370\001\002" +
    "\000\034\023\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\033" +
    "\ufffa\035\ufffa\036\ufffa\043\ufffa\044\ufffa\076\ufffa\100\ufffa" +
    "\101\ufffa\001\002\000\012\044\173\076\176\100\147\101" +
    "\140\001\002\000\036\045\373\055\202\057\212\060\206" +
    "\061\210\062\201\063\213\065\207\066\214\067\200\071" +
    "\211\072\203\073\205\074\215\001\002\000\004\042\374" +
    "\001\002\000\032\023\144\026\161\027\134\030\151\031" +
    "\141\035\132\036\156\043\ufffb\044\142\076\143\100\147" +
    "\101\140\001\002\000\004\043\376\001\002\000\034\023" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\033\uffb8\035\uffb8" +
    "\036\uffb8\043\uffb8\044\uffb8\076\uffb8\100\uffb8\101\uffb8\001" +
    "\002\000\006\050\uffd5\053\247\001\002\000\006\050\uffd5" +
    "\053\247\001\002\000\004\050\uffdb\001\002\000\004\050" +
    "\uffda\001\002\000\012\007\uff7b\010\uff7b\011\uff7b\043\uff7b" +
    "\001\002\000\004\043\u0105\001\002\000\012\007\uff7c\010" +
    "\uff7c\011\uff7c\043\uff7c\001\002\000\004\045\u0113\001\002" +
    "\000\006\042\u010b\052\u010c\001\002\000\006\045\uff9b\051" +
    "\u0109\001\002\000\004\076\u0108\001\002\000\004\045\uff9a" +
    "\001\002\000\032\023\144\026\161\027\134\030\151\031" +
    "\141\035\132\036\156\043\ufffb\044\142\076\143\100\147" +
    "\101\140\001\002\000\004\017\u010d\001\002\000\004\042" +
    "\u010e\001\002\000\032\023\144\026\161\027\134\030\151" +
    "\031\141\035\132\036\156\043\ufffb\044\142\076\143\100" +
    "\147\101\140\001\002\000\004\043\u0110\001\002\000\012" +
    "\007\uff79\010\uff79\011\uff79\043\uff79\001\002\000\004\043" +
    "\u0112\001\002\000\012\007\uff7a\010\uff7a\011\uff7a\043\uff7a" +
    "\001\002\000\006\042\uff78\052\uff78\001\002\000\012\007" +
    "\uff7d\010\uff7d\011\uff7d\043\uff7d\001\002\000\004\014\uff83" +
    "\001\002\000\004\014\uff80\001\002\000\004\002\uffae\001" +
    "\002\000\006\014\uff84\076\uff8a\001\002\000\006\050\uff8f" +
    "\051\u011a\001\002\000\004\076\u011d\001\002\000\004\050" +
    "\u011c\001\002\000\014\007\uff9d\010\uff9d\011\uff9d\016\uff9d" +
    "\043\uff9d\001\002\000\010\045\uff8f\050\uff8f\051\u011a\001" +
    "\002\000\006\045\uff90\050\uff90\001\002\000\006\014\uff83" +
    "\076\uff89\001\002\000\006\015\u0121\075\116\001\002\000" +
    "\004\044\u0122\001\002\000\004\076\u0123\001\002\000\006" +
    "\045\uff8f\051\u011a\001\002\000\004\045\u0125\001\002\000" +
    "\004\042\u0126\001\002\000\032\023\144\026\161\027\134" +
    "\030\151\031\141\035\132\036\156\043\ufffb\044\142\076" +
    "\143\100\147\101\140\001\002\000\004\043\u0128\001\002" +
    "\000\012\007\uff7f\010\uff7f\011\uff7f\043\uff7f\001\002\000" +
    "\012\007\105\010\106\011\102\043\uffa3\001\002\000\012" +
    "\007\105\010\106\011\102\043\uffa8\001\002\000\012\007" +
    "\105\010\106\011\102\043\uffa7\001\002\000\004\076\u0131" +
    "\001\002\000\012\007\105\010\106\011\102\043\uffa4\001" +
    "\002\000\012\007\105\010\106\011\102\043\uffaa\001\002" +
    "\000\012\007\105\010\106\011\102\043\uffa9\001\002\000" +
    "\012\007\105\010\106\011\102\043\uffad\001\002\000\006" +
    "\050\uff8f\051\u011a\001\002\000\004\050\u0133\001\002\000" +
    "\014\007\uff9c\010\uff9c\011\uff9c\016\uff9c\043\uff9c\001\002" +
    "\000\012\007\105\010\106\011\102\043\uffab\001\002\000" +
    "\006\014\uff85\076\uff8b\001\002\000\004\002\001\001\002" +
    "\000\006\050\uffe7\064\u0139\001\002\000\004\050\u013c\001" +
    "\002\000\004\075\u013a\001\002\000\006\050\uffe7\064\u0139" +
    "\001\002\000\004\050\uffe8\001\002\000\006\005\uffea\006" +
    "\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013a\000\012\002\004\007\011\010\007\041\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\023\001\001\000\002\001" +
    "\001\000\006\010\013\041\012\001\001\000\002\001\001" +
    "\000\004\041\014\001\001\000\002\001\001\000\004\012" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\042\037\044\027" +
    "\045\040\046\034\047\031\050\030\051\035\056\032\001" +
    "\001\000\002\001\001\000\016\045\u012c\046\u012b\047\031" +
    "\050\u0129\051\035\056\u012a\001\001\000\010\047\113\051" +
    "\035\056\u0128\001\001\000\002\001\001\000\006\047\113" +
    "\051\u0113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\047\031\050\103\051\035\056\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\064\001\001\000\002\001\001\000\004\052\066\001\001" +
    "\000\002\001\001\000\004\052\070\001\001\000\002\001" +
    "\001\000\004\052\072\001\001\000\002\001\001\000\004" +
    "\052\074\001\001\000\002\001\001\000\004\052\076\001" +
    "\001\000\002\001\001\000\004\052\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\047\113\051\u0113\001" +
    "\001\000\010\047\113\051\035\056\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\047\113" +
    "\051\u0113\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\054\117\001\001\000\004\053\u0105\001\001\000\002" +
    "\001\001\000\054\003\u0103\004\151\005\135\006\163\013" +
    "\125\014\126\015\127\017\145\020\147\021\132\022\156" +
    "\024\134\025\136\026\157\027\154\030\124\031\152\033" +
    "\153\034\162\035\161\036\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\003\130\004\151\005\135\006" +
    "\163\013\125\014\126\015\127\017\145\020\147\021\132" +
    "\022\156\024\134\025\136\026\157\027\154\030\124\031" +
    "\152\033\153\034\162\035\161\036\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\004\366\006" +
    "\163\013\125\014\126\015\127\017\145\020\147\021\132" +
    "\022\156\024\134\025\136\026\157\027\154\030\365\031" +
    "\152\033\153\034\162\035\161\036\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\025" +
    "\331\026\174\027\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\025" +
    "\176\026\174\027\173\001\001\000\010\025\242\026\174" +
    "\027\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\025\241\026\174" +
    "\027\173\001\001\000\010\025\240\026\174\027\173\001" +
    "\001\000\010\025\237\026\174\027\173\001\001\000\010" +
    "\025\236\026\174\027\173\001\001\000\004\020\227\001" +
    "\001\000\010\025\225\026\174\027\173\001\001\000\010" +
    "\025\224\026\174\027\173\001\001\000\010\025\223\026" +
    "\174\027\173\001\001\000\010\025\222\026\174\027\173" +
    "\001\001\000\010\025\221\026\174\027\173\001\001\000" +
    "\010\025\220\026\174\027\173\001\001\000\010\025\217" +
    "\026\174\027\173\001\001\000\010\025\216\026\174\027" +
    "\173\001\001\000\010\025\215\026\174\027\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\003\232" +
    "\004\151\005\135\006\163\013\125\014\126\015\127\017" +
    "\145\020\147\021\132\022\156\024\134\025\136\026\157" +
    "\027\154\030\124\031\152\033\153\034\162\035\161\036" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\025\136\026\235\027\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\254\001\001\000\004\023\247\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\253\001\001\000\004\023" +
    "\252\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\003\257\004\151\005" +
    "\135\006\163\013\125\014\126\015\127\017\145\020\147" +
    "\021\132\022\156\024\134\025\136\026\157\027\154\030" +
    "\124\031\152\033\153\034\162\035\161\036\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\025\263\026\174\027\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\025\267\026" +
    "\174\027\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\003\272\004\151\005\135\006\163\013\125\014" +
    "\126\015\127\017\145\020\147\021\132\022\156\024\134" +
    "\025\136\026\157\027\154\030\124\031\152\033\153\034" +
    "\162\035\161\036\144\001\001\000\002\001\001\000\004" +
    "\032\276\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\003\300\004\151\005\135\006\163" +
    "\013\125\014\126\015\127\017\145\020\147\021\132\022" +
    "\156\024\134\025\136\026\157\027\154\030\124\031\152" +
    "\033\153\034\162\035\161\036\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\025\303\026\174\027\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\003" +
    "\306\004\151\005\135\006\163\013\125\014\126\015\127" +
    "\017\145\020\147\021\132\022\156\024\134\025\136\026" +
    "\157\027\154\030\124\031\152\033\153\034\162\035\161" +
    "\036\144\001\001\000\002\001\001\000\004\032\310\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\317" +
    "\025\136\026\235\027\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\340\037\343\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\003\346\004\151\005\135\006\163\013\125\014\126" +
    "\015\127\017\145\020\147\021\132\022\156\024\134\025" +
    "\136\026\157\027\154\030\124\031\152\033\153\034\162" +
    "\035\161\036\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\351\001\001\000\002\001\001\000\006" +
    "\016\340\037\353\001\001\000\002\001\001\000\054\003" +
    "\355\004\151\005\135\006\163\013\125\014\126\015\127" +
    "\017\145\020\147\021\132\022\156\024\134\025\136\026" +
    "\157\027\154\030\124\031\152\033\153\034\162\035\161" +
    "\036\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\360\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\003\363\004\151\005\135\006\163\013\125\014" +
    "\126\015\127\017\145\020\147\021\132\022\156\024\134" +
    "\025\136\026\157\027\154\030\124\031\152\033\153\034" +
    "\162\035\161\036\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\025\371\026\174\027\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\003\374\004\151\005" +
    "\135\006\163\013\125\014\126\015\127\017\145\020\147" +
    "\021\132\022\156\024\134\025\136\026\157\027\154\030" +
    "\124\031\152\033\153\034\162\035\161\036\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\u0101\001" +
    "\001\000\004\023\u0100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\053\u0109\001\001\000\002\001\001\000\054\003" +
    "\u0110\004\151\005\135\006\163\013\125\014\126\015\127" +
    "\017\145\020\147\021\132\022\156\024\134\025\136\026" +
    "\157\027\154\030\124\031\152\033\153\034\162\035\161" +
    "\036\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\003\u010e\004\151\005\135\006\163\013\125\014\126" +
    "\015\127\017\145\020\147\021\132\022\156\024\134\025" +
    "\136\026\157\027\154\030\124\031\152\033\153\034\162" +
    "\035\161\036\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\u011a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\u011d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\u0123\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\003\u0126\004\151\005\135\006\163\013\125\014" +
    "\126\015\127\017\145\020\147\021\132\022\156\024\134" +
    "\025\136\026\157\027\154\030\124\031\152\033\153\034" +
    "\162\035\161\036\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\047\113\051\u0113\001\001\000\010\047" +
    "\113\051\035\056\u0133\001\001\000\006\047\113\051\u0113" +
    "\001\001\000\002\001\001\000\012\047\031\050\u012e\051" +
    "\035\056\u012d\001\001\000\006\047\113\051\u0113\001\001" +
    "\000\010\047\113\051\035\056\u012f\001\001\000\006\047" +
    "\113\051\u0113\001\001\000\004\043\u0131\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\047\113\051\u0113\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\u0137" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\u013a\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserPHP$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserPHP$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserPHP$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error (Symbol s)
    {
        report_error("Error de sintaxis en linea: " + (s.left+1) +
                    " ,columna: "+(s.right+1)+" , simbolo: "+s.value, null);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        report_fatal_error("Error de sintaxis no recuperable en linea: " + (s.left+1) +
                    " ,columna: "+(s.right+1)+" , simbolo: "+s.value, null);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserPHP$actions {
  private final ParserPHP parser;

  /** Constructor */
  CUP$ParserPHP$actions(ParserPHP parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserPHP$do_action(
    int                        CUP$ParserPHP$act_num,
    java_cup.runtime.lr_parser CUP$ParserPHP$parser,
    java.util.Stack            CUP$ParserPHP$stack,
    int                        CUP$ParserPHP$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserPHP$result;

      /* select the action based on the action number */
      switch (CUP$ParserPHP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // parametros_funciones ::= PARENTESIS_APERTURA variable_declaracion PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("parametros_funciones",42, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // funciones ::= visibilidad_fun FUNCTION IDENTIFICADOR PARENTESIS_APERTURA PARENTESIS_CIERRE DOS_PUNTOS VOID LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		
                System.out.println("Definicion de la funcion void sin parametros");
           
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("funciones",39, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-9)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // funciones ::= visibilidad_fun FUNCTION IDENTIFICADOR PARENTESIS_APERTURA PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		
                System.out.println("Definicion de la funcion sin parametros");
           
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("funciones",39, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-7)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // funciones ::= visibilidad_fun FUNCTION IDENTIFICADOR parametros_funciones DOS_PUNTOS VOID LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		
                System.out.println("Definicion de la funcion void");
           
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("funciones",39, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // funciones ::= visibilidad_fun FUNCTION IDENTIFICADOR parametros_funciones LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		
                System.out.println("Definicion de la funcion");
           
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("funciones",39, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-6)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // lista_funciones ::= lista_funciones funciones 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_funciones",44, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // lista_funciones ::= funciones 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_funciones",44, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // constructor ::= visibilidad_fun FUNCTION CONSTRUCT PARENTESIS_APERTURA VARIABLE clases_rec PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		
                System.out.println("Definicion del constructor");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("constructor",38, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-9)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // visibilidad_fun ::= PROTECTED FINAL 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("visibilidad_fun",37, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // visibilidad_fun ::= PRIVATE FINAL 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("visibilidad_fun",37, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // visibilidad_fun ::= PUBLIC FINAL 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("visibilidad_fun",37, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // visibilidad_fun ::= PROTECTED STATIC 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("visibilidad_fun",37, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // visibilidad_fun ::= PRIVATE STATIC 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("visibilidad_fun",37, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // visibilidad_fun ::= PUBLIC STATIC 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("visibilidad_fun",37, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // visibilidad_fun ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("visibilidad_fun",37, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // visibilidad_fun ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("visibilidad_fun",37, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // visibilidad_fun ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("visibilidad_fun",37, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // visibilidad_var ::= PROTECTED STATIC 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("visibilidad_var",36, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // visibilidad_var ::= PRIVATE STATIC 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("visibilidad_var",36, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // visibilidad_var ::= PUBLIC STATIC 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("visibilidad_var",36, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // visibilidad_var ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("visibilidad_var",36, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // visibilidad_var ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("visibilidad_var",36, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // visibilidad_var ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("visibilidad_var",36, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // clases_rec ::= 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("clases_rec",33, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // clases_rec ::= COMA VARIABLE clases_rec 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("clases_rec",33, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // rec_constantes ::= 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("rec_constantes",40, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // rec_constantes ::= CONST CONSTANTE OPERADOR_ASIGNACION tipo_bool PUNTO_COMA rec_constantes 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("rec_constantes",40, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // rec_constantes ::= CONST CONSTANTE OPERADOR_ASIGNACION NUMERO_FLOTANTE PUNTO_COMA rec_constantes 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("rec_constantes",40, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // rec_constantes ::= CONST CONSTANTE OPERADOR_ASIGNACION NUMERO_ENTERO PUNTO_COMA rec_constantes 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("rec_constantes",40, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // rec_constantes ::= CONST CONSTANTE OPERADOR_ASIGNACION CADENA PUNTO_COMA rec_constantes 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("rec_constantes",40, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // propiedad_constante ::= CONST CONSTANTE OPERADOR_ASIGNACION tipo_bool PUNTO_COMA rec_constantes 
            {
              Object RESULT =null;
		
                            System.out.println("Definicion de la propiedad en constantes de clase");
                     
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("propiedad_constante",35, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // propiedad_constante ::= CONST CONSTANTE OPERADOR_ASIGNACION NUMERO_FLOTANTE PUNTO_COMA rec_constantes 
            {
              Object RESULT =null;
		
                            System.out.println("Definicion de la propiedad en constantes de clase");
                     
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("propiedad_constante",35, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // propiedad_constante ::= CONST CONSTANTE OPERADOR_ASIGNACION NUMERO_ENTERO PUNTO_COMA rec_constantes 
            {
              Object RESULT =null;
		
                            System.out.println("Definicion de la propiedad en constantes de clase");
                     
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("propiedad_constante",35, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // propiedad_constante ::= CONST CONSTANTE OPERADOR_ASIGNACION CADENA PUNTO_COMA rec_constantes 
            {
              Object RESULT =null;
		
                            System.out.println("Definicion de la propiedad en constantes de clase");
                     
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("propiedad_constante",35, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // variable_declaracion ::= VARIABLE COMA variable_declaracion 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("variable_declaracion",41, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // variable_declaracion ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("variable_declaracion",41, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // propiedad_variable ::= propiedad_variable visibilidad_var VARIABLE clases_rec PUNTO_COMA 
            {
              Object RESULT =null;
		
                          System.out.println("Definicion de otra propiedad en variables de clase");
                      
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("propiedad_variable",34, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-4)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // propiedad_variable ::= visibilidad_var VARIABLE clases_rec PUNTO_COMA 
            {
              Object RESULT =null;
		
    System.out.println("Definicion de la propiedad en variables de clase");

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("propiedad_variable",34, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // cuerpo_clase ::= 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",32, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // cuerpo_clase ::= lista_funciones 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",32, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // cuerpo_clase ::= constructor 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",32, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // cuerpo_clase ::= propiedad_constante 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",32, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // cuerpo_clase ::= propiedad_variable 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",32, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // cuerpo_clase ::= constructor lista_funciones 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",32, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // cuerpo_clase ::= propiedad_variable propiedad_constante 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",32, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // cuerpo_clase ::= propiedad_constante constructor 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",32, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // cuerpo_clase ::= propiedad_constante lista_funciones 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",32, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // cuerpo_clase ::= propiedad_variable lista_funciones 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",32, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // cuerpo_clase ::= propiedad_variable constructor 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",32, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // cuerpo_clase ::= propiedad_variable propiedad_constante constructor 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",32, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cuerpo_clase ::= propiedad_variable propiedad_constante lista_funciones 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",32, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cuerpo_clase ::= propiedad_variable constructor lista_funciones 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",32, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // cuerpo_clase ::= propiedad_constante constructor lista_funciones 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",32, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // cuerpo_clase ::= propiedad_variable propiedad_constante constructor lista_funciones 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",32, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // definicion_clases ::= CLASES IDENTIFICADOR LLAVE_APERTURA cuerpo_clase LLAVE_CIERRE 
            {
              Object RESULT =null;
		 System.out.println("Definicion de clase"); 
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("definicion_clases",31, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-4)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // rec_switch ::= 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("rec_switch",30, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // rec_switch ::= CASE val_switch DOS_PUNTOS sentencias BREAK PUNTO_COMA rec_switch 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("rec_switch",30, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-6)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // val_switch ::= tipo_bool 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("val_switch",29, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // val_switch ::= NUMERO_FLOTANTE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("val_switch",29, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // val_switch ::= NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("val_switch",29, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // val_switch ::= CADENA 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("val_switch",29, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // switch_sentencia ::= SWITCH PARENTESIS_APERTURA VARIABLE PARENTESIS_CIERRE LLAVE_APERTURA CASE val_switch DOS_PUNTOS sentencias BREAK PUNTO_COMA rec_switch DEFAULT DOS_PUNTOS sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		 
                        System.out.println("Sentencia switch procesada"); 
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("switch_sentencia",28, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-15)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // for_sentencia ::= FOR PARENTESIS_APERTURA dec_entero PUNTO_COMA expresion PUNTO_COMA asignacion PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		 System.out.println("Sentencia for procesada"); 
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("for_sentencia",27, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-10)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // do_while_sentencia ::= DO LLAVE_APERTURA sentencias LLAVE_CIERRE WHILE PARENTESIS_APERTURA expresion PARENTESIS_CIERRE PUNTO_COMA 
            {
              Object RESULT =null;
		 System.out.println("Sentencia while procesada"); 
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("do_while_sentencia",26, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // while_sentencia ::= WHILE PARENTESIS_APERTURA expresion PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		 System.out.println("Sentencia while procesada"); 
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("while_sentencia",25, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-6)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ifbucle ::= ELSEIF PARENTESIS_APERTURA expresion PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE ifbucle 
            {
              Object RESULT =null;
		 System.out.println("Sentencia elseif procesada"); 
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("ifbucle",24, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-7)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ifbucle ::= ELSE LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		 System.out.println("Sentencia else procesada"); 
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("ifbucle",24, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // if_sentencia ::= IF PARENTESIS_APERTURA expresion PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE ifbucle 
            {
              Object RESULT =null;
		 System.out.println("Sentencia if procesada"); 
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("if_sentencia",23, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-7)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // estructura_control ::= switch_sentencia 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("estructura_control",22, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // estructura_control ::= for_sentencia 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("estructura_control",22, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // estructura_control ::= do_while_sentencia 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("estructura_control",22, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // estructura_control ::= while_sentencia 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("estructura_control",22, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // estructura_control ::= if_sentencia 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("estructura_control",22, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operacion_logica ::= expresion OPERADOR_LOGICO_OR expresion 
            {
              Object RESULT =null;
		
                System.out.println("Operación lógica OR realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",21, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operacion_logica ::= expresion OPERADOR_LOGICO_AND expresion 
            {
              Object RESULT =null;
		
                System.out.println("Operación lógica AND realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",21, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operacion_logica ::= expresion OPERADOR_DESIGUALDAD expresion 
            {
              Object RESULT =null;
		
                System.out.println("Comparación de desigualdad realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",21, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operacion_logica ::= expresion OPERADOR_IGUALDAD expresion 
            {
              Object RESULT =null;
		
                System.out.println("Comparación de igualdad realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",21, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operacion_logica ::= expresion MENOR_IGUAL expresion 
            {
              Object RESULT =null;
		
                System.out.println("Comparación menor o igual realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",21, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operacion_logica ::= expresion MAYOR_IGUAL expresion 
            {
              Object RESULT =null;
		
                System.out.println("Comparación mayor o igual realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",21, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operacion_logica ::= expresion MENOR expresion 
            {
              Object RESULT =null;
		
                System.out.println("Comparación menor realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",21, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operacion_logica ::= expresion MAYOR expresion 
            {
              Object RESULT =null;
		
                System.out.println("Comparación mayor realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",21, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operacion_aritmetica ::= expresion OPERADOR_MODULO expresion 
            {
              Object RESULT =null;
		
                System.out.println("Operación módulo realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",20, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operacion_aritmetica ::= expresion OPERADOR_DIVISION expresion 
            {
              Object RESULT =null;
		
                System.out.println("División realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",20, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operacion_aritmetica ::= expresion OPERADOR_MULTIPLICACION expresion 
            {
              Object RESULT =null;
		
                System.out.println("Multiplicación realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",20, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operacion_aritmetica ::= expresion OPERADOR_RESTA expresion 
            {
              Object RESULT =null;
		
                System.out.println("Resta realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",20, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operacion_aritmetica ::= expresion OPERADOR_SUMA expresion 
            {
              Object RESULT =null;
		
                System.out.println("Suma realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",20, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= PARENTESIS_APERTURA expresion PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= NUMERO_FLOTANTE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= operacion_logica 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= operacion_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // scanner ::= VARIABLE OPERADOR_ASIGNACION TRIM PARENTESIS_APERTURA FGETS PARENTESIS_APERTURA STDIN PARENTESIS_CIERRE PARENTESIS_CIERRE 
            {
              Object RESULT =null;
		
                System.out.println("Lectura de entrada de consola");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("scanner",18, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // rec_impresiones ::= 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("rec_impresiones",17, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // rec_impresiones ::= PUNTO CADENA rec_impresiones 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("rec_impresiones",17, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // rec_impresiones ::= PUNTO VARIABLE rec_impresiones 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("rec_impresiones",17, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // impresiones ::= PRINT CADENA rec_impresiones 
            {
              Object RESULT =null;
		
                System.out.println("Impresion tipo print");
             
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("impresiones",16, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // impresiones ::= PRINT VARIABLE rec_impresiones 
            {
              Object RESULT =null;
		
                System.out.println("Impresion tipo print");
             
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("impresiones",16, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // impresiones ::= ECHO CADENA rec_impresiones 
            {
              Object RESULT =null;
		
                System.out.println("Impresion tipo echo");
             
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("impresiones",16, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // impresiones ::= ECHO VARIABLE rec_impresiones 
            {
              Object RESULT =null;
		
                System.out.println("Impresion tipo echo");
             
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("impresiones",16, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // auto_valuacion ::= VARIABLE OPERADOR_RESTA OPERADOR_RESTA 
            {
              Object RESULT =null;
		
                System.out.println("Autoresta - 1 realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("auto_valuacion",15, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // auto_valuacion ::= VARIABLE OPERADOR_SUMA OPERADOR_SUMA 
            {
              Object RESULT =null;
		
                System.out.println("Autosuma + 1 realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("auto_valuacion",15, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // asignacion ::= VARIABLE OPERADOR_ASIGNACION operacion_aritmetica 
            {
              Object RESULT =null;
		
                System.out.println("Asignación realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // dec_cadena ::= VARIABLE OPERADOR_ASIGNACION CADENA 
            {
              Object RESULT =null;
		
                System.out.println("Declaracion de cadena");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("dec_cadena",13, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipo_bool ::= FALSE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("tipo_bool",12, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo_bool ::= TRUE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("tipo_bool",12, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // dec_booleano ::= VARIABLE OPERADOR_ASIGNACION tipo_bool 
            {
              Object RESULT =null;
		
                System.out.println("Declaracion de booleano");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("dec_booleano",11, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // dec_flotante ::= VARIABLE OPERADOR_ASIGNACION NUMERO_FLOTANTE 
            {
              Object RESULT =null;
		
                System.out.println("Declaracion de numero flotante");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("dec_flotante",10, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // dec_entero ::= VARIABLE OPERADOR_ASIGNACION NUMERO_ENTERO 
            {
              Object RESULT =null;
		
                System.out.println("Declaracion de numero entero");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("dec_entero",9, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // importar_rec ::= 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("importar_rec",8, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // importar_rec ::= BARRA_INVERSA IDENTIFICADOR importar_rec 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("importar_rec",8, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // pakage_rec ::= 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("pakage_rec",7, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // pakage_rec ::= BARRA_INVERSA IDENTIFICADOR pakage_rec 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("pakage_rec",7, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // importar ::= USE IDENTIFICADOR importar_rec PUNTO_COMA 
            {
              Object RESULT =null;
		 
                System.out.println("Declaracion de importar"); 
          
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("importar",6, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // pakage ::= NAMESPACE IDENTIFICADOR pakage_rec PUNTO_COMA 
            {
              Object RESULT =null;
		 
                System.out.println("Declaracion de pakage"); 
          
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("pakage",5, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista_declaraciones ::= scanner 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",4, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista_declaraciones ::= impresiones 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",4, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista_declaraciones ::= auto_valuacion 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",4, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lista_declaraciones ::= asignacion 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",4, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista_declaraciones ::= dec_cadena 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",4, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_declaraciones ::= dec_booleano 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",4, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_declaraciones ::= dec_flotante 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",4, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_declaraciones ::= dec_entero 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",4, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= PARENTESIS_APERTURA expresion PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= operacion_logica 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= operacion_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= lista_declaraciones 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_sentencias ::= estructura_control 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_sentencias",3, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista_sentencias ::= sentencia PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_sentencias",3, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_sentencias ::= lista_sentencias estructura_control 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_sentencias",3, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_sentencias ::= lista_sentencias sentencia PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_sentencias",3, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencias ::= 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencias",1, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencias ::= lista_sentencias 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencias",1, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa ::= definicion_clases 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= importar definicion_clases 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= pakage definicion_clases 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= pakage importar definicion_clases 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)).value;
		RESULT = start_val;
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserPHP$parser.done_parsing();
          return CUP$ParserPHP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

