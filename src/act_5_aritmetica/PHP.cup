/* 
VASQUEZ DENIZ ROBERTO
ESTRADA RAMIREZ JESUS ISAAC
PUENTES VEGA ANGEL DANIEL
CORTES UBALDO HAYDEE JOSSELYN
LENGUAJE PHP
*/

package act_5_aritmetica;

import java_cup.runtime.*;

parser code
{:
    public void syntax_error (Symbol s)
    {
        report_error("Error de sintaxis en linea: " + (s.left+1) +
                    " ,columna: "+(s.right+1)+" , simbolo: "+s.value, null);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        report_fatal_error("Error de sintaxis no recuperable en linea: " + (s.left+1) +
                    " ,columna: "+(s.right+1)+" , simbolo: "+s.value, null);
    }
:};

/*SIMBOLOS TERMINALES*/
terminal TRUE, FALSE;
terminal LLAVE_APERTURA, LLAVE_CIERRE, PARENTESIS_APERTURA, PARENTESIS_CIERRE, CORCHETE_APERTURA, CORCHETE_CIERRE, PUNTO_COMA, PUNTO, OPERADOR_ASIGNACION, OPERADOR_IGUALDAD, OPERADOR_IDENTIDAD, OPERADOR_DESIGUALDAD, OPERADOR_SUMA, OPERADOR_RESTA, OPERADOR_MULTIPLICACION, OPERADOR_DIVISION, OPERADOR_MODULO, OPERADOR_LOGICO_AND, OPERADOR_LOGICO_OR, OPERADOR_LOGICO_NOT, MAYOR, MENOR, MAYOR_IGUAL, MENOR_IGUAL;
terminal IDENTIFICADOR, DECLARADOR, NUMERO_ENTERO, NUMERO_FLOTANTE;
terminal IDENTIFICADOR_INVALIDO;
terminal COMENTARIO_LINEA, COMENTARIO_BLOQUE, CADENA;

/*SIMBOLOS NO TERMINALES*/
non terminal sentencias, sentencia, dec_entero, dec_flotante, dec_booleano, tipo_bool, dec_cadena, expresion, operacion_aritmetica, operacion_logica;

/*DECLARACIÓN DE PRECEDENCIA Y ASOCIATIVIDAD*/
precedence left OPERADOR_LOGICO_OR;
precedence left OPERADOR_LOGICO_AND;
precedence left OPERADOR_IGUALDAD, OPERADOR_DESIGUALDAD;
precedence left MAYOR, MENOR, MAYOR_IGUAL, MENOR_IGUAL;
precedence left OPERADOR_SUMA, OPERADOR_RESTA;
precedence left OPERADOR_MULTIPLICACION, OPERADOR_DIVISION, OPERADOR_MODULO;

/*REGLAS GRAMATICALES*/

/* Permitir múltiples sentencias separadas por punto y coma */
start with sentencias;

/* La regla 'sentencias' permite que haya una o más sentencias separadas por punto y coma */
sentencias::= sentencia PUNTO_COMA sentencias
            | sentencia;

sentencia::= dec_entero 
          | dec_flotante 
          | dec_booleano 
          | dec_cadena
          | operacion_aritmetica
          | operacion_logica
          | PARENTESIS_APERTURA expresion PARENTESIS_CIERRE;

dec_entero::= DECLARADOR OPERADOR_ASIGNACION NUMERO_ENTERO PUNTO_COMA {:
                System.out.println("Declaracion de numero entero");
            :};

dec_flotante::= DECLARADOR OPERADOR_ASIGNACION NUMERO_FLOTANTE PUNTO_COMA {:
                System.out.println("Declaracion de numero flotante");
            :};

dec_booleano::= DECLARADOR OPERADOR_ASIGNACION tipo_bool PUNTO_COMA {:
                System.out.println("Declaracion de booleano");
            :};

tipo_bool::= TRUE | FALSE;

dec_cadena::= DECLARADOR OPERADOR_ASIGNACION CADENA PUNTO_COMA {:
                System.out.println("Declaracion de cadena");
            :};

/* Reglas para operaciones aritméticas */
expresion::= operacion_aritmetica
          | operacion_logica
          | NUMERO_ENTERO
          | NUMERO_FLOTANTE
          | IDENTIFICADOR
          | PARENTESIS_APERTURA expresion PARENTESIS_CIERRE;

operacion_aritmetica::= expresion OPERADOR_SUMA expresion {:
                System.out.println("Suma realizada");
            :}
            | expresion OPERADOR_RESTA expresion {:
                System.out.println("Resta realizada");
            :}
            | expresion OPERADOR_MULTIPLICACION expresion {:
                System.out.println("Multiplicación realizada");
            :}
            | expresion OPERADOR_DIVISION expresion {:
                System.out.println("División realizada");
            :}
            | expresion OPERADOR_MODULO expresion {:
                System.out.println("Operación módulo realizada");
            :};

/* Reglas para operaciones lógicas */
operacion_logica::= expresion MAYOR expresion {:
                System.out.println("Comparación mayor realizada");
            :}
            | expresion MENOR expresion {:
                System.out.println("Comparación menor realizada");
            :}
            | expresion MAYOR_IGUAL expresion {:
                System.out.println("Comparación mayor o igual realizada");
            :}
            | expresion MENOR_IGUAL expresion {:
                System.out.println("Comparación menor o igual realizada");
            :}
            | expresion OPERADOR_IGUALDAD expresion {:
                System.out.println("Comparación de igualdad realizada");
            :}
            | expresion OPERADOR_DESIGUALDAD expresion {:
                System.out.println("Comparación de desigualdad realizada");
            :}
            | expresion OPERADOR_LOGICO_AND expresion {:
                System.out.println("Operación lógica AND realizada");
            :}
            | expresion OPERADOR_LOGICO_OR expresion {:
                System.out.println("Operación lógica OR realizada");
            :};
