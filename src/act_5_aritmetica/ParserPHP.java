
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 02 20:51:36 CST 2024
//----------------------------------------------------

package act_5_aritmetica;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 02 20:51:36 CST 2024
  */
public class ParserPHP extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserPHP() {super();}

  /** Constructor which sets the default scanner. */
  public ParserPHP(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserPHP(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\005\000\002\004\006\000\002\005\006\000\002" +
    "\006\006\000\002\007\003\000\002\007\003\000\002\010" +
    "\006\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\076\000\014\010\017\036\020\037\011\040\006\041" +
    "\013\001\002\000\006\002\ufffe\014\ufffe\001\002\000\006" +
    "\002\uffff\014\077\001\002\000\042\002\uffef\011\uffef\014" +
    "\uffef\017\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef" +
    "\026\uffef\027\uffef\030\uffef\032\uffef\033\uffef\034\uffef\035" +
    "\uffef\001\002\000\040\002\ufffa\014\ufffa\017\ufff1\021\ufff1" +
    "\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030" +
    "\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\001\002\000\040" +
    "\002\ufff9\014\ufff9\017\ufff0\021\ufff0\022\ufff0\023\ufff0\024" +
    "\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\032\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\001\002\000\004\016\064\001\002\000" +
    "\034\017\030\021\037\022\033\023\035\024\026\025\040" +
    "\026\034\027\042\030\027\032\036\033\031\034\032\035" +
    "\043\001\002\000\042\002\uffee\011\uffee\014\uffee\017\uffee" +
    "\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027" +
    "\uffee\030\uffee\032\uffee\033\uffee\034\uffee\035\uffee\001\002" +
    "\000\006\002\ufffb\014\ufffb\001\002\000\006\002\ufffc\014" +
    "\ufffc\001\002\000\004\002\063\001\002\000\012\010\022" +
    "\036\020\040\006\041\013\001\002\000\042\002\uffed\011" +
    "\uffed\014\uffed\017\uffed\021\uffed\022\uffed\023\uffed\024\uffed" +
    "\025\uffed\026\uffed\027\uffed\030\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\001\002\000\006\002\ufffd\014\ufffd\001\002" +
    "\000\012\010\022\036\020\040\006\041\013\001\002\000" +
    "\042\002\ufff0\011\ufff0\014\ufff0\017\ufff0\021\ufff0\022\ufff0" +
    "\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\032" +
    "\ufff0\033\ufff0\034\ufff0\035\ufff0\001\002\000\042\002\ufff1" +
    "\011\ufff1\014\ufff1\017\ufff1\021\ufff1\022\ufff1\023\ufff1\024" +
    "\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\032\ufff1\033\ufff1" +
    "\034\ufff1\035\ufff1\001\002\000\036\011\041\017\030\021" +
    "\037\022\033\023\035\024\026\025\040\026\034\027\042" +
    "\030\027\032\036\033\031\034\032\035\043\001\002\000" +
    "\012\010\022\036\020\040\006\041\013\001\002\000\012" +
    "\010\022\036\020\040\006\041\013\001\002\000\012\010" +
    "\022\036\020\040\006\041\013\001\002\000\012\010\022" +
    "\036\020\040\006\041\013\001\002\000\012\010\022\036" +
    "\020\040\006\041\013\001\002\000\012\010\022\036\020" +
    "\040\006\041\013\001\002\000\012\010\022\036\020\040" +
    "\006\041\013\001\002\000\012\010\022\036\020\040\006" +
    "\041\013\001\002\000\012\010\022\036\020\040\006\041" +
    "\013\001\002\000\012\010\022\036\020\040\006\041\013" +
    "\001\002\000\012\010\022\036\020\040\006\041\013\001" +
    "\002\000\040\002\ufff8\014\ufff8\017\uffec\021\uffec\022\uffec" +
    "\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\032" +
    "\uffec\033\uffec\034\uffec\035\uffec\001\002\000\012\010\022" +
    "\036\020\040\006\041\013\001\002\000\012\010\022\036" +
    "\020\040\006\041\013\001\002\000\042\002\uffe3\011\uffe3" +
    "\014\uffe3\017\uffe3\021\uffe3\022\033\023\035\024\026\025" +
    "\040\026\034\027\uffe3\030\uffe3\032\uffe3\033\uffe3\034\uffe3" +
    "\035\uffe3\001\002\000\042\002\uffe0\011\uffe0\014\uffe0\017" +
    "\030\021\037\022\033\023\035\024\026\025\040\026\034" +
    "\027\uffe0\030\uffe0\032\036\033\031\034\032\035\043\001" +
    "\002\000\042\002\uffe8\011\uffe8\014\uffe8\017\uffe8\021\uffe8" +
    "\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030" +
    "\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\001\002\000\042" +
    "\002\uffe1\011\uffe1\014\uffe1\017\uffe1\021\uffe1\022\033\023" +
    "\035\024\026\025\040\026\034\027\uffe1\030\uffe1\032\036" +
    "\033\031\034\032\035\043\001\002\000\042\002\uffe6\011" +
    "\uffe6\014\uffe6\017\uffe6\021\uffe6\022\033\023\035\024\026" +
    "\025\040\026\034\027\uffe6\030\uffe6\032\uffe6\033\uffe6\034" +
    "\uffe6\035\uffe6\001\002\000\042\002\uffea\011\uffea\014\uffea" +
    "\017\uffea\021\uffea\022\uffea\023\uffea\024\026\025\040\026" +
    "\034\027\uffea\030\uffea\032\uffea\033\uffea\034\uffea\035\uffea" +
    "\001\002\000\042\002\uffe7\011\uffe7\014\uffe7\017\uffe7\021" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7" +
    "\030\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\001\002\000" +
    "\042\002\uffeb\011\uffeb\014\uffeb\017\uffeb\021\uffeb\022\uffeb" +
    "\023\uffeb\024\026\025\040\026\034\027\uffeb\030\uffeb\032" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\001\002\000\042\002\uffe4" +
    "\011\uffe4\014\uffe4\017\uffe4\021\uffe4\022\033\023\035\024" +
    "\026\025\040\026\034\027\uffe4\030\uffe4\032\uffe4\033\uffe4" +
    "\034\uffe4\035\uffe4\001\002\000\042\002\uffe5\011\uffe5\014" +
    "\uffe5\017\uffe5\021\uffe5\022\033\023\035\024\026\025\040" +
    "\026\034\027\uffe5\030\uffe5\032\uffe5\033\uffe5\034\uffe5\035" +
    "\uffe5\001\002\000\042\002\uffe2\011\uffe2\014\uffe2\017\uffe2" +
    "\021\uffe2\022\033\023\035\024\026\025\040\026\034\027" +
    "\uffe2\030\uffe2\032\036\033\031\034\032\035\043\001\002" +
    "\000\042\002\uffdf\011\uffdf\014\uffdf\017\030\021\037\022" +
    "\033\023\035\024\026\025\040\026\034\027\042\030\uffdf" +
    "\032\036\033\031\034\032\035\043\001\002\000\042\002" +
    "\uffe9\011\uffe9\014\uffe9\017\uffe9\021\uffe9\022\uffe9\023\uffe9" +
    "\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\032\uffe9\033" +
    "\uffe9\034\uffe9\035\uffe9\001\002\000\036\011\062\017\030" +
    "\021\037\022\033\023\035\024\026\025\040\026\034\027" +
    "\042\030\027\032\036\033\031\034\032\035\043\001\002" +
    "\000\042\002\uffec\011\uffec\014\uffec\017\uffec\021\uffec\022" +
    "\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec" +
    "\032\uffec\033\uffec\034\uffec\035\uffec\001\002\000\004\002" +
    "\001\001\002\000\014\004\067\005\070\040\071\041\066" +
    "\045\072\001\002\000\004\014\076\001\002\000\004\014" +
    "\075\001\002\000\004\014\ufff4\001\002\000\004\014\ufff3" +
    "\001\002\000\004\014\074\001\002\000\004\014\073\001" +
    "\002\000\006\002\ufff2\014\ufff2\001\002\000\006\002\ufff7" +
    "\014\ufff7\001\002\000\006\002\ufff6\014\ufff6\001\002\000" +
    "\006\002\ufff5\014\ufff5\001\002\000\014\010\017\036\020" +
    "\037\011\040\006\041\013\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\076\000\024\002\015\003\004\004\003\005\020\006" +
    "\014\010\013\011\011\012\006\013\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\024\012\023\013\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\060\012" +
    "\023\013\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\057\012\023\013\022\001" +
    "\001\000\010\011\056\012\023\013\022\001\001\000\010" +
    "\011\055\012\023\013\022\001\001\000\010\011\054\012" +
    "\023\013\022\001\001\000\010\011\053\012\023\013\022" +
    "\001\001\000\010\011\052\012\023\013\022\001\001\000" +
    "\010\011\051\012\023\013\022\001\001\000\010\011\050" +
    "\012\023\013\022\001\001\000\010\011\047\012\023\013" +
    "\022\001\001\000\010\011\046\012\023\013\022\001\001" +
    "\000\010\011\045\012\023\013\022\001\001\000\002\001" +
    "\001\000\010\011\044\012\023\013\022\001\001\000\010" +
    "\011\043\012\023\013\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\002\077\003\004\004\003\005\020\006\014" +
    "\010\013\011\011\012\006\013\007\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserPHP$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserPHP$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserPHP$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error (Symbol s)
    {
        report_error("Error de sintaxis en linea: " + (s.left+1) +
                    " ,columna: "+(s.right+1)+" , simbolo: "+s.value, null);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        report_fatal_error("Error de sintaxis no recuperable en linea: " + (s.left+1) +
                    " ,columna: "+(s.right+1)+" , simbolo: "+s.value, null);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserPHP$actions {
  private final ParserPHP parser;

  /** Constructor */
  CUP$ParserPHP$actions(ParserPHP parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserPHP$do_action(
    int                        CUP$ParserPHP$act_num,
    java_cup.runtime.lr_parser CUP$ParserPHP$parser,
    java.util.Stack            CUP$ParserPHP$stack,
    int                        CUP$ParserPHP$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserPHP$result;

      /* select the action based on the action number */
      switch (CUP$ParserPHP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operacion_logica ::= expresion OPERADOR_LOGICO_OR expresion 
            {
              Object RESULT =null;
		
                System.out.println("Operación lógica OR realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",9, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operacion_logica ::= expresion OPERADOR_LOGICO_AND expresion 
            {
              Object RESULT =null;
		
                System.out.println("Operación lógica AND realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",9, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operacion_logica ::= expresion OPERADOR_DESIGUALDAD expresion 
            {
              Object RESULT =null;
		
                System.out.println("Comparación de desigualdad realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",9, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operacion_logica ::= expresion OPERADOR_IGUALDAD expresion 
            {
              Object RESULT =null;
		
                System.out.println("Comparación de igualdad realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",9, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operacion_logica ::= expresion MENOR_IGUAL expresion 
            {
              Object RESULT =null;
		
                System.out.println("Comparación menor o igual realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",9, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operacion_logica ::= expresion MAYOR_IGUAL expresion 
            {
              Object RESULT =null;
		
                System.out.println("Comparación mayor o igual realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",9, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operacion_logica ::= expresion MENOR expresion 
            {
              Object RESULT =null;
		
                System.out.println("Comparación menor realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",9, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operacion_logica ::= expresion MAYOR expresion 
            {
              Object RESULT =null;
		
                System.out.println("Comparación mayor realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",9, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operacion_aritmetica ::= expresion OPERADOR_MODULO expresion 
            {
              Object RESULT =null;
		
                System.out.println("Operación módulo realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",8, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operacion_aritmetica ::= expresion OPERADOR_DIVISION expresion 
            {
              Object RESULT =null;
		
                System.out.println("División realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",8, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operacion_aritmetica ::= expresion OPERADOR_MULTIPLICACION expresion 
            {
              Object RESULT =null;
		
                System.out.println("Multiplicación realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",8, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operacion_aritmetica ::= expresion OPERADOR_RESTA expresion 
            {
              Object RESULT =null;
		
                System.out.println("Resta realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",8, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operacion_aritmetica ::= expresion OPERADOR_SUMA expresion 
            {
              Object RESULT =null;
		
                System.out.println("Suma realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",8, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= PARENTESIS_APERTURA expresion PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion ::= NUMERO_FLOTANTE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresion ::= NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion ::= operacion_logica 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion ::= operacion_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // dec_cadena ::= DECLARADOR OPERADOR_ASIGNACION CADENA PUNTO_COMA 
            {
              Object RESULT =null;
		
                System.out.println("Declaracion de cadena");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("dec_cadena",6, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo_bool ::= FALSE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("tipo_bool",5, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo_bool ::= TRUE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("tipo_bool",5, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // dec_booleano ::= DECLARADOR OPERADOR_ASIGNACION tipo_bool PUNTO_COMA 
            {
              Object RESULT =null;
		
                System.out.println("Declaracion de booleano");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("dec_booleano",4, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dec_flotante ::= DECLARADOR OPERADOR_ASIGNACION NUMERO_FLOTANTE PUNTO_COMA 
            {
              Object RESULT =null;
		
                System.out.println("Declaracion de numero flotante");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("dec_flotante",3, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dec_entero ::= DECLARADOR OPERADOR_ASIGNACION NUMERO_ENTERO PUNTO_COMA 
            {
              Object RESULT =null;
		
                System.out.println("Declaracion de numero entero");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("dec_entero",2, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= PARENTESIS_APERTURA expresion PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= operacion_logica 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= operacion_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= dec_cadena 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencia ::= dec_booleano 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencia ::= dec_flotante 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentencia ::= dec_entero 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencias",0, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // sentencias ::= sentencia PUNTO_COMA sentencias 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencias",0, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= sentencias EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)).value;
		RESULT = start_val;
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserPHP$parser.done_parsing();
          return CUP$ParserPHP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

