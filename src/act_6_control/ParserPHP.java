
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Oct 06 16:07:34 CST 2024
//----------------------------------------------------

package act_6_control;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Oct 06 16:07:34 CST 2024
  */
public class ParserPHP extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserPHP() {super();}

  /** Constructor which sets the default scanner. */
  public ParserPHP(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserPHP(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\004\005\000\002\004\004\000\002\004\004" +
    "\000\002\004\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\005\000\002\005" +
    "\005\000\002\006\005\000\002\007\005\000\002\010\003" +
    "\000\002\010\003\000\002\011\005\000\002\012\005\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\017\011" +
    "\000\002\017\015\000\002\017\020\000\002\017\024\000" +
    "\002\020\011\000\002\021\015" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\022\002\uffff\007\017\012\030\013\011\016" +
    "\015\045\016\046\022\047\014\001\002\000\024\002\ufffb" +
    "\007\ufffb\012\ufffb\013\ufffb\015\ufffb\016\ufffb\045\ufffb\046" +
    "\ufffb\047\ufffb\001\002\000\004\022\ufffa\001\002\000\004" +
    "\022\ufff9\001\002\000\004\002\162\001\002\000\004\022" +
    "\ufff8\001\002\000\004\016\154\001\002\000\024\002\000" +
    "\007\017\012\030\013\011\015\000\016\015\045\016\046" +
    "\022\047\014\001\002\000\034\025\047\027\057\030\053" +
    "\031\055\032\045\033\060\034\054\035\061\036\046\040" +
    "\056\041\050\042\051\043\062\001\002\000\040\017\uffe8" +
    "\022\uffe8\025\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033" +
    "\uffe8\034\uffe8\035\uffe8\036\uffe8\040\uffe8\041\uffe8\042\uffe8" +
    "\043\uffe8\001\002\000\012\016\040\045\043\046\022\047" +
    "\014\001\002\000\036\024\140\025\uffe7\027\uffe7\030\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\040" +
    "\uffe7\041\uffe7\042\uffe7\043\uffe7\001\002\000\004\016\113" +
    "\001\002\000\004\022\ufff7\001\002\000\004\022\ufff6\001" +
    "\002\000\040\017\uffe9\022\uffe9\025\uffe9\027\uffe9\030\uffe9" +
    "\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\040" +
    "\uffe9\041\uffe9\042\uffe9\043\uffe9\001\002\000\004\022\112" +
    "\001\002\000\024\002\uffd8\007\uffd8\012\uffd8\013\uffd8\015" +
    "\uffd8\016\uffd8\045\uffd8\046\uffd8\047\uffd8\001\002\000\036" +
    "\022\ufff4\025\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033" +
    "\uffea\034\uffea\035\uffea\036\uffea\040\uffea\041\uffea\042\uffea" +
    "\043\uffea\001\002\000\024\002\uffd7\007\uffd7\012\uffd7\013" +
    "\uffd7\015\uffd7\016\uffd7\045\uffd7\046\uffd7\047\uffd7\001\002" +
    "\000\036\022\ufff5\025\uffeb\027\uffeb\030\uffeb\031\uffeb\032" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\040\uffeb\041\uffeb" +
    "\042\uffeb\043\uffeb\001\002\000\004\016\032\001\002\000" +
    "\024\002\uffd6\007\uffd6\012\uffd6\013\uffd6\015\uffd6\016\uffd6" +
    "\045\uffd6\046\uffd6\047\uffd6\001\002\000\004\045\034\001" +
    "\002\000\004\022\037\001\002\000\004\024\035\001\002" +
    "\000\004\046\036\001\002\000\004\022\ufff2\001\002\000" +
    "\012\016\040\045\043\046\022\047\014\001\002\000\012" +
    "\016\040\045\043\046\022\047\014\001\002\000\040\017" +
    "\uffea\022\uffea\025\uffea\027\uffea\030\uffea\031\uffea\032\uffea" +
    "\033\uffea\034\uffea\035\uffea\036\uffea\040\uffea\041\uffea\042" +
    "\uffea\043\uffea\001\002\000\040\017\uffeb\022\uffeb\025\uffeb" +
    "\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035" +
    "\uffeb\036\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\001\002" +
    "\000\040\017\uffe7\022\uffe7\025\uffe7\027\uffe7\030\uffe7\031" +
    "\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\040\uffe7" +
    "\041\uffe7\042\uffe7\043\uffe7\001\002\000\036\022\052\025" +
    "\047\027\057\030\053\031\055\032\045\033\060\034\054" +
    "\035\061\036\046\040\056\041\050\042\051\043\062\001" +
    "\002\000\012\016\040\045\043\046\022\047\014\001\002" +
    "\000\012\016\040\045\043\046\022\047\014\001\002\000" +
    "\012\016\040\045\043\046\022\047\014\001\002\000\012" +
    "\016\040\045\043\046\022\047\014\001\002\000\012\016" +
    "\040\045\043\046\022\047\014\001\002\000\004\045\074" +
    "\001\002\000\012\016\040\045\043\046\022\047\014\001" +
    "\002\000\012\016\040\045\043\046\022\047\014\001\002" +
    "\000\012\016\040\045\043\046\022\047\014\001\002\000" +
    "\012\016\040\045\043\046\022\047\014\001\002\000\012" +
    "\016\040\045\043\046\022\047\014\001\002\000\012\016" +
    "\040\045\043\046\022\047\014\001\002\000\012\016\040" +
    "\045\043\046\022\047\014\001\002\000\012\016\040\045" +
    "\043\046\022\047\014\001\002\000\040\017\uffdd\022\uffdd" +
    "\025\uffdd\027\uffdd\030\053\031\055\032\045\033\060\034" +
    "\054\035\uffdd\036\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd" +
    "\001\002\000\040\017\uffda\022\uffda\025\047\027\057\030" +
    "\053\031\055\032\045\033\060\034\054\035\uffda\036\uffda" +
    "\040\056\041\050\042\051\043\062\001\002\000\040\017" +
    "\uffe2\022\uffe2\025\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\036\uffe2\040\uffe2\041\uffe2\042" +
    "\uffe2\043\uffe2\001\002\000\040\017\uffdb\022\uffdb\025\uffdb" +
    "\027\uffdb\030\053\031\055\032\045\033\060\034\054\035" +
    "\uffdb\036\uffdb\040\056\041\050\042\051\043\062\001\002" +
    "\000\040\017\uffe0\022\uffe0\025\uffe0\027\uffe0\030\053\031" +
    "\055\032\045\033\060\034\054\035\uffe0\036\uffe0\040\uffe0" +
    "\041\uffe0\042\uffe0\043\uffe0\001\002\000\040\017\uffe4\022" +
    "\uffe4\025\uffe4\027\uffe4\030\uffe4\031\uffe4\032\045\033\060" +
    "\034\054\035\uffe4\036\uffe4\040\uffe4\041\uffe4\042\uffe4\043" +
    "\uffe4\001\002\000\040\017\uffe1\022\uffe1\025\uffe1\027\uffe1" +
    "\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\001\002\000\040" +
    "\017\uffe5\022\uffe5\025\uffe5\027\uffe5\030\uffe5\031\uffe5\032" +
    "\045\033\060\034\054\035\uffe5\036\uffe5\040\uffe5\041\uffe5" +
    "\042\uffe5\043\uffe5\001\002\000\004\017\077\001\002\000" +
    "\004\024\075\001\002\000\012\016\040\045\043\046\022" +
    "\047\014\001\002\000\040\017\uffec\022\uffec\025\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\036\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\001\002\000" +
    "\004\014\100\001\002\000\022\007\017\012\030\013\011" +
    "\015\uffff\016\015\045\016\046\022\047\014\001\002\000" +
    "\004\015\102\001\002\000\024\002\uffd0\007\uffd0\012\uffd0" +
    "\013\uffd0\015\uffd0\016\uffd0\045\uffd0\046\uffd0\047\uffd0\001" +
    "\002\000\040\017\uffde\022\uffde\025\uffde\027\uffde\030\053" +
    "\031\055\032\045\033\060\034\054\035\uffde\036\uffde\040" +
    "\uffde\041\uffde\042\uffde\043\uffde\001\002\000\040\017\uffdf" +
    "\022\uffdf\025\uffdf\027\uffdf\030\053\031\055\032\045\033" +
    "\060\034\054\035\uffdf\036\uffdf\040\uffdf\041\uffdf\042\uffdf" +
    "\043\uffdf\001\002\000\040\017\uffdc\022\uffdc\025\uffdc\027" +
    "\uffdc\030\053\031\055\032\045\033\060\034\054\035\uffdc" +
    "\036\uffdc\040\056\041\050\042\051\043\062\001\002\000" +
    "\040\017\uffd9\022\uffd9\025\047\027\057\030\053\031\055" +
    "\032\045\033\060\034\054\035\061\036\uffd9\040\056\041" +
    "\050\042\051\043\062\001\002\000\040\017\uffe3\022\uffe3" +
    "\025\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3" +
    "\001\002\000\036\017\111\025\047\027\057\030\053\031" +
    "\055\032\045\033\060\034\054\035\061\036\046\040\056" +
    "\041\050\042\051\043\062\001\002\000\040\017\uffe6\022" +
    "\uffe6\025\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\036\uffe6\040\uffe6\041\uffe6\042\uffe6\043" +
    "\uffe6\001\002\000\024\002\ufffc\007\ufffc\012\ufffc\013\ufffc" +
    "\015\ufffc\016\ufffc\045\ufffc\046\ufffc\047\ufffc\001\002\000" +
    "\012\016\040\045\043\046\022\047\014\001\002\000\036" +
    "\017\115\025\047\027\057\030\053\031\055\032\045\033" +
    "\060\034\054\035\061\036\046\040\056\041\050\042\051" +
    "\043\062\001\002\000\004\014\116\001\002\000\022\007" +
    "\017\012\030\013\011\015\uffff\016\015\045\016\046\022" +
    "\047\014\001\002\000\004\015\120\001\002\000\030\002" +
    "\uffd5\007\uffd5\010\122\011\121\012\uffd5\013\uffd5\015\uffd5" +
    "\016\uffd5\045\uffd5\046\uffd5\047\uffd5\001\002\000\004\014" +
    "\135\001\002\000\004\016\123\001\002\000\012\016\040" +
    "\045\043\046\022\047\014\001\002\000\036\017\125\025" +
    "\047\027\057\030\053\031\055\032\045\033\060\034\054" +
    "\035\061\036\046\040\056\041\050\042\051\043\062\001" +
    "\002\000\004\014\126\001\002\000\022\007\017\012\030" +
    "\013\011\015\uffff\016\015\045\016\046\022\047\014\001" +
    "\002\000\004\015\130\001\002\000\026\002\uffd3\007\uffd3" +
    "\011\131\012\uffd3\013\uffd3\015\uffd3\016\uffd3\045\uffd3\046" +
    "\uffd3\047\uffd3\001\002\000\004\014\132\001\002\000\022" +
    "\007\017\012\030\013\011\015\uffff\016\015\045\016\046" +
    "\022\047\014\001\002\000\004\015\134\001\002\000\024" +
    "\002\uffd2\007\uffd2\012\uffd2\013\uffd2\015\uffd2\016\uffd2\045" +
    "\uffd2\046\uffd2\047\uffd2\001\002\000\022\007\017\012\030" +
    "\013\011\015\uffff\016\015\045\016\046\022\047\014\001" +
    "\002\000\004\015\137\001\002\000\024\002\uffd4\007\uffd4" +
    "\012\uffd4\013\uffd4\015\uffd4\016\uffd4\045\uffd4\046\uffd4\047" +
    "\uffd4\001\002\000\020\005\143\006\145\016\040\045\043" +
    "\046\144\047\146\053\141\001\002\000\004\022\uffed\001" +
    "\002\000\004\022\ufff0\001\002\000\004\022\uffef\001\002" +
    "\000\036\022\ufff2\025\uffe9\027\uffe9\030\uffe9\031\uffe9\032" +
    "\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\040\uffe9\041\uffe9" +
    "\042\uffe9\043\uffe9\001\002\000\004\022\uffee\001\002\000" +
    "\036\022\ufff1\025\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8" +
    "\033\uffe8\034\uffe8\035\uffe8\036\uffe8\040\uffe8\041\uffe8\042" +
    "\uffe8\043\uffe8\001\002\000\036\017\150\025\047\027\057" +
    "\030\053\031\055\032\045\033\060\034\054\035\061\036" +
    "\046\040\056\041\050\042\051\043\062\001\002\000\036" +
    "\022\ufff3\025\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033" +
    "\uffe6\034\uffe6\035\uffe6\036\uffe6\040\uffe6\041\uffe6\042\uffe6" +
    "\043\uffe6\001\002\000\024\002\ufffd\007\ufffd\012\ufffd\013" +
    "\ufffd\015\ufffd\016\ufffd\045\ufffd\046\ufffd\047\ufffd\001\002" +
    "\000\004\022\153\001\002\000\024\002\ufffe\007\ufffe\012" +
    "\ufffe\013\ufffe\015\ufffe\016\ufffe\045\ufffe\046\ufffe\047\ufffe" +
    "\001\002\000\012\016\040\045\043\046\022\047\014\001" +
    "\002\000\036\017\156\025\047\027\057\030\053\031\055" +
    "\032\045\033\060\034\054\035\061\036\046\040\056\041" +
    "\050\042\051\043\062\001\002\000\004\014\157\001\002" +
    "\000\022\007\017\012\030\013\011\015\uffff\016\015\045" +
    "\016\046\022\047\014\001\002\000\004\015\161\001\002" +
    "\000\024\002\uffd1\007\uffd1\012\uffd1\013\uffd1\015\uffd1\016" +
    "\uffd1\045\uffd1\046\uffd1\047\uffd1\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\040\002\006\003\022\004\011\005\004\006" +
    "\005\007\007\011\017\012\020\013\012\014\026\015\024" +
    "\016\003\017\023\020\025\021\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\003\151\005" +
    "\004\006\005\007\007\011\017\012\020\013\012\014\026" +
    "\015\024\016\150\017\023\020\025\021\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\146\014\041" +
    "\015\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\043" +
    "\014\041\015\040\001\001\000\010\013\107\014\041\015" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\106\014\041\015" +
    "\040\001\001\000\010\013\105\014\041\015\040\001\001" +
    "\000\010\013\104\014\041\015\040\001\001\000\010\013" +
    "\103\014\041\015\040\001\001\000\010\013\102\014\041" +
    "\015\040\001\001\000\004\012\072\001\001\000\010\013" +
    "\071\014\041\015\040\001\001\000\010\013\070\014\041" +
    "\015\040\001\001\000\010\013\067\014\041\015\040\001" +
    "\001\000\010\013\066\014\041\015\040\001\001\000\010" +
    "\013\065\014\041\015\040\001\001\000\010\013\064\014" +
    "\041\015\040\001\001\000\010\013\063\014\041\015\040" +
    "\001\001\000\010\013\062\014\041\015\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\012\014\075\015\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\002\100\003\022\004\011" +
    "\005\004\006\005\007\007\011\017\012\020\013\012\014" +
    "\026\015\024\016\003\017\023\020\025\021\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\113\014\041\015\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\002\116\003\022\004" +
    "\011\005\004\006\005\007\007\011\017\012\020\013\012" +
    "\014\026\015\024\016\003\017\023\020\025\021\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\123\014\041\015\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\002\126" +
    "\003\022\004\011\005\004\006\005\007\007\011\017\012" +
    "\020\013\012\014\026\015\024\016\003\017\023\020\025" +
    "\021\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\002\132\003\022\004\011\005\004" +
    "\006\005\007\007\011\017\012\020\013\012\014\026\015" +
    "\024\016\003\017\023\020\025\021\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\002\135\003\022\004" +
    "\011\005\004\006\005\007\007\011\017\012\020\013\012" +
    "\014\026\015\024\016\003\017\023\020\025\021\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\141" +
    "\013\012\014\075\015\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\154\014\041\015\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\002\157\003\022\004\011" +
    "\005\004\006\005\007\007\011\017\012\020\013\012\014" +
    "\026\015\024\016\003\017\023\020\025\021\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserPHP$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserPHP$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserPHP$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error (Symbol s)
    {
        report_error("Error de sintaxis en linea: " + (s.left+1) +
                    " ,columna: "+(s.right+1)+" , simbolo: "+s.value, null);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        report_fatal_error("Error de sintaxis no recuperable en linea: " + (s.left+1) +
                    " ,columna: "+(s.right+1)+" , simbolo: "+s.value, null);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserPHP$actions {
  private final ParserPHP parser;

  /** Constructor */
  CUP$ParserPHP$actions(ParserPHP parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserPHP$do_action(
    int                        CUP$ParserPHP$act_num,
    java_cup.runtime.lr_parser CUP$ParserPHP$parser,
    java.util.Stack            CUP$ParserPHP$stack,
    int                        CUP$ParserPHP$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserPHP$result;

      /* select the action based on the action number */
      switch (CUP$ParserPHP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // for_sentencia ::= FOR PARENTESIS_APERTURA dec_entero PUNTO_COMA expresion PUNTO_COMA asignacion PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		 System.out.println("Sentencia for procesada"); 
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("for_sentencia",15, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-10)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // while_sentencia ::= WHILE PARENTESIS_APERTURA expresion PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		 System.out.println("Sentencia while procesada"); 
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("while_sentencia",14, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-6)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // if_sentencia ::= IF PARENTESIS_APERTURA expresion PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE ELSEIF PARENTESIS_APERTURA expresion PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE ELSE LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		 System.out.println("Sentencia if-elseif-else procesada"); 
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("if_sentencia",13, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-17)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // if_sentencia ::= IF PARENTESIS_APERTURA expresion PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE ELSEIF PARENTESIS_APERTURA expresion PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		 System.out.println("Sentencia if-elseif procesada"); 
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("if_sentencia",13, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-13)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // if_sentencia ::= IF PARENTESIS_APERTURA expresion PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE ELSE LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		 System.out.println("Sentencia if-else procesada"); 
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("if_sentencia",13, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-10)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // if_sentencia ::= IF PARENTESIS_APERTURA expresion PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		 System.out.println("Sentencia if simple procesada"); 
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("if_sentencia",13, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-6)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // estructura_control ::= for_sentencia 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("estructura_control",12, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // estructura_control ::= while_sentencia 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("estructura_control",12, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // estructura_control ::= if_sentencia 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("estructura_control",12, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operacion_logica ::= expresion OPERADOR_LOGICO_OR expresion 
            {
              Object RESULT =null;
		
                System.out.println("Operación lógica OR realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",11, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operacion_logica ::= expresion OPERADOR_LOGICO_AND expresion 
            {
              Object RESULT =null;
		
                System.out.println("Operación lógica AND realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",11, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operacion_logica ::= expresion OPERADOR_DESIGUALDAD expresion 
            {
              Object RESULT =null;
		
                System.out.println("Comparación de desigualdad realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",11, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operacion_logica ::= expresion OPERADOR_IGUALDAD expresion 
            {
              Object RESULT =null;
		
                System.out.println("Comparación de igualdad realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",11, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operacion_logica ::= expresion MENOR_IGUAL expresion 
            {
              Object RESULT =null;
		
                System.out.println("Comparación menor o igual realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",11, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operacion_logica ::= expresion MAYOR_IGUAL expresion 
            {
              Object RESULT =null;
		
                System.out.println("Comparación mayor o igual realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",11, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operacion_logica ::= expresion MENOR expresion 
            {
              Object RESULT =null;
		
                System.out.println("Comparación menor realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",11, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operacion_logica ::= expresion MAYOR expresion 
            {
              Object RESULT =null;
		
                System.out.println("Comparación mayor realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",11, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operacion_aritmetica ::= expresion OPERADOR_MODULO expresion 
            {
              Object RESULT =null;
		
                System.out.println("Operación módulo realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",10, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operacion_aritmetica ::= expresion OPERADOR_DIVISION expresion 
            {
              Object RESULT =null;
		
                System.out.println("División realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",10, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operacion_aritmetica ::= expresion OPERADOR_MULTIPLICACION expresion 
            {
              Object RESULT =null;
		
                System.out.println("Multiplicación realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",10, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operacion_aritmetica ::= expresion OPERADOR_RESTA expresion 
            {
              Object RESULT =null;
		
                System.out.println("Resta realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",10, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operacion_aritmetica ::= expresion OPERADOR_SUMA expresion 
            {
              Object RESULT =null;
		
                System.out.println("Suma realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",10, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion ::= PARENTESIS_APERTURA expresion PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= NUMERO_FLOTANTE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= operacion_logica 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= operacion_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // asignacion ::= VARIABLE OPERADOR_ASIGNACION operacion_aritmetica 
            {
              Object RESULT =null;
		
                System.out.println("Asignación realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("asignacion",8, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // dec_cadena ::= VARIABLE OPERADOR_ASIGNACION CADENA 
            {
              Object RESULT =null;
		
                System.out.println("Declaracion de cadena");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("dec_cadena",7, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo_bool ::= FALSE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("tipo_bool",6, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo_bool ::= TRUE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("tipo_bool",6, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // dec_booleano ::= VARIABLE OPERADOR_ASIGNACION tipo_bool 
            {
              Object RESULT =null;
		
                System.out.println("Declaracion de booleano");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("dec_booleano",5, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // dec_flotante ::= VARIABLE OPERADOR_ASIGNACION NUMERO_FLOTANTE 
            {
              Object RESULT =null;
		
                System.out.println("Declaracion de numero flotante");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("dec_flotante",4, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // dec_entero ::= VARIABLE OPERADOR_ASIGNACION NUMERO_ENTERO 
            {
              Object RESULT =null;
		
                System.out.println("Declaracion de numero entero");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("dec_entero",3, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= PARENTESIS_APERTURA expresion PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= operacion_logica 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= operacion_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= asignacion 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= dec_cadena 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= dec_booleano 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= dec_flotante 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= dec_entero 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_sentencias ::= estructura_control 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_sentencias",2, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_sentencias ::= sentencia PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_sentencias",2, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_sentencias ::= lista_sentencias estructura_control 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_sentencias",2, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_sentencias ::= lista_sentencias sentencia PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_sentencias",2, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sentencias ::= 
            {
              Object RESULT =null;
		 System.out.println("Fin de entrada alcanzado"); 
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencias",0, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // sentencias ::= lista_sentencias 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencias",0, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= sentencias EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)).value;
		RESULT = start_val;
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserPHP$parser.done_parsing();
          return CUP$ParserPHP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

