
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 03 21:06:47 CST 2024
//----------------------------------------------------

package act_9_semantico;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 03 21:06:47 CST 2024
  */
public class ParserPHP extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserPHP() {super();}

  /** Constructor which sets the default scanner. */
  public ParserPHP(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserPHP(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\215\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\002\004\000\002\002\003\000\002\003\003" +
    "\000\002\003\002\000\002\005\005\000\002\005\004\000" +
    "\002\005\004\000\002\005\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\005\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\007\006\000\002" +
    "\010\006\000\002\011\005\000\002\011\002\000\002\012" +
    "\005\000\002\012\002\000\002\013\005\000\002\014\005" +
    "\000\002\015\005\000\002\016\003\000\002\016\003\000" +
    "\002\017\005\000\002\020\005\000\002\021\005\000\002" +
    "\021\005\000\002\022\005\000\002\022\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\002\000" +
    "\002\025\013\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\027\005\000\002\027\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\032\012\000" +
    "\002\033\006\000\002\033\012\000\002\034\011\000\002" +
    "\035\013\000\002\036\015\000\002\037\022\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\041\011\000\002\041\002\000\002\042\007\000" +
    "\002\043\006\000\002\043\005\000\002\043\005\000\002" +
    "\043\005\000\002\043\005\000\002\043\004\000\002\043" +
    "\004\000\002\043\004\000\002\043\004\000\002\043\004" +
    "\000\002\043\004\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\002\000\002" +
    "\045\006\000\002\045\007\000\002\054\003\000\002\054" +
    "\005\000\002\046\010\000\002\046\010\000\002\046\010" +
    "\000\002\046\010\000\002\053\010\000\002\053\010\000" +
    "\002\053\010\000\002\053\010\000\002\053\002\000\002" +
    "\044\005\000\002\044\002\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\004\000\002\047\004" +
    "\000\002\047\004\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\004\000\002\050\004\000\002" +
    "\050\004\000\002\050\004\000\002\050\004\000\002\050" +
    "\004\000\002\051\014\000\002\057\003\000\002\057\004" +
    "\000\002\052\011\000\002\052\013\000\002\052\012\000" +
    "\002\052\014\000\002\055\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013d\000\010\004\004\005\011\006\006\001\002\000" +
    "\004\075\u013a\001\002\000\004\002\u0139\001\002\000\004" +
    "\075\025\001\002\000\004\002\ufffd\001\002\000\004\006" +
    "\006\001\002\000\004\075\016\001\002\000\006\005\011" +
    "\006\006\001\002\000\004\002\uffff\001\002\000\004\006" +
    "\006\001\002\000\004\002\000\001\002\000\006\050\uffe4" +
    "\064\020\001\002\000\004\050\023\001\002\000\004\075" +
    "\021\001\002\000\006\050\uffe4\064\020\001\002\000\004" +
    "\050\uffe5\001\002\000\004\006\uffe8\001\002\000\004\002" +
    "\ufffe\001\002\000\004\042\026\001\002\000\014\007\027" +
    "\010\037\011\034\016\042\043\uff9b\001\002\000\012\012" +
    "\u0138\013\112\014\uff85\076\uff8b\001\002\000\014\007\027" +
    "\010\037\011\034\016\042\043\uff9f\001\002\000\012\007" +
    "\105\010\106\011\102\043\uff9d\001\002\000\004\014\u0123" +
    "\001\002\000\012\007\105\010\106\011\102\043\uff9c\001" +
    "\002\000\012\012\u0122\013\u0119\014\uff83\076\uff89\001\002" +
    "\000\004\076\u011c\001\002\000\012\007\uff7b\010\uff7b\011" +
    "\uff7b\043\uff7b\001\002\000\012\012\u011b\013\110\014\uff84" +
    "\076\uff8a\001\002\000\004\043\u011a\001\002\000\012\007" +
    "\105\010\106\011\102\043\uff9e\001\002\000\004\077\043" +
    "\001\002\000\004\054\044\001\002\000\014\021\047\022" +
    "\050\100\051\101\046\105\052\001\002\000\004\050\100" +
    "\001\002\000\004\050\076\001\002\000\006\050\uffe0\052" +
    "\uffe0\001\002\000\006\050\uffdf\052\uffdf\001\002\000\004" +
    "\050\074\001\002\000\004\050\053\001\002\000\014\007" +
    "\uff8e\010\uff8e\011\uff8e\016\054\043\uff8e\001\002\000\004" +
    "\077\056\001\002\000\012\007\uff96\010\uff96\011\uff96\043" +
    "\uff96\001\002\000\004\054\057\001\002\000\014\021\047" +
    "\022\050\100\062\101\061\105\063\001\002\000\004\050" +
    "\072\001\002\000\004\050\070\001\002\000\004\050\066" +
    "\001\002\000\004\050\064\001\002\000\014\007\uff8e\010" +
    "\uff8e\011\uff8e\016\054\043\uff8e\001\002\000\012\007\uff92" +
    "\010\uff92\011\uff92\043\uff92\001\002\000\014\007\uff8e\010" +
    "\uff8e\011\uff8e\016\054\043\uff8e\001\002\000\012\007\uff91" +
    "\010\uff91\011\uff91\043\uff91\001\002\000\014\007\uff8e\010" +
    "\uff8e\011\uff8e\016\054\043\uff8e\001\002\000\012\007\uff90" +
    "\010\uff90\011\uff90\043\uff90\001\002\000\014\007\uff8e\010" +
    "\uff8e\011\uff8e\016\054\043\uff8e\001\002\000\012\007\uff8f" +
    "\010\uff8f\011\uff8f\043\uff8f\001\002\000\014\007\uff8e\010" +
    "\uff8e\011\uff8e\016\054\043\uff8e\001\002\000\012\007\uff95" +
    "\010\uff95\011\uff95\043\uff95\001\002\000\014\007\uff8e\010" +
    "\uff8e\011\uff8e\016\054\043\uff8e\001\002\000\012\007\uff94" +
    "\010\uff94\011\uff94\043\uff94\001\002\000\014\007\uff8e\010" +
    "\uff8e\011\uff8e\016\054\043\uff8e\001\002\000\012\007\uff93" +
    "\010\uff93\011\uff93\043\uff93\001\002\000\010\012\u0118\013" +
    "\u0119\014\uff83\001\002\000\012\007\105\010\106\011\102" +
    "\043\uffa3\001\002\000\012\007\105\010\106\011\102\043" +
    "\uffa2\001\002\000\010\012\111\013\112\014\uff85\001\002" +
    "\000\010\012\107\013\110\014\uff84\001\002\000\004\014" +
    "\uff81\001\002\000\004\014\uff7e\001\002\000\004\014\uff82" +
    "\001\002\000\004\014\uff7f\001\002\000\012\007\105\010" +
    "\106\011\102\043\uffa9\001\002\000\004\014\115\001\002" +
    "\000\004\075\116\001\002\000\004\044\117\001\002\000" +
    "\006\045\u010a\076\u010b\001\002\000\006\042\121\052\122" +
    "\001\002\000\032\023\144\026\161\027\133\030\151\031" +
    "\141\035\132\036\156\043\ufffb\044\142\076\143\100\150" +
    "\101\140\001\002\000\004\017\123\001\002\000\004\042" +
    "\124\001\002\000\032\023\144\026\161\027\133\030\151" +
    "\031\141\035\132\036\156\043\ufffb\044\142\076\143\100" +
    "\150\101\140\001\002\000\034\023\ufff7\026\ufff7\027\ufff7" +
    "\030\ufff7\031\ufff7\033\ufff7\035\ufff7\036\ufff7\043\ufff7\044" +
    "\ufff7\076\ufff7\100\ufff7\101\ufff7\001\002\000\004\050\ufff2" +
    "\001\002\000\004\050\ufff1\001\002\000\004\050\ufff0\001" +
    "\002\000\004\043\u0106\001\002\000\006\076\u0102\105\u0103" +
    "\001\002\000\004\044\374\001\002\000\004\050\uffec\001" +
    "\002\000\034\023\144\026\161\027\133\030\151\031\141" +
    "\033\ufffc\035\132\036\156\043\ufffc\044\142\076\143\100" +
    "\150\101\140\001\002\000\034\055\203\057\213\060\207" +
    "\061\211\062\202\063\214\065\210\066\215\067\201\071" +
    "\212\072\204\073\206\074\216\001\002\000\004\050\uffea" +
    "\001\002\000\040\045\uffcd\050\uffcd\055\uffcd\057\uffcd\060" +
    "\uffcd\061\uffcd\062\uffcd\063\uffcd\065\uffcd\066\uffcd\067\uffcd" +
    "\071\uffcd\072\uffcd\073\uffcd\074\uffcd\001\002\000\004\044" +
    "\337\001\002\000\012\044\174\076\177\100\150\101\140" +
    "\001\002\000\036\054\314\055\uffcc\057\uffcc\060\313\061" +
    "\315\062\uffcc\063\uffcc\065\uffcc\066\uffcc\067\uffcc\071\uffcc" +
    "\072\uffcc\073\uffcc\074\uffcc\001\002\000\004\044\270\001" +
    "\002\000\034\023\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9" +
    "\033\uffb9\035\uffb9\036\uffb9\043\uffb9\044\uffb9\076\uffb9\100" +
    "\uffb9\101\uffb9\001\002\000\004\050\uffef\001\002\000\004" +
    "\050\uffee\001\002\000\040\045\uffce\050\uffce\055\uffce\057" +
    "\uffce\060\uffce\061\uffce\062\uffce\063\uffce\065\uffce\066\uffce" +
    "\067\uffce\071\uffce\072\uffce\073\uffce\074\uffce\001\002\000" +
    "\004\042\260\001\002\000\004\050\257\001\002\000\034" +
    "\023\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\033\uffbd\035" +
    "\uffbd\036\uffbd\043\uffbd\044\uffbd\076\uffbd\100\uffbd\101\uffbd" +
    "\001\002\000\036\050\ufff4\055\uffcf\057\uffcf\060\uffcf\061" +
    "\uffcf\062\uffcf\063\uffcf\065\uffcf\066\uffcf\067\uffcf\071\uffcf" +
    "\072\uffcf\073\uffcf\074\uffcf\001\002\000\034\023\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\031\uffbc\033\uffbc\035\uffbc\036\uffbc" +
    "\043\uffbc\044\uffbc\076\uffbc\100\uffbc\101\uffbc\001\002\000" +
    "\006\076\247\105\246\001\002\000\004\050\uffeb\001\002" +
    "\000\036\050\ufff5\055\uffd0\057\uffd0\060\uffd0\061\uffd0\062" +
    "\uffd0\063\uffd0\065\uffd0\066\uffd0\067\uffd0\071\uffd0\072\uffd0" +
    "\073\uffd0\074\uffd0\001\002\000\004\044\166\001\002\000" +
    "\034\023\uffba\026\uffba\027\uffba\030\uffba\031\uffba\033\uffba" +
    "\035\uffba\036\uffba\043\uffba\044\uffba\076\uffba\100\uffba\101" +
    "\uffba\001\002\000\034\023\uffbb\026\uffbb\027\uffbb\030\uffbb" +
    "\031\uffbb\033\uffbb\035\uffbb\036\uffbb\043\uffbb\044\uffbb\076" +
    "\uffbb\100\uffbb\101\uffbb\001\002\000\004\050\uffed\001\002" +
    "\000\004\050\ufff6\001\002\000\004\076\170\001\002\000" +
    "\004\050\173\001\002\000\004\054\171\001\002\000\004" +
    "\100\172\001\002\000\004\050\uffe3\001\002\000\012\044" +
    "\174\076\177\100\150\101\140\001\002\000\012\044\174" +
    "\076\177\100\150\101\140\001\002\000\040\045\uffcf\050" +
    "\uffcf\055\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf" +
    "\065\uffcf\066\uffcf\067\uffcf\071\uffcf\072\uffcf\073\uffcf\074" +
    "\uffcf\001\002\000\040\045\uffd0\050\uffd0\055\uffd0\057\uffd0" +
    "\060\uffd0\061\uffd0\062\uffd0\063\uffd0\065\uffd0\066\uffd0\067" +
    "\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\001\002\000\040" +
    "\045\uffcc\050\uffcc\055\uffcc\057\uffcc\060\uffcc\061\uffcc\062" +
    "\uffcc\063\uffcc\065\uffcc\066\uffcc\067\uffcc\071\uffcc\072\uffcc" +
    "\073\uffcc\074\uffcc\001\002\000\036\050\205\055\203\057" +
    "\213\060\207\061\211\062\202\063\214\065\210\066\215" +
    "\067\201\071\212\072\204\073\206\074\216\001\002\000" +
    "\012\044\174\076\177\100\150\101\140\001\002\000\012" +
    "\044\174\076\177\100\150\101\140\001\002\000\012\044" +
    "\174\076\177\100\150\101\140\001\002\000\012\044\174" +
    "\076\177\100\150\101\140\001\002\000\004\076\230\001" +
    "\002\000\012\044\174\076\177\100\150\101\140\001\002" +
    "\000\012\044\174\076\177\100\150\101\140\001\002\000" +
    "\012\044\174\076\177\100\150\101\140\001\002\000\012" +
    "\044\174\076\177\100\150\101\140\001\002\000\012\044" +
    "\174\076\177\100\150\101\140\001\002\000\012\044\174" +
    "\076\177\100\150\101\140\001\002\000\012\044\174\076" +
    "\177\100\150\101\140\001\002\000\012\044\174\076\177" +
    "\100\150\101\140\001\002\000\012\044\174\076\177\100" +
    "\150\101\140\001\002\000\040\045\uffc2\050\uffc2\055\uffc2" +
    "\057\uffc2\060\207\061\211\062\202\063\214\065\210\066" +
    "\uffc2\067\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\001\002" +
    "\000\040\045\uffbf\050\uffbf\055\203\057\213\060\207\061" +
    "\211\062\202\063\214\065\210\066\uffbf\067\uffbf\071\212" +
    "\072\204\073\206\074\216\001\002\000\040\045\uffc7\050" +
    "\uffc7\055\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7" +
    "\065\uffc7\066\uffc7\067\uffc7\071\uffc7\072\uffc7\073\uffc7\074" +
    "\uffc7\001\002\000\040\045\uffc0\050\uffc0\055\uffc0\057\uffc0" +
    "\060\207\061\211\062\202\063\214\065\210\066\uffc0\067" +
    "\uffc0\071\212\072\204\073\206\074\216\001\002\000\040" +
    "\045\uffc5\050\uffc5\055\uffc5\057\uffc5\060\207\061\211\062" +
    "\202\063\214\065\210\066\uffc5\067\uffc5\071\uffc5\072\uffc5" +
    "\073\uffc5\074\uffc5\001\002\000\040\045\uffc9\050\uffc9\055" +
    "\uffc9\057\uffc9\060\uffc9\061\uffc9\062\202\063\214\065\210" +
    "\066\uffc9\067\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9\001" +
    "\002\000\040\045\uffc6\050\uffc6\055\uffc6\057\uffc6\060\uffc6" +
    "\061\uffc6\062\uffc6\063\uffc6\065\uffc6\066\uffc6\067\uffc6\071" +
    "\uffc6\072\uffc6\073\uffc6\074\uffc6\001\002\000\040\045\uffca" +
    "\050\uffca\055\uffca\057\uffca\060\uffca\061\uffca\062\202\063" +
    "\214\065\210\066\uffca\067\uffca\071\uffca\072\uffca\073\uffca" +
    "\074\uffca\001\002\000\040\045\uffc3\050\uffc3\055\uffc3\057" +
    "\uffc3\060\207\061\211\062\202\063\214\065\210\066\uffc3" +
    "\067\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3\001\002\000" +
    "\004\054\236\001\002\000\004\045\232\001\002\000\004" +
    "\042\233\001\002\000\032\023\144\026\161\027\133\030" +
    "\151\031\141\035\132\036\156\043\ufffb\044\142\076\143" +
    "\100\150\101\140\001\002\000\004\043\235\001\002\000" +
    "\034\023\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\033\uffb3" +
    "\035\uffb3\036\uffb3\043\uffb3\044\uffb3\076\uffb3\100\uffb3\101" +
    "\uffb3\001\002\000\012\044\174\076\177\100\150\101\140" +
    "\001\002\000\040\045\uffdd\050\uffdd\055\uffd0\057\uffd0\060" +
    "\uffd0\061\uffd0\062\uffd0\063\uffd0\065\uffd0\066\uffd0\067\uffd0" +
    "\071\uffd0\072\uffd0\073\uffd0\074\uffd0\001\002\000\040\045" +
    "\uffc4\050\uffc4\055\uffc4\057\uffc4\060\207\061\211\062\202" +
    "\063\214\065\210\066\uffc4\067\uffc4\071\uffc4\072\uffc4\073" +
    "\uffc4\074\uffc4\001\002\000\040\045\uffc1\050\uffc1\055\uffc1" +
    "\057\uffc1\060\207\061\211\062\202\063\214\065\210\066" +
    "\uffc1\067\uffc1\071\212\072\204\073\206\074\216\001\002" +
    "\000\040\045\uffc8\050\uffc8\055\uffc8\057\uffc8\060\uffc8\061" +
    "\uffc8\062\uffc8\063\uffc8\065\uffc8\066\uffc8\067\uffc8\071\uffc8" +
    "\072\uffc8\073\uffc8\074\uffc8\001\002\000\040\045\uffbe\050" +
    "\uffbe\055\203\057\213\060\207\061\211\062\202\063\214" +
    "\065\210\066\215\067\uffbe\071\212\072\204\073\206\074" +
    "\216\001\002\000\036\045\245\055\203\057\213\060\207" +
    "\061\211\062\202\063\214\065\210\066\215\067\201\071" +
    "\212\072\204\073\206\074\216\001\002\000\040\045\uffcb" +
    "\050\uffcb\055\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063" +
    "\uffcb\065\uffcb\066\uffcb\067\uffcb\071\uffcb\072\uffcb\073\uffcb" +
    "\074\uffcb\001\002\000\006\050\uffd2\053\250\001\002\000" +
    "\006\050\uffd2\053\250\001\002\000\006\076\252\105\253" +
    "\001\002\000\004\050\uffd6\001\002\000\006\050\uffd2\053" +
    "\250\001\002\000\006\050\uffd2\053\250\001\002\000\004" +
    "\050\uffd3\001\002\000\004\050\uffd4\001\002\000\004\050" +
    "\uffd5\001\002\000\034\023\ufff8\026\ufff8\027\ufff8\030\ufff8" +
    "\031\ufff8\033\ufff8\035\ufff8\036\ufff8\043\ufff8\044\ufff8\076" +
    "\ufff8\100\ufff8\101\ufff8\001\002\000\032\023\144\026\161" +
    "\027\133\030\151\031\141\035\132\036\156\043\ufffb\044" +
    "\142\076\143\100\150\101\140\001\002\000\004\043\262" +
    "\001\002\000\004\027\263\001\002\000\004\044\264\001" +
    "\002\000\012\044\174\076\177\100\150\101\140\001\002" +
    "\000\036\045\266\055\203\057\213\060\207\061\211\062" +
    "\202\063\214\065\210\066\215\067\201\071\212\072\204" +
    "\073\206\074\216\001\002\000\004\050\267\001\002\000" +
    "\034\023\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\033\uffb4" +
    "\035\uffb4\036\uffb4\043\uffb4\044\uffb4\076\uffb4\100\uffb4\101" +
    "\uffb4\001\002\000\012\044\174\076\177\100\150\101\140" +
    "\001\002\000\036\045\272\055\203\057\213\060\207\061" +
    "\211\062\202\063\214\065\210\066\215\067\201\071\212" +
    "\072\204\073\206\074\216\001\002\000\004\042\273\001" +
    "\002\000\032\023\144\026\161\027\133\030\151\031\141" +
    "\035\132\036\156\043\ufffb\044\142\076\143\100\150\101" +
    "\140\001\002\000\004\043\275\001\002\000\006\024\276" +
    "\025\277\001\002\000\004\044\304\001\002\000\004\042" +
    "\301\001\002\000\034\023\uffb8\026\uffb8\027\uffb8\030\uffb8" +
    "\031\uffb8\033\uffb8\035\uffb8\036\uffb8\043\uffb8\044\uffb8\076" +
    "\uffb8\100\uffb8\101\uffb8\001\002\000\032\023\144\026\161" +
    "\027\133\030\151\031\141\035\132\036\156\043\ufffb\044" +
    "\142\076\143\100\150\101\140\001\002\000\004\043\303" +
    "\001\002\000\034\023\uffb7\026\uffb7\027\uffb7\030\uffb7\031" +
    "\uffb7\033\uffb7\035\uffb7\036\uffb7\043\uffb7\044\uffb7\076\uffb7" +
    "\100\uffb7\101\uffb7\001\002\000\012\044\174\076\177\100" +
    "\150\101\140\001\002\000\036\045\306\055\203\057\213" +
    "\060\207\061\211\062\202\063\214\065\210\066\215\067" +
    "\201\071\212\072\204\073\206\074\216\001\002\000\004" +
    "\042\307\001\002\000\032\023\144\026\161\027\133\030" +
    "\151\031\141\035\132\036\156\043\ufffb\044\142\076\143" +
    "\100\150\101\140\001\002\000\004\043\311\001\002\000" +
    "\006\024\276\025\277\001\002\000\034\023\uffb6\026\uffb6" +
    "\027\uffb6\030\uffb6\031\uffb6\033\uffb6\035\uffb6\036\uffb6\043" +
    "\uffb6\044\uffb6\076\uffb6\100\uffb6\101\uffb6\001\002\000\004" +
    "\060\334\001\002\000\024\021\047\022\050\037\322\044" +
    "\174\076\324\077\320\100\323\101\325\105\317\001\002" +
    "\000\004\061\316\001\002\000\004\050\uffd9\001\002\000" +
    "\004\050\uffde\001\002\000\004\050\uffdb\001\002\000\004" +
    "\050\uffe1\001\002\000\004\044\326\001\002\000\036\050" +
    "\uffe3\055\uffce\057\uffce\060\uffce\061\uffce\062\uffce\063\uffce" +
    "\065\uffce\066\uffce\067\uffce\071\uffce\072\uffce\073\uffce\074" +
    "\uffce\001\002\000\036\050\uffdc\055\uffcc\057\uffcc\060\uffcc" +
    "\061\uffcc\062\uffcc\063\uffcc\065\uffcc\066\uffcc\067\uffcc\071" +
    "\uffcc\072\uffcc\073\uffcc\074\uffcc\001\002\000\036\050\uffe2" +
    "\055\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\065" +
    "\uffcd\066\uffcd\067\uffcd\071\uffcd\072\uffcd\073\uffcd\074\uffcd" +
    "\001\002\000\004\040\327\001\002\000\004\044\330\001" +
    "\002\000\004\041\331\001\002\000\004\045\332\001\002" +
    "\000\004\045\333\001\002\000\004\050\uffd1\001\002\000" +
    "\004\050\uffda\001\002\000\036\045\336\055\203\057\213" +
    "\060\207\061\211\062\202\063\214\065\210\066\215\067" +
    "\201\071\212\072\204\073\206\074\216\001\002\000\036" +
    "\050\ufff3\055\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063" +
    "\uffcb\065\uffcb\066\uffcb\067\uffcb\071\uffcb\072\uffcb\073\uffcb" +
    "\074\uffcb\001\002\000\004\076\340\001\002\000\004\045" +
    "\341\001\002\000\004\042\342\001\002\000\004\032\343" +
    "\001\002\000\014\021\047\022\050\100\346\101\345\105" +
    "\350\001\002\000\004\052\uffae\001\002\000\004\052\uffaf" +
    "\001\002\000\004\052\uffb0\001\002\000\004\052\351\001" +
    "\002\000\004\052\uffb1\001\002\000\032\023\144\026\161" +
    "\027\133\030\151\031\141\033\ufffb\035\132\036\156\044" +
    "\142\076\143\100\150\101\140\001\002\000\004\033\353" +
    "\001\002\000\004\050\354\001\002\000\006\032\356\034" +
    "\uffac\001\002\000\004\034\365\001\002\000\014\021\047" +
    "\022\050\100\346\101\345\105\350\001\002\000\004\052" +
    "\360\001\002\000\032\023\144\026\161\027\133\030\151" +
    "\031\141\033\ufffb\035\132\036\156\044\142\076\143\100" +
    "\150\101\140\001\002\000\004\033\362\001\002\000\004" +
    "\050\363\001\002\000\006\032\356\034\uffac\001\002\000" +
    "\004\034\uffad\001\002\000\004\052\366\001\002\000\032" +
    "\023\144\026\161\027\133\030\151\031\141\035\132\036" +
    "\156\043\ufffb\044\142\076\143\100\150\101\140\001\002" +
    "\000\004\043\370\001\002\000\034\023\uffb2\026\uffb2\027" +
    "\uffb2\030\uffb2\031\uffb2\033\uffb2\035\uffb2\036\uffb2\043\uffb2" +
    "\044\uffb2\076\uffb2\100\uffb2\101\uffb2\001\002\000\034\023" +
    "\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\033\ufff9\035\ufff9" +
    "\036\ufff9\043\ufff9\044\ufff9\076\ufff9\100\ufff9\101\ufff9\001" +
    "\002\000\004\050\373\001\002\000\034\023\ufffa\026\ufffa" +
    "\027\ufffa\030\ufffa\031\ufffa\033\ufffa\035\ufffa\036\ufffa\043" +
    "\ufffa\044\ufffa\076\ufffa\100\ufffa\101\ufffa\001\002\000\012" +
    "\044\174\076\177\100\150\101\140\001\002\000\036\045" +
    "\376\055\203\057\213\060\207\061\211\062\202\063\214" +
    "\065\210\066\215\067\201\071\212\072\204\073\206\074" +
    "\216\001\002\000\004\042\377\001\002\000\032\023\144" +
    "\026\161\027\133\030\151\031\141\035\132\036\156\043" +
    "\ufffb\044\142\076\143\100\150\101\140\001\002\000\004" +
    "\043\u0101\001\002\000\034\023\uffb5\026\uffb5\027\uffb5\030" +
    "\uffb5\031\uffb5\033\uffb5\035\uffb5\036\uffb5\043\uffb5\044\uffb5" +
    "\076\uffb5\100\uffb5\101\uffb5\001\002\000\006\050\uffd2\053" +
    "\250\001\002\000\006\050\uffd2\053\250\001\002\000\004" +
    "\050\uffd7\001\002\000\004\050\uffd8\001\002\000\012\007" +
    "\uff78\010\uff78\011\uff78\043\uff78\001\002\000\004\043\u0108" +
    "\001\002\000\012\007\uff79\010\uff79\011\uff79\043\uff79\001" +
    "\002\000\004\045\u0116\001\002\000\006\042\u010e\052\u010f" +
    "\001\002\000\006\045\uff98\051\u010c\001\002\000\004\076" +
    "\u010b\001\002\000\004\045\uff97\001\002\000\032\023\144" +
    "\026\161\027\133\030\151\031\141\035\132\036\156\043" +
    "\ufffb\044\142\076\143\100\150\101\140\001\002\000\004" +
    "\017\u0110\001\002\000\004\042\u0111\001\002\000\032\023" +
    "\144\026\161\027\133\030\151\031\141\035\132\036\156" +
    "\043\ufffb\044\142\076\143\100\150\101\140\001\002\000" +
    "\004\043\u0113\001\002\000\012\007\uff76\010\uff76\011\uff76" +
    "\043\uff76\001\002\000\004\043\u0115\001\002\000\012\007" +
    "\uff77\010\uff77\011\uff77\043\uff77\001\002\000\006\042\uff75" +
    "\052\uff75\001\002\000\012\007\uff7a\010\uff7a\011\uff7a\043" +
    "\uff7a\001\002\000\004\014\uff80\001\002\000\004\014\uff7d" +
    "\001\002\000\004\002\uffab\001\002\000\006\014\uff81\076" +
    "\uff87\001\002\000\006\050\uff8c\051\u011d\001\002\000\004" +
    "\076\u0120\001\002\000\004\050\u011f\001\002\000\014\007" +
    "\uff9a\010\uff9a\011\uff9a\016\uff9a\043\uff9a\001\002\000\010" +
    "\045\uff8c\050\uff8c\051\u011d\001\002\000\006\045\uff8d\050" +
    "\uff8d\001\002\000\006\014\uff80\076\uff86\001\002\000\006" +
    "\015\u0124\075\116\001\002\000\004\044\u0125\001\002\000" +
    "\004\076\u0126\001\002\000\006\045\uff8c\051\u011d\001\002" +
    "\000\004\045\u0128\001\002\000\004\042\u0129\001\002\000" +
    "\032\023\144\026\161\027\133\030\151\031\141\035\132" +
    "\036\156\043\ufffb\044\142\076\143\100\150\101\140\001" +
    "\002\000\004\043\u012b\001\002\000\012\007\uff7c\010\uff7c" +
    "\011\uff7c\043\uff7c\001\002\000\012\007\105\010\106\011" +
    "\102\043\uffa0\001\002\000\012\007\105\010\106\011\102" +
    "\043\uffa5\001\002\000\012\007\105\010\106\011\102\043" +
    "\uffa4\001\002\000\004\076\u0134\001\002\000\012\007\105" +
    "\010\106\011\102\043\uffa1\001\002\000\012\007\105\010" +
    "\106\011\102\043\uffa7\001\002\000\012\007\105\010\106" +
    "\011\102\043\uffa6\001\002\000\012\007\105\010\106\011" +
    "\102\043\uffaa\001\002\000\006\050\uff8c\051\u011d\001\002" +
    "\000\004\050\u0136\001\002\000\014\007\uff99\010\uff99\011" +
    "\uff99\016\uff99\043\uff99\001\002\000\012\007\105\010\106" +
    "\011\102\043\uffa8\001\002\000\006\014\uff82\076\uff88\001" +
    "\002\000\004\002\001\001\002\000\006\050\uffe6\064\u013c" +
    "\001\002\000\004\050\u013f\001\002\000\004\075\u013d\001" +
    "\002\000\006\050\uffe6\064\u013c\001\002\000\004\050\uffe7" +
    "\001\002\000\006\005\uffe9\006\uffe9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013d\000\012\002\004\007\011\010\007\042\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\023\001\001\000\002\001" +
    "\001\000\006\010\013\042\012\001\001\000\002\001\001" +
    "\000\004\042\014\001\001\000\002\001\001\000\004\012" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\043\037\045\027" +
    "\046\040\047\034\050\031\051\030\052\035\057\032\001" +
    "\001\000\002\001\001\000\016\046\u012f\047\u012e\050\031" +
    "\051\u012c\052\035\057\u012d\001\001\000\010\050\113\052" +
    "\035\057\u012b\001\001\000\002\001\001\000\006\050\113" +
    "\052\u0116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\050\031\051\103\052\035\057\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\053\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\064\001\001\000\002\001\001\000\004\053\066\001\001" +
    "\000\002\001\001\000\004\053\070\001\001\000\002\001" +
    "\001\000\004\053\072\001\001\000\002\001\001\000\004" +
    "\053\074\001\001\000\002\001\001\000\004\053\076\001" +
    "\001\000\002\001\001\000\004\053\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\050\113\052\u0116\001" +
    "\001\000\010\050\113\052\035\057\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\050\113" +
    "\052\u0116\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\117\001\001\000\004\054\u0108\001\001\000\002" +
    "\001\001\000\056\003\u0106\004\151\005\134\006\164\013" +
    "\125\014\126\015\127\017\145\020\146\021\163\022\133" +
    "\023\156\025\136\026\135\027\157\030\153\031\124\032" +
    "\152\034\154\035\162\036\161\037\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\003\130\004\151\005" +
    "\134\006\164\013\125\014\126\015\127\017\145\020\146" +
    "\021\163\022\133\023\156\025\136\026\135\027\157\030" +
    "\153\031\124\032\152\034\154\035\162\036\161\037\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\004\371\006" +
    "\164\013\125\014\126\015\127\017\145\020\146\021\163" +
    "\022\133\023\156\025\136\026\135\027\157\030\153\031" +
    "\370\032\152\034\154\035\162\036\161\037\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\026\334\027\175\030\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\026\177\027\175" +
    "\030\174\001\001\000\010\026\243\027\175\030\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\026\242\027\175\030\174\001" +
    "\001\000\010\026\241\027\175\030\174\001\001\000\010" +
    "\026\240\027\175\030\174\001\001\000\010\026\237\027" +
    "\175\030\174\001\001\000\004\020\230\001\001\000\010" +
    "\026\226\027\175\030\174\001\001\000\010\026\225\027" +
    "\175\030\174\001\001\000\010\026\224\027\175\030\174" +
    "\001\001\000\010\026\223\027\175\030\174\001\001\000" +
    "\010\026\222\027\175\030\174\001\001\000\010\026\221" +
    "\027\175\030\174\001\001\000\010\026\220\027\175\030" +
    "\174\001\001\000\010\026\217\027\175\030\174\001\001" +
    "\000\010\026\216\027\175\030\174\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\003\233\004\151\005" +
    "\134\006\164\013\125\014\126\015\127\017\145\020\146" +
    "\021\163\022\133\023\156\025\136\026\135\027\157\030" +
    "\153\031\124\032\152\034\154\035\162\036\161\037\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\026" +
    "\135\027\236\030\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\255" +
    "\001\001\000\004\024\250\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\254\001\001\000\004\024\253" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\003\260\004\151\005\134" +
    "\006\164\013\125\014\126\015\127\017\145\020\146\021" +
    "\163\022\133\023\156\025\136\026\135\027\157\030\153" +
    "\031\124\032\152\034\154\035\162\036\161\037\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\026\264\027\175\030\174\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\026\270" +
    "\027\175\030\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\003\273\004\151\005\134\006\164\013\125" +
    "\014\126\015\127\017\145\020\146\021\163\022\133\023" +
    "\156\025\136\026\135\027\157\030\153\031\124\032\152" +
    "\034\154\035\162\036\161\037\144\001\001\000\002\001" +
    "\001\000\004\033\277\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\003\301\004\151\005" +
    "\134\006\164\013\125\014\126\015\127\017\145\020\146" +
    "\021\163\022\133\023\156\025\136\026\135\027\157\030" +
    "\153\031\124\032\152\034\154\035\162\036\161\037\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\026" +
    "\304\027\175\030\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\003\307\004\151\005\134\006\164\013" +
    "\125\014\126\015\127\017\145\020\146\021\163\022\133" +
    "\023\156\025\136\026\135\027\157\030\153\031\124\032" +
    "\152\034\154\035\162\036\161\037\144\001\001\000\002" +
    "\001\001\000\004\033\311\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\320\026\135\027\236\030\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\343\040\346\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\003\351\004\151\005\134\006\164\013\125" +
    "\014\126\015\127\017\145\020\146\021\163\022\133\023" +
    "\156\025\136\026\135\027\157\030\153\031\124\032\152" +
    "\034\154\035\162\036\161\037\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\354\001\001\000\002" +
    "\001\001\000\006\016\343\040\356\001\001\000\002\001" +
    "\001\000\056\003\360\004\151\005\134\006\164\013\125" +
    "\014\126\015\127\017\145\020\146\021\163\022\133\023" +
    "\156\025\136\026\135\027\157\030\153\031\124\032\152" +
    "\034\154\035\162\036\161\037\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\363\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\003\366\004\151\005" +
    "\134\006\164\013\125\014\126\015\127\017\145\020\146" +
    "\021\163\022\133\023\156\025\136\026\135\027\157\030" +
    "\153\031\124\032\152\034\154\035\162\036\161\037\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\026\374" +
    "\027\175\030\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\003\377\004\151\005\134\006\164\013\125" +
    "\014\126\015\127\017\145\020\146\021\163\022\133\023" +
    "\156\025\136\026\135\027\157\030\153\031\124\032\152" +
    "\034\154\035\162\036\161\037\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\u0104\001\001\000\004" +
    "\024\u0103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\u010c\001\001\000\002\001\001\000\056\003\u0113\004\151" +
    "\005\134\006\164\013\125\014\126\015\127\017\145\020" +
    "\146\021\163\022\133\023\156\025\136\026\135\027\157" +
    "\030\153\031\124\032\152\034\154\035\162\036\161\037" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\003\u0111\004\151\005\134\006\164\013\125\014\126\015" +
    "\127\017\145\020\146\021\163\022\133\023\156\025\136" +
    "\026\135\027\157\030\153\031\124\032\152\034\154\035" +
    "\162\036\161\037\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\u011d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\u0120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\u0126\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\003\u0129\004\151\005\134\006\164\013\125" +
    "\014\126\015\127\017\145\020\146\021\163\022\133\023" +
    "\156\025\136\026\135\027\157\030\153\031\124\032\152" +
    "\034\154\035\162\036\161\037\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\050\113\052\u0116\001\001" +
    "\000\010\050\113\052\035\057\u0136\001\001\000\006\050" +
    "\113\052\u0116\001\001\000\002\001\001\000\012\050\031" +
    "\051\u0131\052\035\057\u0130\001\001\000\006\050\113\052" +
    "\u0116\001\001\000\010\050\113\052\035\057\u0132\001\001" +
    "\000\006\050\113\052\u0116\001\001\000\004\044\u0134\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\050\113" +
    "\052\u0116\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\u013a\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\u013d\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserPHP$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserPHP$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserPHP$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error (Symbol s)
    {
        report_error("Error de sintaxis en linea: " + (s.left+1) +
                    " ,columna: "+(s.right+1)+" , simbolo: "+s.value, null);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        report_fatal_error("Error de sintaxis no recuperable en linea: " + (s.left+1) +
                    " ,columna: "+(s.right+1)+" , simbolo: "+s.value, null);
    }

    public static TablaSimbolos tabla = new TablaSimbolos();
    public static Simbolo simbolo;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserPHP$actions {
  private final ParserPHP parser;

  /** Constructor */
  CUP$ParserPHP$actions(ParserPHP parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserPHP$do_action(
    int                        CUP$ParserPHP$act_num,
    java_cup.runtime.lr_parser CUP$ParserPHP$parser,
    java.util.Stack            CUP$ParserPHP$stack,
    int                        CUP$ParserPHP$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserPHP$result;

      /* select the action based on the action number */
      switch (CUP$ParserPHP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // parametros_funciones ::= PARENTESIS_APERTURA variable_declaracion PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("parametros_funciones",43, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // funciones ::= visibilidad_fun FUNCTION IDENTIFICADOR PARENTESIS_APERTURA PARENTESIS_CIERRE DOS_PUNTOS VOID LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		
                System.out.println("Definicion de la funcion void sin parametros");
           
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("funciones",40, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-9)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // funciones ::= visibilidad_fun FUNCTION IDENTIFICADOR PARENTESIS_APERTURA PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		
                System.out.println("Definicion de la funcion sin parametros");
           
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("funciones",40, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-7)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // funciones ::= visibilidad_fun FUNCTION IDENTIFICADOR parametros_funciones DOS_PUNTOS VOID LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		
                System.out.println("Definicion de la funcion void");
           
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("funciones",40, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // funciones ::= visibilidad_fun FUNCTION IDENTIFICADOR parametros_funciones LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		
                System.out.println("Definicion de la funcion");
           
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("funciones",40, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-6)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // lista_funciones ::= lista_funciones funciones 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_funciones",45, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // lista_funciones ::= funciones 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_funciones",45, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // constructor ::= visibilidad_fun FUNCTION CONSTRUCT PARENTESIS_APERTURA VARIABLE clases_rec PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		
                System.out.println("Definicion del constructor");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("constructor",39, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-9)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // visibilidad_fun ::= PROTECTED FINAL 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("visibilidad_fun",38, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // visibilidad_fun ::= PRIVATE FINAL 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("visibilidad_fun",38, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // visibilidad_fun ::= PUBLIC FINAL 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("visibilidad_fun",38, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // visibilidad_fun ::= PROTECTED STATIC 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("visibilidad_fun",38, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // visibilidad_fun ::= PRIVATE STATIC 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("visibilidad_fun",38, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // visibilidad_fun ::= PUBLIC STATIC 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("visibilidad_fun",38, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // visibilidad_fun ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("visibilidad_fun",38, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // visibilidad_fun ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("visibilidad_fun",38, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // visibilidad_fun ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("visibilidad_fun",38, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // visibilidad_var ::= PROTECTED STATIC 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("visibilidad_var",37, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // visibilidad_var ::= PRIVATE STATIC 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("visibilidad_var",37, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // visibilidad_var ::= PUBLIC STATIC 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("visibilidad_var",37, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // visibilidad_var ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("visibilidad_var",37, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // visibilidad_var ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("visibilidad_var",37, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // visibilidad_var ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("visibilidad_var",37, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // clases_rec ::= 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("clases_rec",34, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // clases_rec ::= COMA VARIABLE clases_rec 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)).value;
		
    parser.simbolo = new Simbolo(variable.toString(), "", "", "metodo", false);
        if(parser.tabla.agregar(variable.toString(), parser.simbolo)) {
            System.out.println("Variable agregada " + variable);
        } else {
            System.out.println("Variable NO agregada " + variable);
        }

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("clases_rec",34, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // rec_constantes ::= 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("rec_constantes",41, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // rec_constantes ::= CONST CONSTANTE OPERADOR_ASIGNACION tipo_bool PUNTO_COMA rec_constantes 
            {
              Object RESULT =null;
		int constanteleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-4)).left;
		int constanteright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-4)).right;
		Object constante = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-4)).value;
		int booleanoleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).left;
		int booleanoright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).right;
		Object booleano = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).value;
		
                    parser.simbolo = new Simbolo(constante.toString(), "bool", (booleano != null ? booleano.toString() : "null"), "metodo", true);
                        if(parser.tabla.agregar(constante.toString(), parser.simbolo)) {
                            System.out.println("Constante agregada " + constante + " con valor " + booleano.toString());
                        } else {
                            System.out.println("Constante NO agregada " + constante);
                        }

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("rec_constantes",41, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // rec_constantes ::= CONST CONSTANTE OPERADOR_ASIGNACION NUMERO_FLOTANTE PUNTO_COMA rec_constantes 
            {
              Object RESULT =null;
		int constanteleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-4)).left;
		int constanteright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-4)).right;
		Object constante = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-4)).value;
		int numero_flotanteleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).left;
		int numero_flotanteright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).right;
		Object numero_flotante = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).value;
		
                    parser.simbolo = new Simbolo(constante.toString(), "float", numero_flotante.toString(), "metodo", true);
                        if(parser.tabla.agregar(constante.toString(), parser.simbolo)) {
                            System.out.println("Constante agregada " + constante);
                        } else {
                            System.out.println("Constante NO agregada " + constante);
                        }

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("rec_constantes",41, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // rec_constantes ::= CONST CONSTANTE OPERADOR_ASIGNACION NUMERO_ENTERO PUNTO_COMA rec_constantes 
            {
              Object RESULT =null;
		int constanteleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-4)).left;
		int constanteright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-4)).right;
		Object constante = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-4)).value;
		int numero_enteroleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).left;
		int numero_enteroright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).right;
		Object numero_entero = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).value;
		
                    parser.simbolo = new Simbolo(constante.toString(), "int", numero_entero.toString(), "metodo", true);
                        if(parser.tabla.agregar(constante.toString(), parser.simbolo)) {
                            System.out.println("Constante agregada " + constante);
                        } else {
                            System.out.println("Constante NO agregada " + constante);
                        }

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("rec_constantes",41, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // rec_constantes ::= CONST CONSTANTE OPERADOR_ASIGNACION CADENA PUNTO_COMA rec_constantes 
            {
              Object RESULT =null;
		int constanteleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-4)).left;
		int constanteright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-4)).right;
		Object constante = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-4)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).value;
		
                    parser.simbolo = new Simbolo(constante.toString(), "string", cadena.toString(), "metodo", true);
                        if(parser.tabla.agregar(constante.toString(), parser.simbolo)) {
                            System.out.println("Constante agregada " + constante);
                        } else {
                            System.out.println("Constante NO agregada " + constante);
                        }

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("rec_constantes",41, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // propiedad_constante ::= CONST CONSTANTE OPERADOR_ASIGNACION tipo_bool PUNTO_COMA rec_constantes 
            {
              Object RESULT =null;
		int constanteleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-4)).left;
		int constanteright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-4)).right;
		Object constante = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-4)).value;
		int booleanoleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).left;
		int booleanoright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).right;
		Object booleano = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).value;
		
                            System.out.println("Definicion de la propiedad en constantes de clase");

                            parser.simbolo = new Simbolo(constante.toString(), "bool", (booleano != null ? booleano.toString() : "null"), "metodo", true);
                                if(parser.tabla.agregar(constante.toString(), parser.simbolo)) {
                                    System.out.println("Constante agregada " + constante + " con valor " + booleano.toString());
                                } else {
                                    System.out.println("Constante NO agregada " + constante);
                                }
                     
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("propiedad_constante",36, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // propiedad_constante ::= CONST CONSTANTE OPERADOR_ASIGNACION NUMERO_FLOTANTE PUNTO_COMA rec_constantes 
            {
              Object RESULT =null;
		int constanteleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-4)).left;
		int constanteright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-4)).right;
		Object constante = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-4)).value;
		int numero_flotanteleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).left;
		int numero_flotanteright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).right;
		Object numero_flotante = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).value;
		
                            System.out.println("Definicion de la propiedad en constantes de clase");

                            parser.simbolo = new Simbolo(constante.toString(), "float", numero_flotante.toString(), "metodo", true);
                                if(parser.tabla.agregar(constante.toString(), parser.simbolo)) {
                                    System.out.println("Constante agregada " + constante);
                                } else {
                                    System.out.println("Constante NO agregada " + constante);
                                }
                     
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("propiedad_constante",36, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // propiedad_constante ::= CONST CONSTANTE OPERADOR_ASIGNACION NUMERO_ENTERO PUNTO_COMA rec_constantes 
            {
              Object RESULT =null;
		int constanteleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-4)).left;
		int constanteright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-4)).right;
		Object constante = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-4)).value;
		int numero_enteroleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).left;
		int numero_enteroright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).right;
		Object numero_entero = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).value;
		
                            System.out.println("Definicion de la propiedad en constantes de clase");

                            parser.simbolo = new Simbolo(constante.toString(), "int", numero_entero.toString(), "metodo", true);
                                if(parser.tabla.agregar(constante.toString(), parser.simbolo)) {
                                    System.out.println("Constante agregada " + constante);
                                } else {
                                    System.out.println("Constante NO agregada " + constante);
                                }
                     
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("propiedad_constante",36, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // propiedad_constante ::= CONST CONSTANTE OPERADOR_ASIGNACION CADENA PUNTO_COMA rec_constantes 
            {
              Object RESULT =null;
		int constanteleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-4)).left;
		int constanteright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-4)).right;
		Object constante = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-4)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).value;
		
                            System.out.println("Definicion de la propiedad en constantes de clase");

                            parser.simbolo = new Simbolo(constante.toString(), "string", cadena.toString(), "metodo", true);
                                if(parser.tabla.agregar(constante.toString(), parser.simbolo)) {
                                    System.out.println("Constante agregada " + constante);
                                } else {
                                    System.out.println("Constante NO agregada " + constante);
                                }
                     
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("propiedad_constante",36, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-5)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // variable_declaracion ::= VARIABLE COMA variable_declaracion 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).value;
		
                            parser.simbolo = new Simbolo(variable.toString(), "", "", "metodo", false);
                                if(parser.tabla.agregar(variable.toString(), parser.simbolo)) {
                                    System.out.println("Variable agregada " + variable);
                                } else {
                                    System.out.println("Variable NO agregada " + variable);
                                }
                        
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("variable_declaracion",42, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // variable_declaracion ::= VARIABLE 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.peek()).value;
		
                            parser.simbolo = new Simbolo(variable.toString(), "", "", "metodo", false);
                                if(parser.tabla.agregar(variable.toString(), parser.simbolo)) {
                                    System.out.println("Variable agregada " + variable);
                                } else {
                                    System.out.println("Variable NO agregada " + variable);
                                }
                        
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("variable_declaracion",42, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // propiedad_variable ::= propiedad_variable visibilidad_var VARIABLE clases_rec PUNTO_COMA 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).value;
		
                          System.out.println("Definicion de otra propiedad en variables de clase");

                          parser.simbolo = new Simbolo(variable.toString(), "", "", "metodo", false);
                            if(parser.tabla.agregar(variable.toString(), parser.simbolo)) {
                                System.out.println("Variable agregada " + variable);
                            } else {
                                System.out.println("Variable NO agregada " + variable);
                            }
                      
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("propiedad_variable",35, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-4)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // propiedad_variable ::= visibilidad_var VARIABLE clases_rec PUNTO_COMA 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).value;
		
    System.out.println("Definicion de la propiedad en variables de clase");

    parser.simbolo = new Simbolo(variable.toString(), "", "", "metodo", false);
        if(parser.tabla.agregar(variable.toString(), parser.simbolo)) {
            System.out.println("Variable agregada " + variable);
        } else {
            System.out.println("Variable NO agregada " + variable);
        }

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("propiedad_variable",35, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // cuerpo_clase ::= 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",33, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // cuerpo_clase ::= lista_funciones 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",33, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // cuerpo_clase ::= constructor 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",33, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // cuerpo_clase ::= propiedad_constante 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",33, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // cuerpo_clase ::= propiedad_variable 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",33, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // cuerpo_clase ::= constructor lista_funciones 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",33, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // cuerpo_clase ::= propiedad_variable propiedad_constante 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",33, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // cuerpo_clase ::= propiedad_constante constructor 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",33, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // cuerpo_clase ::= propiedad_constante lista_funciones 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",33, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // cuerpo_clase ::= propiedad_variable lista_funciones 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",33, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // cuerpo_clase ::= propiedad_variable constructor 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",33, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // cuerpo_clase ::= propiedad_variable propiedad_constante constructor 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",33, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // cuerpo_clase ::= propiedad_variable propiedad_constante lista_funciones 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",33, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // cuerpo_clase ::= propiedad_variable constructor lista_funciones 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",33, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // cuerpo_clase ::= propiedad_constante constructor lista_funciones 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",33, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cuerpo_clase ::= propiedad_variable propiedad_constante constructor lista_funciones 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",33, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // definicion_clases ::= CLASES IDENTIFICADOR LLAVE_APERTURA cuerpo_clase LLAVE_CIERRE 
            {
              Object RESULT =null;
		 System.out.println("Definicion de clase"); 
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("definicion_clases",32, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-4)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // rec_switch ::= 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("rec_switch",31, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // rec_switch ::= CASE val_switch DOS_PUNTOS sentencias BREAK PUNTO_COMA rec_switch 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("rec_switch",31, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-6)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // val_switch ::= tipo_bool 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("val_switch",30, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // val_switch ::= NUMERO_FLOTANTE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("val_switch",30, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // val_switch ::= NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("val_switch",30, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // val_switch ::= CADENA 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("val_switch",30, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // switch_sentencia ::= SWITCH PARENTESIS_APERTURA VARIABLE PARENTESIS_CIERRE LLAVE_APERTURA CASE val_switch DOS_PUNTOS sentencias BREAK PUNTO_COMA rec_switch DEFAULT DOS_PUNTOS sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		 
                        System.out.println("Sentencia switch procesada"); 
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("switch_sentencia",29, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-15)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // for_sentencia ::= FOR PARENTESIS_APERTURA dec_entero PUNTO_COMA expresion PUNTO_COMA asignacion PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		 System.out.println("Sentencia for procesada"); 
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("for_sentencia",28, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-10)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // do_while_sentencia ::= DO LLAVE_APERTURA sentencias LLAVE_CIERRE WHILE PARENTESIS_APERTURA expresion PARENTESIS_CIERRE PUNTO_COMA 
            {
              Object RESULT =null;
		 System.out.println("Sentencia while procesada"); 
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("do_while_sentencia",27, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // while_sentencia ::= WHILE PARENTESIS_APERTURA expresion PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		 System.out.println("Sentencia while procesada"); 
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("while_sentencia",26, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-6)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ifbucle ::= ELSEIF PARENTESIS_APERTURA expresion PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE ifbucle 
            {
              Object RESULT =null;
		 System.out.println("Sentencia elseif procesada"); 
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("ifbucle",25, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-7)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ifbucle ::= ELSE LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		 System.out.println("Sentencia else procesada"); 
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("ifbucle",25, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // if_sentencia ::= IF PARENTESIS_APERTURA expresion PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE ifbucle 
            {
              Object RESULT =null;
		 System.out.println("Sentencia if procesada"); 
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("if_sentencia",24, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-7)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // estructura_control ::= switch_sentencia 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("estructura_control",23, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // estructura_control ::= for_sentencia 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("estructura_control",23, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // estructura_control ::= do_while_sentencia 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("estructura_control",23, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // estructura_control ::= while_sentencia 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("estructura_control",23, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // estructura_control ::= if_sentencia 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("estructura_control",23, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operacion_logica ::= expresion OPERADOR_LOGICO_OR expresion 
            {
              Object RESULT =null;
		
                System.out.println("Operación lógica OR realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",22, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operacion_logica ::= expresion OPERADOR_LOGICO_AND expresion 
            {
              Object RESULT =null;
		
                System.out.println("Operación lógica AND realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",22, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operacion_logica ::= expresion OPERADOR_DESIGUALDAD expresion 
            {
              Object RESULT =null;
		
                System.out.println("Comparación de desigualdad realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",22, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operacion_logica ::= expresion OPERADOR_IGUALDAD expresion 
            {
              Object RESULT =null;
		
                System.out.println("Comparación de igualdad realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",22, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operacion_logica ::= expresion MENOR_IGUAL expresion 
            {
              Object RESULT =null;
		
                System.out.println("Comparación menor o igual realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",22, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operacion_logica ::= expresion MAYOR_IGUAL expresion 
            {
              Object RESULT =null;
		
                System.out.println("Comparación mayor o igual realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",22, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operacion_logica ::= expresion MENOR expresion 
            {
              Object RESULT =null;
		
                System.out.println("Comparación menor realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",22, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operacion_logica ::= expresion MAYOR expresion 
            {
              Object RESULT =null;
		
                System.out.println("Comparación mayor realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",22, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operacion_aritmetica ::= expresion OPERADOR_MODULO expresion 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.peek()).value;
		
                RESULT = Double.parseDouble(exp1.toString()) % Double.parseDouble(exp2.toString());
                System.out.println("Operación módulo realizada: " + RESULT);
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",21, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operacion_aritmetica ::= expresion OPERADOR_DIVISION expresion 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.peek()).value;
		
                RESULT = Double.parseDouble(exp1.toString()) / Double.parseDouble(exp2.toString());
                System.out.println("División realizada: " + RESULT);
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",21, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operacion_aritmetica ::= expresion OPERADOR_MULTIPLICACION expresion 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.peek()).value;
		
                RESULT = Double.parseDouble(exp1.toString()) * Double.parseDouble(exp2.toString());
                System.out.println("Multiplicación realizada: " + RESULT);
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",21, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operacion_aritmetica ::= expresion OPERADOR_RESTA expresion 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.peek()).value;
		
                RESULT = Double.parseDouble(exp1.toString()) - Double.parseDouble(exp2.toString());
                System.out.println("Resta realizada: " + RESULT);
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",21, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operacion_aritmetica ::= expresion OPERADOR_SUMA expresion 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.peek()).value;
		
                RESULT = Double.parseDouble(exp1.toString()) + Double.parseDouble(exp2.toString());
                System.out.println("Suma realizada: " + RESULT);
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",21, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= PARENTESIS_APERTURA expresion PARENTESIS_CIERRE 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)).value;
		
                RESULT = exp;
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= VARIABLE 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.peek()).value;
		
                Simbolo simboloVar = parser.tabla.obtenerSimbolo(variable.toString());
                if (simboloVar != null) {
                    RESULT = simboloVar.getValor();
                } else {
                    System.out.println("Error: Variable no definida " + variable);
                }
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= NUMERO_FLOTANTE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.peek()).value;
		
                RESULT = f;
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= NUMERO_ENTERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.peek()).value;
		
                RESULT = n;
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= operacion_logica 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= operacion_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // scanner ::= VARIABLE OPERADOR_ASIGNACION TRIM PARENTESIS_APERTURA FGETS PARENTESIS_APERTURA STDIN PARENTESIS_CIERRE PARENTESIS_CIERRE 
            {
              Object RESULT =null;
		
                System.out.println("Lectura de entrada de consola");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("scanner",19, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // rec_impresiones ::= 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("rec_impresiones",18, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // rec_impresiones ::= PUNTO CADENA rec_impresiones 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("rec_impresiones",18, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // rec_impresiones ::= PUNTO VARIABLE rec_impresiones 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("rec_impresiones",18, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // impresiones ::= PRINT CADENA rec_impresiones 
            {
              Object RESULT =null;
		
                System.out.println("Impresion tipo print");
             
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("impresiones",17, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // impresiones ::= PRINT VARIABLE rec_impresiones 
            {
              Object RESULT =null;
		
                System.out.println("Impresion tipo print");
             
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("impresiones",17, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // impresiones ::= ECHO CADENA rec_impresiones 
            {
              Object RESULT =null;
		
                System.out.println("Impresion tipo echo");
             
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("impresiones",17, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // impresiones ::= ECHO VARIABLE rec_impresiones 
            {
              Object RESULT =null;
		
                System.out.println("Impresion tipo echo");
             
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("impresiones",17, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // auto_valuacion ::= VARIABLE OPERADOR_RESTA OPERADOR_RESTA 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).value;
		
                System.out.println("Autoresta - 1 realizada");

                Simbolo simboloVar = parser.tabla.obtenerSimbolo(variable.toString());
                if (simboloVar != null && (simboloVar.getTipo().equals("int") || simboloVar.getTipo().equals("float"))) {
                    double valorActual = Double.parseDouble(simboloVar.getValor());
                    valorActual -= 1;
                    // Si el tipo es int y el resultado es entero, convertir a int. Caso contrario, mantener double.
                    String nuevoValor = (simboloVar.getTipo().equals("int") && valorActual == Math.floor(valorActual))
                                        ? String.valueOf((int) valorActual)
                                        : String.valueOf(valorActual);
                    simboloVar.setValor(nuevoValor);
                    parser.tabla.modificar(variable.toString(), simboloVar);
                    System.out.println("Autoresta realizada en variable " + variable + " Nuevo valor: " + nuevoValor);
                } else {
                    System.out.println("Error: Autoresta solo permitida en variables de tipo 'int' o 'float' para " + variable);
                }
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("auto_valuacion",16, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // auto_valuacion ::= VARIABLE OPERADOR_SUMA OPERADOR_SUMA 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).value;
		
                System.out.println("Autosuma + 1 realizada");

                 Simbolo simboloVar = parser.tabla.obtenerSimbolo(variable.toString());
                if (simboloVar != null && (simboloVar.getTipo().equals("int") || simboloVar.getTipo().equals("float"))) {
                    double valorActual = Double.parseDouble(simboloVar.getValor());
                    valorActual += 1;
                    // Si el tipo es int y el resultado es entero, convertir a int. Caso contrario, mantener double.
                    String nuevoValor = (simboloVar.getTipo().equals("int") && valorActual == Math.floor(valorActual))
                                        ? String.valueOf((int) valorActual)
                                        : String.valueOf(valorActual);
                    simboloVar.setValor(nuevoValor);
                    parser.tabla.modificar(variable.toString(), simboloVar);
                    System.out.println("Autosuma realizada en variable " + variable + " Nuevo valor: " + nuevoValor);
                } else {
                    System.out.println("Error: Autosuma solo permitida en variables de tipo 'int' o 'float' para " + variable);
                }
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("auto_valuacion",16, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // asignacion_simple ::= VARIABLE OPERADOR_ASIGNACION CONSTANTE 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).value;
		int constanteleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).left;
		int constanteright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).right;
		Object constante = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.peek()).value;
		
                System.out.println("Asignacion simple realizada");

                Simbolo simboloVar1 = parser.tabla.obtenerSimbolo(variable.toString());
                Simbolo simboloVar2 = parser.tabla.obtenerSimbolo(constante.toString());
                simboloVar2.setConstante(false);
                if (simboloVar1.getTipo() == simboloVar2.getTipo()) {
                    parser.tabla.modificar(variable.toString(), simboloVar2);
                    System.out.println("Variable modificada " + variable + " con contenido de: " + constante);
                } else if (simboloVar1.getTipo().equals("") && !simboloVar2.getTipo().equals("")) {
                    parser.tabla.modificar(variable.toString(), simboloVar2);
                    System.out.println("Variable modificada " + variable + " con contenido de: " + constante);
                } else {
                    System.out.println("No se pudo asignar " + variable + " a " + constante + " , por diferencia de tipos");
                }
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("asignacion_simple",15, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // asignacion_simple ::= VARIABLE OPERADOR_ASIGNACION VARIABLE 
            {
              Object RESULT =null;
		int variable1left = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).left;
		int variable1right = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).right;
		Object variable1 = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).value;
		int variable2left = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).left;
		int variable2right = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).right;
		Object variable2 = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.peek()).value;
		
                System.out.println("Asignacion simple realizada");

                Simbolo simboloVar1 = parser.tabla.obtenerSimbolo(variable1.toString());
                Simbolo simboloVar2 = parser.tabla.obtenerSimbolo(variable2.toString());
                if (simboloVar1.getTipo() == simboloVar2.getTipo()) {
                    parser.tabla.modificar(variable1.toString(), simboloVar2);
                    System.out.println("Variable modificada " + variable1 + " con contenido de: " + variable2);
                } else if (simboloVar1.getTipo().equals("") && !simboloVar2.getTipo().equals("")) {
                    parser.tabla.modificar(variable1.toString(), simboloVar2);
                    System.out.println("Variable modificada " + variable1 + " con contenido de: " + variable2);
                } else {
                    System.out.println("No se pudo asignar " + variable1 + " a " + variable2 + " , por diferencia de tipos");
                }
                
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("asignacion_simple",15, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // asignacion ::= VARIABLE OPERADOR_ASIGNACION operacion_aritmetica 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).value;
		int resultadoleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).left;
		int resultadoright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).right;
		Object resultado = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.peek()).value;
		
                System.out.println("Asignacion realizada");

                Simbolo simboloVar = parser.tabla.obtenerSimbolo(variable.toString());
                if (simboloVar != null && (simboloVar.getTipo().equals("int") || simboloVar.getTipo().equals("float"))) {
                    simboloVar.setValor(resultado.toString());
                    parser.tabla.modificar(variable.toString(), simboloVar);
                    System.out.println("Asignación realizada: " + variable + " = " + resultado);
                } else {
                    System.out.println("Error: Asignación solo permitida en variables de tipo 'int' o 'float' para " + variable);
                }
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // dec_cadena ::= VARIABLE OPERADOR_ASIGNACION CADENA 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.peek()).value;
		
                System.out.println("Declaracion de cadena");

                parser.simbolo = new Simbolo(variable.toString(), "string", cadena.toString(), "metodo", false);
                    if(parser.tabla.agregar(variable.toString(), parser.simbolo)) {
                        System.out.println("Variable agregada " + variable + " con valor: " + cadena.toString());
                    } else {
                        Simbolo simboloBuscado = parser.tabla.obtenerSimbolo(variable.toString());
                            if (simboloBuscado.getTipo().equals("") || simboloBuscado.getTipo().equals("string")) {
                                parser.tabla.modificar(variable.toString(), parser.simbolo);
                                System.out.println("Variable modificada " + variable + " con valor: " + cadena.toString());
                            } else {
                                System.out.println("Variable NO agregada o modificada " + variable);
                            } 
                    }
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("dec_cadena",13, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipo_bool ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = "false"; 
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("tipo_bool",12, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipo_bool ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = "true"; 
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("tipo_bool",12, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // dec_booleano ::= VARIABLE OPERADOR_ASIGNACION tipo_bool 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).value;
		int booleanoleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).left;
		int booleanoright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).right;
		Object booleano = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.peek()).value;
		 
                System.out.println("Declaracion de booleano"); 

                parser.simbolo = new Simbolo(variable.toString(), "bool", (booleano != null ? booleano.toString() : "null"), "metodo", false); 
                    if(parser.tabla.agregar(variable.toString(), parser.simbolo)) { 
                        System.out.println("Variable agregada " + variable + " con valor " + booleano.toString()); 
                    } else { 
                        Simbolo simboloBuscado = parser.tabla.obtenerSimbolo(variable.toString());
                            if (simboloBuscado.getTipo().equals("") || simboloBuscado.getTipo().equals("bool")) {
                                parser.tabla.modificar(variable.toString(), parser.simbolo);
                                System.out.println("Variable modificada " + variable + " con valor: " + booleano.toString());
                            } else {
                                System.out.println("Variable NO agregada o modificada " + variable);
                            } 
                    } 
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("dec_booleano",11, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // dec_flotante ::= VARIABLE OPERADOR_ASIGNACION NUMERO_FLOTANTE 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).value;
		int numero_flotanteleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).left;
		int numero_flotanteright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).right;
		Object numero_flotante = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.peek()).value;
		
                System.out.println("Declaracion de numero flotante");

                parser.simbolo = new Simbolo(variable.toString(), "float", numero_flotante.toString(), "metodo", false);
                    if(parser.tabla.agregar(variable.toString(), parser.simbolo)) {
                        System.out.println("Variable agregada " + variable + " con valor: " + numero_flotante.toString());
                    } else {
                        Simbolo simboloBuscado = parser.tabla.obtenerSimbolo(variable.toString());
                        if (simboloBuscado.getTipo().equals("") || simboloBuscado.getTipo().equals("float")) {
                            parser.tabla.modificar(variable.toString(), parser.simbolo);
                            System.out.println("Variable modificada " + variable + " con valor: " + numero_flotante.toString());
                        } else {
                            System.out.println("Variable NO agregada o modificada " + variable);
                        }
                    }
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("dec_flotante",10, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // dec_entero ::= VARIABLE OPERADOR_ASIGNACION NUMERO_ENTERO 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).value;
		int numero_enteroleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).left;
		int numero_enteroright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()).right;
		Object numero_entero = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.peek()).value;
		
                System.out.println("Declaracion de numero entero");

                parser.simbolo = new Simbolo(variable.toString(), "int", numero_entero.toString(), "metodo", false);
                    if(parser.tabla.agregar(variable.toString(), parser.simbolo)) {
                        System.out.println("Variable agregada " + variable + " con valor: " + numero_entero.toString());
                    } else {
                        Simbolo simboloBuscado = parser.tabla.obtenerSimbolo(variable.toString());
                        if (simboloBuscado.getTipo().equals("") || simboloBuscado.getTipo().equals("int")) {
                            parser.tabla.modificar(variable.toString(), parser.simbolo);
                            System.out.println("Variable modificada " + variable + " con valor: " + numero_entero.toString());
                        } else {
                            System.out.println("Variable NO agregada o modificada " + variable);
                        }
                    } 
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("dec_entero",9, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // importar_rec ::= 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("importar_rec",8, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // importar_rec ::= BARRA_INVERSA IDENTIFICADOR importar_rec 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("importar_rec",8, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // pakage_rec ::= 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("pakage_rec",7, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // pakage_rec ::= BARRA_INVERSA IDENTIFICADOR pakage_rec 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("pakage_rec",7, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // importar ::= USE IDENTIFICADOR importar_rec PUNTO_COMA 
            {
              Object RESULT =null;
		 
                System.out.println("Declaracion de importar"); 
          
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("importar",6, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // pakage ::= NAMESPACE IDENTIFICADOR pakage_rec PUNTO_COMA 
            {
              Object RESULT =null;
		 
                System.out.println("Declaracion de pakage"); 
          
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("pakage",5, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lista_declaraciones ::= scanner 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",4, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista_declaraciones ::= impresiones 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",4, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista_declaraciones ::= auto_valuacion 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",4, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista_declaraciones ::= asignacion_simple 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",4, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lista_declaraciones ::= asignacion 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",4, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista_declaraciones ::= dec_cadena 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",4, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_declaraciones ::= dec_booleano 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",4, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_declaraciones ::= dec_flotante 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",4, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_declaraciones ::= dec_entero 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",4, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= PARENTESIS_APERTURA expresion PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= operacion_logica 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= operacion_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= lista_declaraciones 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_sentencias ::= estructura_control 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_sentencias",3, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista_sentencias ::= sentencia PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_sentencias",3, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_sentencias ::= lista_sentencias estructura_control 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_sentencias",3, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_sentencias ::= lista_sentencias sentencia PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_sentencias",3, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencias ::= 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencias",1, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencias ::= lista_sentencias 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencias",1, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa ::= definicion_clases 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= importar definicion_clases 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= pakage definicion_clases 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= pakage importar definicion_clases 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)).value;
		RESULT = start_val;
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserPHP$parser.done_parsing();
          return CUP$ParserPHP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

