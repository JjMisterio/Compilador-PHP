/* 
VASQUEZ DENIZ ROBERTO
ESTRADA RAMIREZ JESUS ISAAC
PUENTES VEGA ANGEL DANIEL
CORTES UBALDO HAYDEE JOSSELYN
LENGUAJE PHP
*/

package act_9_semantico;

import java_cup.runtime.*;

parser code
{:
    public void syntax_error (Symbol s)
    {
        report_error("Error de sintaxis en linea: " + (s.left+1) +
                    " ,columna: "+(s.right+1)+" , simbolo: "+s.value, null);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        report_fatal_error("Error de sintaxis no recuperable en linea: " + (s.left+1) +
                    " ,columna: "+(s.right+1)+" , simbolo: "+s.value, null);
    }

    public static TablaSimbolos tabla = new TablaSimbolos();
    public static Simbolo simbolo;
:};

/*SIMBOLOS TERMINALES*/
terminal NAMESPACE, USE, CLASES, PUBLIC, PRIVATE, PROTECTED, STATIC, FINAL, FUNCTION, CONSTRUCT, CONST, VOID, OR, TRUE, FALSE, IF, ELSEIF, ELSE, FOR, WHILE, DO, SWITCH, CASE, BREAK, DEFAULT, ECHO, PRINT, TRIM, FGETS, STDIN;
terminal LLAVE_APERTURA, LLAVE_CIERRE, PARENTESIS_APERTURA, PARENTESIS_CIERRE, CORCHETE_APERTURA, CORCHETE_CIERRE, PUNTO_COMA, COMA, DOS_PUNTOS, PUNTO, OPERADOR_ASIGNACION, OPERADOR_IGUALDAD, OPERADOR_IDENTIDAD, OPERADOR_DESIGUALDAD, OPERADOR_SUMA, OPERADOR_RESTA, OPERADOR_MULTIPLICACION, OPERADOR_DIVISION, BARRA_INVERSA, OPERADOR_MODULO, OPERADOR_LOGICO_AND, OPERADOR_LOGICO_OR, OPERADOR_LOGICO_NOT, MAYOR, MENOR, MAYOR_IGUAL, MENOR_IGUAL;
terminal IDENTIFICADOR, VARIABLE, CONSTANTE, NUMERO_ENTERO, NUMERO_FLOTANTE;
terminal VARIABLE_INVALIDO;
terminal COMENTARIO_LINEA, COMENTARIO_BLOQUE, CADENA;

/*SIMBOLOS NO TERMINALES*/
non terminal programa, sentencias, sentencia, lista_sentencias, lista_declaraciones, pakage, importar, pakage_rec, importar_rec, dec_entero, dec_flotante, dec_booleano, tipo_bool, dec_cadena, asignacion, asignacion_simple, auto_valuacion, impresiones, rec_impresiones, scanner, expresion, operacion_aritmetica, operacion_logica, estructura_control, if_sentencia, ifbucle, while_sentencia, do_while_sentencia, for_sentencia, switch_sentencia, val_switch, rec_switch, definicion_clases, cuerpo_clase, clases_rec, propiedad_variable, propiedad_constante, visibilidad_var, visibilidad_fun, constructor, funciones, rec_constantes, variable_declaracion, parametros_funciones,funciones_sin, lista_funciones;

/*DECLARACIÓN DE PRECEDENCIA Y ASOCIATIVIDAD*/
precedence left OPERADOR_LOGICO_OR;
precedence left OPERADOR_LOGICO_AND;
precedence left OPERADOR_IGUALDAD, OPERADOR_DESIGUALDAD;
precedence left MAYOR, MENOR, MAYOR_IGUAL, MENOR_IGUAL;
precedence left OPERADOR_SUMA, OPERADOR_RESTA;
precedence left OPERADOR_MULTIPLICACION, OPERADOR_DIVISION, OPERADOR_MODULO;

/*REGLAS GRAMATICALES*/

/* Permitir múltiples sentencias separadas por punto y coma */
start with programa;

/* Regla inicial que obliga al orden pakage, importar, definicion_clases */
programa ::= pakage importar definicion_clases
           | pakage definicion_clases
           | importar definicion_clases
           | definicion_clases;

/* La regla 'sentencias' permite que haya una o más sentencias separadas por punto y coma */
sentencias::= lista_sentencias
            | /* vacío */ ;

lista_sentencias::= lista_sentencias sentencia PUNTO_COMA
                  | lista_sentencias estructura_control
                  | sentencia PUNTO_COMA
                  | estructura_control;

sentencia::= lista_declaraciones
           | operacion_aritmetica
           | operacion_logica
           | PARENTESIS_APERTURA expresion PARENTESIS_CIERRE;

lista_declaraciones::= dec_entero 
                    | dec_flotante 
                    | dec_booleano 
                    | dec_cadena
                    | asignacion
                    | asignacion_simple
                    | auto_valuacion
                    | impresiones
                    | scanner;

/* Reglas para importaciones */
pakage::= NAMESPACE IDENTIFICADOR pakage_rec PUNTO_COMA {: 
                System.out.println("Declaracion de pakage"); 
          :};
importar::= USE IDENTIFICADOR importar_rec PUNTO_COMA {: 
                System.out.println("Declaracion de importar"); 
          :};
pakage_rec::= BARRA_INVERSA IDENTIFICADOR pakage_rec |;
importar_rec::= BARRA_INVERSA IDENTIFICADOR importar_rec |;

/* Reglas para declaraciones */
dec_entero::= VARIABLE:variable OPERADOR_ASIGNACION NUMERO_ENTERO:numero_entero {:
                System.out.println("Declaracion de numero entero");

                parser.simbolo = new Simbolo(variable.toString(), "int", numero_entero.toString(), "metodo", false);
                    if(parser.tabla.agregar(variable.toString(), parser.simbolo)) {
                        System.out.println("Variable agregada " + variable + " con valor: " + numero_entero.toString());
                    } else {
                        Simbolo simboloBuscado = parser.tabla.obtenerSimbolo(variable.toString());
                        if (simboloBuscado.getTipo().equals("") || simboloBuscado.getTipo().equals("int")) {
                            parser.tabla.modificar(variable.toString(), parser.simbolo);
                            System.out.println("Variable modificada " + variable + " con valor: " + numero_entero.toString());
                        } else {
                            System.out.println("Variable NO agregada o modificada " + variable);
                        }
                    } 
            :};
dec_flotante::= VARIABLE:variable OPERADOR_ASIGNACION NUMERO_FLOTANTE:numero_flotante {:
                System.out.println("Declaracion de numero flotante");

                parser.simbolo = new Simbolo(variable.toString(), "float", numero_flotante.toString(), "metodo", false);
                    if(parser.tabla.agregar(variable.toString(), parser.simbolo)) {
                        System.out.println("Variable agregada " + variable + " con valor: " + numero_flotante.toString());
                    } else {
                        Simbolo simboloBuscado = parser.tabla.obtenerSimbolo(variable.toString());
                        if (simboloBuscado.getTipo().equals("") || simboloBuscado.getTipo().equals("float")) {
                            parser.tabla.modificar(variable.toString(), parser.simbolo);
                            System.out.println("Variable modificada " + variable + " con valor: " + numero_flotante.toString());
                        } else {
                            System.out.println("Variable NO agregada o modificada " + variable);
                        }
                    }
            :};
dec_booleano::= VARIABLE:variable OPERADOR_ASIGNACION tipo_bool:booleano {: 
                System.out.println("Declaracion de booleano"); 

                parser.simbolo = new Simbolo(variable.toString(), "bool", (booleano != null ? booleano.toString() : "null"), "metodo", false); 
                    if(parser.tabla.agregar(variable.toString(), parser.simbolo)) { 
                        System.out.println("Variable agregada " + variable + " con valor " + booleano.toString()); 
                    } else { 
                        Simbolo simboloBuscado = parser.tabla.obtenerSimbolo(variable.toString());
                            if (simboloBuscado.getTipo().equals("") || simboloBuscado.getTipo().equals("bool")) {
                                parser.tabla.modificar(variable.toString(), parser.simbolo);
                                System.out.println("Variable modificada " + variable + " con valor: " + booleano.toString());
                            } else {
                                System.out.println("Variable NO agregada o modificada " + variable);
                            } 
                    } 
            :};
tipo_bool::= TRUE {: RESULT = "true"; :} 
           | FALSE {: RESULT = "false"; :};
dec_cadena::= VARIABLE:variable OPERADOR_ASIGNACION CADENA:cadena {:
                System.out.println("Declaracion de cadena");

                parser.simbolo = new Simbolo(variable.toString(), "string", cadena.toString(), "metodo", false);
                    if(parser.tabla.agregar(variable.toString(), parser.simbolo)) {
                        System.out.println("Variable agregada " + variable + " con valor: " + cadena.toString());
                    } else {
                        Simbolo simboloBuscado = parser.tabla.obtenerSimbolo(variable.toString());
                            if (simboloBuscado.getTipo().equals("") || simboloBuscado.getTipo().equals("string")) {
                                parser.tabla.modificar(variable.toString(), parser.simbolo);
                                System.out.println("Variable modificada " + variable + " con valor: " + cadena.toString());
                            } else {
                                System.out.println("Variable NO agregada o modificada " + variable);
                            } 
                    }
            :};

asignacion::= VARIABLE:variable OPERADOR_ASIGNACION operacion_aritmetica:resultado {:
                System.out.println("Asignacion realizada");

                Simbolo simboloVar = parser.tabla.obtenerSimbolo(variable.toString());
                if (simboloVar != null && (simboloVar.getTipo().equals("int") || simboloVar.getTipo().equals("float"))) {
                    simboloVar.setValor(resultado.toString());
                    parser.tabla.modificar(variable.toString(), simboloVar);
                    System.out.println("Asignación realizada: " + variable + " = " + resultado);
                } else {
                    System.out.println("Error: Asignación solo permitida en variables de tipo 'int' o 'float' para " + variable);
                }
            :};

asignacion_simple::= VARIABLE:variable1 OPERADOR_ASIGNACION VARIABLE:variable2 {:
                System.out.println("Asignacion simple realizada");

                Simbolo simboloVar1 = parser.tabla.obtenerSimbolo(variable1.toString());
                Simbolo simboloVar2 = parser.tabla.obtenerSimbolo(variable2.toString());
                if (simboloVar1.getTipo() == simboloVar2.getTipo()) {
                    parser.tabla.modificar(variable1.toString(), simboloVar2);
                    System.out.println("Variable modificada " + variable1 + " con contenido de: " + variable2);
                } else if (simboloVar1.getTipo().equals("") && !simboloVar2.getTipo().equals("")) {
                    parser.tabla.modificar(variable1.toString(), simboloVar2);
                    System.out.println("Variable modificada " + variable1 + " con contenido de: " + variable2);
                } else {
                    System.out.println("No se pudo asignar " + variable1 + " a " + variable2 + " , por diferencia de tipos");
                }
                :} | VARIABLE:variable OPERADOR_ASIGNACION CONSTANTE:constante {:
                System.out.println("Asignacion simple realizada");

                Simbolo simboloVar1 = parser.tabla.obtenerSimbolo(variable.toString());
                Simbolo simboloVar2 = parser.tabla.obtenerSimbolo(constante.toString());
                simboloVar2.setConstante(false);
                if (simboloVar1.getTipo() == simboloVar2.getTipo()) {
                    parser.tabla.modificar(variable.toString(), simboloVar2);
                    System.out.println("Variable modificada " + variable + " con contenido de: " + constante);
                } else if (simboloVar1.getTipo().equals("") && !simboloVar2.getTipo().equals("")) {
                    parser.tabla.modificar(variable.toString(), simboloVar2);
                    System.out.println("Variable modificada " + variable + " con contenido de: " + constante);
                } else {
                    System.out.println("No se pudo asignar " + variable + " a " + constante + " , por diferencia de tipos");
                }
            :} ;

auto_valuacion::= VARIABLE:variable OPERADOR_SUMA OPERADOR_SUMA {:
                System.out.println("Autosuma + 1 realizada");

                 Simbolo simboloVar = parser.tabla.obtenerSimbolo(variable.toString());
                if (simboloVar != null && (simboloVar.getTipo().equals("int") || simboloVar.getTipo().equals("float"))) {
                    double valorActual = Double.parseDouble(simboloVar.getValor());
                    valorActual += 1;
                    // Si el tipo es int y el resultado es entero, convertir a int. Caso contrario, mantener double.
                    String nuevoValor = (simboloVar.getTipo().equals("int") && valorActual == Math.floor(valorActual))
                                        ? String.valueOf((int) valorActual)
                                        : String.valueOf(valorActual);
                    simboloVar.setValor(nuevoValor);
                    parser.tabla.modificar(variable.toString(), simboloVar);
                    System.out.println("Autosuma realizada en variable " + variable + " Nuevo valor: " + nuevoValor);
                } else {
                    System.out.println("Error: Autosuma solo permitida en variables de tipo 'int' o 'float' para " + variable);
                }
            :} | VARIABLE:variable OPERADOR_RESTA OPERADOR_RESTA {:
                System.out.println("Autoresta - 1 realizada");

                Simbolo simboloVar = parser.tabla.obtenerSimbolo(variable.toString());
                if (simboloVar != null && (simboloVar.getTipo().equals("int") || simboloVar.getTipo().equals("float"))) {
                    double valorActual = Double.parseDouble(simboloVar.getValor());
                    valorActual -= 1;
                    // Si el tipo es int y el resultado es entero, convertir a int. Caso contrario, mantener double.
                    String nuevoValor = (simboloVar.getTipo().equals("int") && valorActual == Math.floor(valorActual))
                                        ? String.valueOf((int) valorActual)
                                        : String.valueOf(valorActual);
                    simboloVar.setValor(nuevoValor);
                    parser.tabla.modificar(variable.toString(), simboloVar);
                    System.out.println("Autoresta realizada en variable " + variable + " Nuevo valor: " + nuevoValor);
                } else {
                    System.out.println("Error: Autoresta solo permitida en variables de tipo 'int' o 'float' para " + variable);
                }
            :} ;

impresiones::= ECHO VARIABLE rec_impresiones {:
                System.out.println("Impresion tipo echo");
             :} | ECHO CADENA rec_impresiones {:
                System.out.println("Impresion tipo echo");
             :} | PRINT VARIABLE rec_impresiones {:
                System.out.println("Impresion tipo print");
             :} | PRINT CADENA rec_impresiones {:
                System.out.println("Impresion tipo print");
             :};
rec_impresiones::= PUNTO VARIABLE rec_impresiones | PUNTO CADENA rec_impresiones | ;

scanner::= VARIABLE OPERADOR_ASIGNACION TRIM PARENTESIS_APERTURA FGETS PARENTESIS_APERTURA STDIN PARENTESIS_CIERRE PARENTESIS_CIERRE {:
                System.out.println("Lectura de entrada de consola");
            :} ;

/* Reglas para operaciones aritméticas */
expresion::= operacion_aritmetica
            | operacion_logica
            | NUMERO_ENTERO:n {:
                RESULT = n;
            :}
            | NUMERO_FLOTANTE:f {:
                RESULT = f;
            :}
            | VARIABLE:variable {:
                Simbolo simboloVar = parser.tabla.obtenerSimbolo(variable.toString());
                if (simboloVar != null) {
                    RESULT = simboloVar.getValor();
                } else {
                    System.out.println("Error: Variable no definida " + variable);
                }
            :}
            | PARENTESIS_APERTURA expresion:exp PARENTESIS_CIERRE {:
                RESULT = exp;
            :} ;

operacion_aritmetica::= expresion:exp1 OPERADOR_SUMA expresion:exp2 {:
                RESULT = Double.parseDouble(exp1.toString()) + Double.parseDouble(exp2.toString());
                System.out.println("Suma realizada: " + RESULT);
            :}
            | expresion:exp1 OPERADOR_RESTA expresion:exp2 {:
                RESULT = Double.parseDouble(exp1.toString()) - Double.parseDouble(exp2.toString());
                System.out.println("Resta realizada: " + RESULT);
            :}
            | expresion:exp1 OPERADOR_MULTIPLICACION expresion:exp2 {:
                RESULT = Double.parseDouble(exp1.toString()) * Double.parseDouble(exp2.toString());
                System.out.println("Multiplicación realizada: " + RESULT);
            :}
            | expresion:exp1 OPERADOR_DIVISION expresion:exp2 {:
                RESULT = Double.parseDouble(exp1.toString()) / Double.parseDouble(exp2.toString());
                System.out.println("División realizada: " + RESULT);
            :}
            | expresion:exp1 OPERADOR_MODULO expresion:exp2 {:
                RESULT = Double.parseDouble(exp1.toString()) % Double.parseDouble(exp2.toString());
                System.out.println("Operación módulo realizada: " + RESULT);
            :};

/* Reglas para operaciones lógicas */
operacion_logica::= expresion MAYOR expresion {:
                System.out.println("Comparación mayor realizada");
            :}
            | expresion MENOR expresion {:
                System.out.println("Comparación menor realizada");
            :}
            | expresion MAYOR_IGUAL expresion {:
                System.out.println("Comparación mayor o igual realizada");
            :}
            | expresion MENOR_IGUAL expresion {:
                System.out.println("Comparación menor o igual realizada");
            :}
            | expresion OPERADOR_IGUALDAD expresion {:
                System.out.println("Comparación de igualdad realizada");
            :}
            | expresion OPERADOR_DESIGUALDAD expresion {:
                System.out.println("Comparación de desigualdad realizada");
            :}
            | expresion OPERADOR_LOGICO_AND expresion {:
                System.out.println("Operación lógica AND realizada");
            :}
            | expresion OPERADOR_LOGICO_OR expresion {:
                System.out.println("Operación lógica OR realizada");
            :};

/* Reglas para estructuras de control */
estructura_control::= if_sentencia
                    | while_sentencia
                    | do_while_sentencia
                    | for_sentencia
                    | switch_sentencia;

/* Regla para la sentencia if */
if_sentencia::= IF PARENTESIS_APERTURA expresion PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE ifbucle
                {: System.out.println("Sentencia if procesada"); :};

ifbucle::= ELSE LLAVE_APERTURA sentencias LLAVE_CIERRE
                {: System.out.println("Sentencia else procesada"); :}
         | ELSEIF PARENTESIS_APERTURA expresion PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE ifbucle
                {: System.out.println("Sentencia elseif procesada"); :};

/* Regla para la sentencia while */
while_sentencia::= WHILE PARENTESIS_APERTURA expresion PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE
                   {: System.out.println("Sentencia while procesada"); :};

/* Regla para la sentencia do while */
do_while_sentencia::= DO LLAVE_APERTURA sentencias LLAVE_CIERRE WHILE PARENTESIS_APERTURA expresion PARENTESIS_CIERRE PUNTO_COMA
                      {: System.out.println("Sentencia while procesada"); :};

/* Regla para la sentencia for */
for_sentencia::= FOR PARENTESIS_APERTURA dec_entero PUNTO_COMA expresion PUNTO_COMA asignacion PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE
                 {: System.out.println("Sentencia for procesada"); :}; 

/* Regla para la sentencia switch */
switch_sentencia::= SWITCH PARENTESIS_APERTURA VARIABLE PARENTESIS_CIERRE LLAVE_APERTURA 
                    CASE val_switch DOS_PUNTOS sentencias BREAK PUNTO_COMA rec_switch
                    DEFAULT DOS_PUNTOS sentencias LLAVE_CIERRE {: 
                        System.out.println("Sentencia switch procesada"); :};
val_switch::= CADENA | NUMERO_ENTERO | NUMERO_FLOTANTE | tipo_bool ;
rec_switch::= CASE val_switch DOS_PUNTOS sentencias BREAK PUNTO_COMA rec_switch | ;

/* Reglas para clases */
definicion_clases::= CLASES IDENTIFICADOR LLAVE_APERTURA 
                      cuerpo_clase
                      LLAVE_CIERRE {: System.out.println("Definicion de clase"); :} ;

cuerpo_clase::= propiedad_variable propiedad_constante constructor lista_funciones
               | propiedad_constante constructor lista_funciones
               | propiedad_variable constructor lista_funciones
               | propiedad_variable propiedad_constante lista_funciones
               | propiedad_variable propiedad_constante constructor
               | propiedad_variable constructor
               | propiedad_variable lista_funciones
               | propiedad_constante lista_funciones
               | propiedad_constante constructor
               | propiedad_variable propiedad_constante
               | constructor lista_funciones
               | propiedad_variable
               | propiedad_constante
               | constructor
               | lista_funciones
               | ;


propiedad_variable ::= visibilidad_var VARIABLE:variable clases_rec PUNTO_COMA {:
    System.out.println("Definicion de la propiedad en variables de clase");

    parser.simbolo = new Simbolo(variable.toString(), "", "", "metodo", false);
        if(parser.tabla.agregar(variable.toString(), parser.simbolo)) {
            System.out.println("Variable agregada " + variable);
        } else {
            System.out.println("Variable NO agregada " + variable);
        }
:}
                      | propiedad_variable visibilidad_var VARIABLE:variable clases_rec PUNTO_COMA {:
                          System.out.println("Definicion de otra propiedad en variables de clase");

                          parser.simbolo = new Simbolo(variable.toString(), "", "", "metodo", false);
                            if(parser.tabla.agregar(variable.toString(), parser.simbolo)) {
                                System.out.println("Variable agregada " + variable);
                            } else {
                                System.out.println("Variable NO agregada " + variable);
                            }
                      :} ;


variable_declaracion ::= VARIABLE:variable {:
                            parser.simbolo = new Simbolo(variable.toString(), "", "", "metodo", false);
                                if(parser.tabla.agregar(variable.toString(), parser.simbolo)) {
                                    System.out.println("Variable agregada " + variable);
                                } else {
                                    System.out.println("Variable NO agregada " + variable);
                                }
                        :}
                       | VARIABLE:variable COMA variable_declaracion {:
                            parser.simbolo = new Simbolo(variable.toString(), "", "", "metodo", false);
                                if(parser.tabla.agregar(variable.toString(), parser.simbolo)) {
                                    System.out.println("Variable agregada " + variable);
                                } else {
                                    System.out.println("Variable NO agregada " + variable);
                                }
                        :} ;

propiedad_constante::= CONST CONSTANTE:constante OPERADOR_ASIGNACION CADENA:cadena PUNTO_COMA rec_constantes {:
                            System.out.println("Definicion de la propiedad en constantes de clase");

                            parser.simbolo = new Simbolo(constante.toString(), "string", cadena.toString(), "metodo", true);
                                if(parser.tabla.agregar(constante.toString(), parser.simbolo)) {
                                    System.out.println("Constante agregada " + constante);
                                } else {
                                    System.out.println("Constante NO agregada " + constante);
                                }
                     :} | CONST CONSTANTE:constante OPERADOR_ASIGNACION NUMERO_ENTERO:numero_entero PUNTO_COMA rec_constantes{:
                            System.out.println("Definicion de la propiedad en constantes de clase");

                            parser.simbolo = new Simbolo(constante.toString(), "int", numero_entero.toString(), "metodo", true);
                                if(parser.tabla.agregar(constante.toString(), parser.simbolo)) {
                                    System.out.println("Constante agregada " + constante);
                                } else {
                                    System.out.println("Constante NO agregada " + constante);
                                }
                     :} | CONST CONSTANTE:constante OPERADOR_ASIGNACION NUMERO_FLOTANTE:numero_flotante PUNTO_COMA rec_constantes {:
                            System.out.println("Definicion de la propiedad en constantes de clase");

                            parser.simbolo = new Simbolo(constante.toString(), "float", numero_flotante.toString(), "metodo", true);
                                if(parser.tabla.agregar(constante.toString(), parser.simbolo)) {
                                    System.out.println("Constante agregada " + constante);
                                } else {
                                    System.out.println("Constante NO agregada " + constante);
                                }
                     :} | CONST CONSTANTE:constante OPERADOR_ASIGNACION tipo_bool:booleano PUNTO_COMA rec_constantes {:
                            System.out.println("Definicion de la propiedad en constantes de clase");

                            parser.simbolo = new Simbolo(constante.toString(), "bool", (booleano != null ? booleano.toString() : "null"), "metodo", true);
                                if(parser.tabla.agregar(constante.toString(), parser.simbolo)) {
                                    System.out.println("Constante agregada " + constante + " con valor " + booleano.toString());
                                } else {
                                    System.out.println("Constante NO agregada " + constante);
                                }
                     :} ;

rec_constantes::= CONST CONSTANTE:constante OPERADOR_ASIGNACION CADENA:cadena PUNTO_COMA rec_constantes {:
                    parser.simbolo = new Simbolo(constante.toString(), "string", cadena.toString(), "metodo", true);
                        if(parser.tabla.agregar(constante.toString(), parser.simbolo)) {
                            System.out.println("Constante agregada " + constante);
                        } else {
                            System.out.println("Constante NO agregada " + constante);
                        }
:}
                | CONST CONSTANTE:constante OPERADOR_ASIGNACION NUMERO_ENTERO:numero_entero PUNTO_COMA rec_constantes {:
                    parser.simbolo = new Simbolo(constante.toString(), "int", numero_entero.toString(), "metodo", true);
                        if(parser.tabla.agregar(constante.toString(), parser.simbolo)) {
                            System.out.println("Constante agregada " + constante);
                        } else {
                            System.out.println("Constante NO agregada " + constante);
                        }
:}
                | CONST CONSTANTE:constante OPERADOR_ASIGNACION NUMERO_FLOTANTE:numero_flotante PUNTO_COMA rec_constantes {:
                    parser.simbolo = new Simbolo(constante.toString(), "float", numero_flotante.toString(), "metodo", true);
                        if(parser.tabla.agregar(constante.toString(), parser.simbolo)) {
                            System.out.println("Constante agregada " + constante);
                        } else {
                            System.out.println("Constante NO agregada " + constante);
                        }
:}
                | CONST CONSTANTE:constante OPERADOR_ASIGNACION tipo_bool:booleano PUNTO_COMA rec_constantes {:
                    parser.simbolo = new Simbolo(constante.toString(), "bool", (booleano != null ? booleano.toString() : "null"), "metodo", true);
                        if(parser.tabla.agregar(constante.toString(), parser.simbolo)) {
                            System.out.println("Constante agregada " + constante + " con valor " + booleano.toString());
                        } else {
                            System.out.println("Constante NO agregada " + constante);
                        }
:} | ;

clases_rec::= COMA VARIABLE:variable clases_rec {:
    parser.simbolo = new Simbolo(variable.toString(), "", "", "metodo", false);
        if(parser.tabla.agregar(variable.toString(), parser.simbolo)) {
            System.out.println("Variable agregada " + variable);
        } else {
            System.out.println("Variable NO agregada " + variable);
        }
:} |;

visibilidad_var::= PUBLIC | PRIVATE | PROTECTED | PUBLIC STATIC | PRIVATE STATIC | PROTECTED STATIC ;
visibilidad_fun::= PUBLIC | PRIVATE | PROTECTED | PUBLIC STATIC | PRIVATE STATIC | PROTECTED STATIC | PUBLIC FINAL | PRIVATE FINAL | PROTECTED FINAL ;

constructor::= visibilidad_fun FUNCTION CONSTRUCT PARENTESIS_APERTURA VARIABLE clases_rec PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE {:
                System.out.println("Definicion del constructor");
            :} ;
lista_funciones ::= funciones
                  | lista_funciones funciones;

funciones::= visibilidad_fun FUNCTION IDENTIFICADOR parametros_funciones LLAVE_APERTURA sentencias LLAVE_CIERRE {:
                System.out.println("Definicion de la funcion");
           :} | visibilidad_fun FUNCTION IDENTIFICADOR parametros_funciones DOS_PUNTOS VOID LLAVE_APERTURA sentencias LLAVE_CIERRE {:
                System.out.println("Definicion de la funcion void");
           :} | visibilidad_fun FUNCTION IDENTIFICADOR PARENTESIS_APERTURA  PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE {:
                System.out.println("Definicion de la funcion sin parametros");
           :} | visibilidad_fun FUNCTION IDENTIFICADOR PARENTESIS_APERTURA  PARENTESIS_CIERRE DOS_PUNTOS VOID LLAVE_APERTURA sentencias LLAVE_CIERRE {:
                System.out.println("Definicion de la funcion void sin parametros");
           :} ;

parametros_funciones::= PARENTESIS_APERTURA variable_declaracion PARENTESIS_CIERRE;