
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Oct 14 00:06:09 CST 2024
//----------------------------------------------------

package act_7_clases;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Oct 14 00:06:09 CST 2024
  */
public class ParserPHP extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserPHP() {super();}

  /** Constructor which sets the default scanner. */
  public ParserPHP(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserPHP(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\004\005\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\005\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\006\005\000\002\007\005\000" +
    "\002\010\005\000\002\010\002\000\002\011\005\000\002" +
    "\011\002\000\002\012\005\000\002\013\005\000\002\014" +
    "\005\000\002\015\003\000\002\015\003\000\002\016\005" +
    "\000\002\017\005\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\024\012\000\002\025\006" +
    "\000\002\025\012\000\002\026\011\000\002\027\015\000" +
    "\002\030\007\000\002\033\002\000\002\034\002\000\002" +
    "\035\002\000\002\030\040\000\002\031\005\000\002\031" +
    "\002\000\002\032\011\000\002\032\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\032\002\uffff\004\016\005\035\006\034\010" +
    "\021\016\023\021\037\022\013\025\020\057\022\060\025" +
    "\061\017\001\002\000\034\002\ufffa\004\ufffa\005\ufffa\006" +
    "\ufffa\010\ufffa\016\ufffa\021\ufffa\022\ufffa\024\ufffa\025\ufffa" +
    "\057\ufffa\060\ufffa\061\ufffa\001\002\000\004\031\ufff4\001" +
    "\002\000\034\002\uffca\004\uffca\005\uffca\006\uffca\010\uffca" +
    "\016\uffca\021\uffca\022\uffca\024\uffca\025\uffca\057\uffca\060" +
    "\uffca\061\uffca\001\002\000\004\031\ufff2\001\002\000\004" +
    "\031\ufff1\001\002\000\004\002\261\001\002\000\004\031" +
    "\ufff0\001\002\000\004\025\253\001\002\000\034\002\000" +
    "\004\016\005\035\006\034\010\021\016\023\021\037\022" +
    "\013\024\000\025\020\057\022\060\025\061\017\001\002" +
    "\000\034\036\060\040\070\041\064\042\066\043\056\044" +
    "\071\046\065\047\072\050\057\052\067\053\061\054\062" +
    "\055\073\001\002\000\004\056\242\001\002\000\040\026" +
    "\uffdd\031\uffdd\036\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd" +
    "\044\uffdd\046\uffdd\047\uffdd\050\uffdd\052\uffdd\053\uffdd\054" +
    "\uffdd\055\uffdd\001\002\000\012\025\051\057\054\060\025" +
    "\061\017\001\002\000\004\056\225\001\002\000\036\035" +
    "\216\036\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc" +
    "\046\uffdc\047\uffdc\050\uffdc\052\uffdc\053\uffdc\054\uffdc\055" +
    "\uffdc\001\002\000\004\025\173\001\002\000\004\031\uffef" +
    "\001\002\000\040\026\uffde\031\uffde\036\uffde\040\uffde\041" +
    "\uffde\042\uffde\043\uffde\044\uffde\046\uffde\047\uffde\050\uffde" +
    "\052\uffde\053\uffde\054\uffde\055\uffde\001\002\000\004\031" +
    "\uffee\001\002\000\004\031\172\001\002\000\034\002\uffcd" +
    "\004\uffcd\005\uffcd\006\uffcd\010\uffcd\016\uffcd\021\uffcd\022" +
    "\uffcd\024\uffcd\025\uffcd\057\uffcd\060\uffcd\061\uffcd\001\002" +
    "\000\034\002\ufff9\004\ufff9\005\ufff9\006\ufff9\010\ufff9\016" +
    "\ufff9\021\ufff9\022\ufff9\024\ufff9\025\ufff9\057\ufff9\060\ufff9" +
    "\061\ufff9\001\002\000\034\002\uffcc\004\uffcc\005\uffcc\006" +
    "\uffcc\010\uffcc\016\uffcc\021\uffcc\022\uffcc\024\uffcc\025\uffcc" +
    "\057\uffcc\060\uffcc\061\uffcc\001\002\000\036\031\ufff6\036" +
    "\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\046\uffdf" +
    "\047\uffdf\050\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\001" +
    "\002\000\004\056\130\001\002\000\004\056\123\001\002" +
    "\000\036\031\ufff7\036\uffe0\040\uffe0\041\uffe0\042\uffe0\043" +
    "\uffe0\044\uffe0\046\uffe0\047\uffe0\050\uffe0\052\uffe0\053\uffe0" +
    "\054\uffe0\055\uffe0\001\002\000\004\025\043\001\002\000" +
    "\004\031\ufff3\001\002\000\034\002\uffcb\004\uffcb\005\uffcb" +
    "\006\uffcb\010\uffcb\016\uffcb\021\uffcb\022\uffcb\024\uffcb\025" +
    "\uffcb\057\uffcb\060\uffcb\061\uffcb\001\002\000\004\031\ufff8" +
    "\001\002\000\004\057\045\001\002\000\004\031\050\001" +
    "\002\000\004\035\046\001\002\000\004\060\047\001\002" +
    "\000\004\031\uffe7\001\002\000\012\025\051\057\054\060" +
    "\025\061\017\001\002\000\012\025\051\057\054\060\025" +
    "\061\017\001\002\000\040\026\uffdf\031\uffdf\036\uffdf\040" +
    "\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\046\uffdf\047\uffdf" +
    "\050\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\001\002\000" +
    "\040\026\uffe0\031\uffe0\036\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\043\uffe0\044\uffe0\046\uffe0\047\uffe0\050\uffe0\052\uffe0\053" +
    "\uffe0\054\uffe0\055\uffe0\001\002\000\040\026\uffdc\031\uffdc" +
    "\036\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\046" +
    "\uffdc\047\uffdc\050\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc" +
    "\001\002\000\036\031\063\036\060\040\070\041\064\042" +
    "\066\043\056\044\071\046\065\047\072\050\057\052\067" +
    "\053\061\054\062\055\073\001\002\000\012\025\051\057" +
    "\054\060\025\061\017\001\002\000\012\025\051\057\054" +
    "\060\025\061\017\001\002\000\012\025\051\057\054\060" +
    "\025\061\017\001\002\000\012\025\051\057\054\060\025" +
    "\061\017\001\002\000\012\025\051\057\054\060\025\061" +
    "\017\001\002\000\004\057\105\001\002\000\012\025\051" +
    "\057\054\060\025\061\017\001\002\000\012\025\051\057" +
    "\054\060\025\061\017\001\002\000\012\025\051\057\054" +
    "\060\025\061\017\001\002\000\012\025\051\057\054\060" +
    "\025\061\017\001\002\000\012\025\051\057\054\060\025" +
    "\061\017\001\002\000\012\025\051\057\054\060\025\061" +
    "\017\001\002\000\012\025\051\057\054\060\025\061\017" +
    "\001\002\000\012\025\051\057\054\060\025\061\017\001" +
    "\002\000\040\026\uffd2\031\uffd2\036\uffd2\040\uffd2\041\064" +
    "\042\066\043\056\044\071\046\065\047\uffd2\050\uffd2\052" +
    "\uffd2\053\uffd2\054\uffd2\055\uffd2\001\002\000\040\026\uffcf" +
    "\031\uffcf\036\060\040\070\041\064\042\066\043\056\044" +
    "\071\046\065\047\uffcf\050\uffcf\052\067\053\061\054\062" +
    "\055\073\001\002\000\040\026\uffd7\031\uffd7\036\uffd7\040" +
    "\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\046\uffd7\047\uffd7" +
    "\050\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\001\002\000" +
    "\040\026\uffd0\031\uffd0\036\uffd0\040\uffd0\041\064\042\066" +
    "\043\056\044\071\046\065\047\uffd0\050\uffd0\052\067\053" +
    "\061\054\062\055\073\001\002\000\040\026\uffd5\031\uffd5" +
    "\036\uffd5\040\uffd5\041\064\042\066\043\056\044\071\046" +
    "\065\047\uffd5\050\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5" +
    "\001\002\000\040\026\uffd9\031\uffd9\036\uffd9\040\uffd9\041" +
    "\uffd9\042\uffd9\043\056\044\071\046\065\047\uffd9\050\uffd9" +
    "\052\uffd9\053\uffd9\054\uffd9\055\uffd9\001\002\000\040\026" +
    "\uffd6\031\uffd6\036\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6" +
    "\044\uffd6\046\uffd6\047\uffd6\050\uffd6\052\uffd6\053\uffd6\054" +
    "\uffd6\055\uffd6\001\002\000\040\026\uffda\031\uffda\036\uffda" +
    "\040\uffda\041\uffda\042\uffda\043\056\044\071\046\065\047" +
    "\uffda\050\uffda\052\uffda\053\uffda\054\uffda\055\uffda\001\002" +
    "\000\004\026\110\001\002\000\004\035\106\001\002\000" +
    "\012\025\051\057\054\060\025\061\017\001\002\000\040" +
    "\026\uffe1\031\uffe1\036\uffe0\040\uffe0\041\uffe0\042\uffe0\043" +
    "\uffe0\044\uffe0\046\uffe0\047\uffe0\050\uffe0\052\uffe0\053\uffe0" +
    "\054\uffe0\055\uffe0\001\002\000\004\023\111\001\002\000" +
    "\032\004\016\005\035\006\034\010\021\016\023\021\037" +
    "\022\013\024\uffff\025\020\057\022\060\025\061\017\001" +
    "\002\000\004\024\113\001\002\000\034\002\uffc5\004\uffc5" +
    "\005\uffc5\006\uffc5\010\uffc5\016\uffc5\021\uffc5\022\uffc5\024" +
    "\uffc5\025\uffc5\057\uffc5\060\uffc5\061\uffc5\001\002\000\040" +
    "\026\uffd3\031\uffd3\036\uffd3\040\uffd3\041\064\042\066\043" +
    "\056\044\071\046\065\047\uffd3\050\uffd3\052\uffd3\053\uffd3" +
    "\054\uffd3\055\uffd3\001\002\000\040\026\uffd4\031\uffd4\036" +
    "\uffd4\040\uffd4\041\064\042\066\043\056\044\071\046\065" +
    "\047\uffd4\050\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\001" +
    "\002\000\040\026\uffd1\031\uffd1\036\uffd1\040\uffd1\041\064" +
    "\042\066\043\056\044\071\046\065\047\uffd1\050\uffd1\052" +
    "\067\053\061\054\062\055\073\001\002\000\040\026\uffce" +
    "\031\uffce\036\060\040\070\041\064\042\066\043\056\044" +
    "\071\046\065\047\072\050\uffce\052\067\053\061\054\062" +
    "\055\073\001\002\000\040\026\uffd8\031\uffd8\036\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\046\uffd8\047\uffd8" +
    "\050\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\001\002\000" +
    "\036\026\122\036\060\040\070\041\064\042\066\043\056" +
    "\044\071\046\065\047\072\050\057\052\067\053\061\054" +
    "\062\055\073\001\002\000\040\026\uffdb\031\uffdb\036\uffdb" +
    "\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\046\uffdb\047" +
    "\uffdb\050\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\001\002" +
    "\000\006\031\uffe8\045\125\001\002\000\004\031\uffec\001" +
    "\002\000\004\056\126\001\002\000\006\031\uffe8\045\125" +
    "\001\002\000\004\031\uffe9\001\002\000\004\023\131\001" +
    "\002\000\034\004\016\005\035\006\034\007\133\010\021" +
    "\016\023\021\037\022\013\024\uffff\025\020\057\022\060" +
    "\025\061\017\001\002\000\004\024\171\001\002\000\004" +
    "\057\134\001\002\000\006\031\uffbe\032\135\001\002\000" +
    "\004\057\167\001\002\000\004\031\137\001\002\000\004" +
    "\007\uffc3\001\002\000\004\007\141\001\002\000\004\010" +
    "\142\001\002\000\004\011\143\001\002\000\004\025\144" +
    "\001\002\000\004\057\145\001\002\000\006\026\uffbe\032" +
    "\135\001\002\000\004\026\147\001\002\000\004\023\150" +
    "\001\002\000\032\004\016\005\035\006\034\010\021\016" +
    "\023\021\037\022\013\024\uffff\025\020\057\022\060\025" +
    "\061\017\001\002\000\004\024\152\001\002\000\004\007" +
    "\uffc2\001\002\000\004\007\154\001\002\000\004\010\155" +
    "\001\002\000\004\056\156\001\002\000\004\025\157\001" +
    "\002\000\004\026\160\001\002\000\004\023\161\001\002" +
    "\000\032\004\016\005\035\006\034\010\021\016\023\021" +
    "\037\022\013\024\uffff\025\020\057\022\060\025\061\017" +
    "\001\002\000\004\024\163\001\002\000\032\004\uffc1\005" +
    "\uffc1\006\uffc1\010\uffc1\016\uffc1\021\uffc1\022\uffc1\024\uffc1" +
    "\025\uffc1\057\uffc1\060\uffc1\061\uffc1\001\002\000\032\004" +
    "\016\005\035\006\034\010\021\016\023\021\037\022\013" +
    "\024\uffff\025\020\057\022\060\025\061\017\001\002\000" +
    "\004\024\166\001\002\000\034\002\uffc0\004\uffc0\005\uffc0" +
    "\006\uffc0\010\uffc0\016\uffc0\021\uffc0\022\uffc0\024\uffc0\025" +
    "\uffc0\057\uffc0\060\uffc0\061\uffc0\001\002\000\010\026\uffbe" +
    "\031\uffbe\032\135\001\002\000\006\026\uffbf\031\uffbf\001" +
    "\002\000\034\002\uffc4\004\uffc4\005\uffc4\006\uffc4\010\uffc4" +
    "\016\uffc4\021\uffc4\022\uffc4\024\uffc4\025\uffc4\057\uffc4\060" +
    "\uffc4\061\uffc4\001\002\000\034\002\ufffb\004\ufffb\005\ufffb" +
    "\006\ufffb\010\ufffb\016\ufffb\021\ufffb\022\ufffb\024\ufffb\025" +
    "\ufffb\057\ufffb\060\ufffb\061\ufffb\001\002\000\012\025\051" +
    "\057\054\060\025\061\017\001\002\000\036\026\175\036" +
    "\060\040\070\041\064\042\066\043\056\044\071\046\065" +
    "\047\072\050\057\052\067\053\061\054\062\055\073\001" +
    "\002\000\004\023\176\001\002\000\032\004\016\005\035" +
    "\006\034\010\021\016\023\021\037\022\013\024\uffff\025" +
    "\020\057\022\060\025\061\017\001\002\000\004\024\200" +
    "\001\002\000\006\017\201\020\202\001\002\000\004\025" +
    "\207\001\002\000\004\023\204\001\002\000\034\002\uffc9" +
    "\004\uffc9\005\uffc9\006\uffc9\010\uffc9\016\uffc9\021\uffc9\022" +
    "\uffc9\024\uffc9\025\uffc9\057\uffc9\060\uffc9\061\uffc9\001\002" +
    "\000\032\004\016\005\035\006\034\010\021\016\023\021" +
    "\037\022\013\024\uffff\025\020\057\022\060\025\061\017" +
    "\001\002\000\004\024\206\001\002\000\034\002\uffc8\004" +
    "\uffc8\005\uffc8\006\uffc8\010\uffc8\016\uffc8\021\uffc8\022\uffc8" +
    "\024\uffc8\025\uffc8\057\uffc8\060\uffc8\061\uffc8\001\002\000" +
    "\012\025\051\057\054\060\025\061\017\001\002\000\036" +
    "\026\211\036\060\040\070\041\064\042\066\043\056\044" +
    "\071\046\065\047\072\050\057\052\067\053\061\054\062" +
    "\055\073\001\002\000\004\023\212\001\002\000\032\004" +
    "\016\005\035\006\034\010\021\016\023\021\037\022\013" +
    "\024\uffff\025\020\057\022\060\025\061\017\001\002\000" +
    "\004\024\214\001\002\000\006\017\201\020\202\001\002" +
    "\000\034\002\uffc7\004\uffc7\005\uffc7\006\uffc7\010\uffc7\016" +
    "\uffc7\021\uffc7\022\uffc7\024\uffc7\025\uffc7\057\uffc7\060\uffc7" +
    "\061\uffc7\001\002\000\020\014\221\015\223\025\051\057" +
    "\054\060\222\061\224\065\217\001\002\000\004\031\uffe2" +
    "\001\002\000\004\031\uffe5\001\002\000\004\031\uffe4\001" +
    "\002\000\036\031\uffe7\036\uffde\040\uffde\041\uffde\042\uffde" +
    "\043\uffde\044\uffde\046\uffde\047\uffde\050\uffde\052\uffde\053" +
    "\uffde\054\uffde\055\uffde\001\002\000\004\031\uffe3\001\002" +
    "\000\036\031\uffe6\036\uffdd\040\uffdd\041\uffdd\042\uffdd\043" +
    "\uffdd\044\uffdd\046\uffdd\047\uffdd\050\uffdd\052\uffdd\053\uffdd" +
    "\054\uffdd\055\uffdd\001\002\000\004\025\226\001\002\000" +
    "\004\026\227\001\002\000\006\023\230\033\231\001\002" +
    "\000\032\004\016\005\035\006\034\010\021\016\023\021" +
    "\037\022\013\024\uffff\025\020\057\022\060\025\061\017" +
    "\001\002\000\004\012\232\001\002\000\004\023\233\001" +
    "\002\000\032\004\016\005\035\006\034\010\021\016\023" +
    "\021\037\022\013\024\uffff\025\020\057\022\060\025\061" +
    "\017\001\002\000\004\024\235\001\002\000\034\002\uffbc" +
    "\004\uffbc\005\uffbc\006\uffbc\010\uffbc\016\uffbc\021\uffbc\022" +
    "\uffbc\024\uffbc\025\uffbc\057\uffbc\060\uffbc\061\uffbc\001\002" +
    "\000\004\024\237\001\002\000\034\002\uffbd\004\uffbd\005" +
    "\uffbd\006\uffbd\010\uffbd\016\uffbd\021\uffbd\022\uffbd\024\uffbd" +
    "\025\uffbd\057\uffbd\060\uffbd\061\uffbd\001\002\000\036\026" +
    "\241\036\060\040\070\041\064\042\066\043\056\044\071" +
    "\046\065\047\072\050\057\052\067\053\061\054\062\055" +
    "\073\001\002\000\036\031\ufff5\036\uffdb\040\uffdb\041\uffdb" +
    "\042\uffdb\043\uffdb\044\uffdb\046\uffdb\047\uffdb\050\uffdb\052" +
    "\uffdb\053\uffdb\054\uffdb\055\uffdb\001\002\000\006\031\uffea" +
    "\045\244\001\002\000\004\031\uffed\001\002\000\004\056" +
    "\245\001\002\000\006\031\uffea\045\244\001\002\000\004" +
    "\031\uffeb\001\002\000\034\002\ufffd\004\ufffd\005\ufffd\006" +
    "\ufffd\010\ufffd\016\ufffd\021\ufffd\022\ufffd\024\ufffd\025\ufffd" +
    "\057\ufffd\060\ufffd\061\ufffd\001\002\000\004\031\252\001" +
    "\002\000\034\002\ufffc\004\ufffc\005\ufffc\006\ufffc\010\ufffc" +
    "\016\ufffc\021\ufffc\022\ufffc\024\ufffc\025\ufffc\057\ufffc\060" +
    "\ufffc\061\ufffc\001\002\000\034\002\ufffe\004\ufffe\005\ufffe" +
    "\006\ufffe\010\ufffe\016\ufffe\021\ufffe\022\ufffe\024\ufffe\025" +
    "\ufffe\057\ufffe\060\ufffe\061\ufffe\001\002\000\012\025\051" +
    "\057\054\060\025\061\017\001\002\000\036\026\255\036" +
    "\060\040\070\041\064\042\066\043\056\044\071\046\065" +
    "\047\072\050\057\052\067\053\061\054\062\055\073\001" +
    "\002\000\004\023\256\001\002\000\032\004\016\005\035" +
    "\006\034\010\021\016\023\021\037\022\013\024\uffff\025" +
    "\020\057\022\060\025\061\017\001\002\000\004\024\260" +
    "\001\002\000\034\002\uffc6\004\uffc6\005\uffc6\006\uffc6\010" +
    "\uffc6\016\uffc6\021\uffc6\022\uffc6\024\uffc6\025\uffc6\057\uffc6" +
    "\060\uffc6\061\uffc6\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\052\002\010\003\026\004\013\005\041\006" +
    "\004\007\037\012\006\013\007\014\011\016\023\017\025" +
    "\020\014\021\035\022\032\023\003\024\027\026\031\027" +
    "\040\030\030\032\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\003\247\005\041\006\004\007\037\012\006\013" +
    "\007\014\011\016\023\017\025\020\014\021\035\022\032" +
    "\023\246\024\027\026\031\027\040\030\250\032\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\237\021\052\022\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\054\021\052\022\051\001\001\000\010\020" +
    "\120\021\052\022\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\020" +
    "\117\021\052\022\051\001\001\000\010\020\116\021\052" +
    "\022\051\001\001\000\010\020\115\021\052\022\051\001" +
    "\001\000\010\020\114\021\052\022\051\001\001\000\010" +
    "\020\113\021\052\022\051\001\001\000\004\017\103\001" +
    "\001\000\010\020\102\021\052\022\051\001\001\000\010" +
    "\020\101\021\052\022\051\001\001\000\010\020\100\021" +
    "\052\022\051\001\001\000\010\020\077\021\052\022\051" +
    "\001\001\000\010\020\076\021\052\022\051\001\001\000" +
    "\010\020\075\021\052\022\051\001\001\000\010\020\074" +
    "\021\052\022\051\001\001\000\010\020\073\021\052\022" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\014\021\106\022\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\002\111" +
    "\003\026\004\013\005\041\006\004\007\037\012\006\013" +
    "\007\014\011\016\023\017\025\020\014\021\035\022\032" +
    "\023\003\024\027\026\031\027\040\030\030\032\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\002\131\003\026\004\013\005\041\006\004\007" +
    "\037\012\006\013\007\014\011\016\023\017\025\020\014" +
    "\021\035\022\032\023\003\024\027\026\031\027\040\030" +
    "\030\032\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\002\150\003\026\004\013\005\041\006" +
    "\004\007\037\012\006\013\007\014\011\016\023\017\025" +
    "\020\014\021\035\022\032\023\003\024\027\026\031\027" +
    "\040\030\030\032\005\001\001\000\002\001\001\000\004" +
    "\034\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\002\161\003\026\004\013\005\041\006" +
    "\004\007\037\012\006\013\007\014\011\016\023\017\025" +
    "\020\014\021\035\022\032\023\003\024\027\026\031\027" +
    "\040\030\030\032\005\001\001\000\002\001\001\000\004" +
    "\035\163\001\001\000\052\002\164\003\026\004\013\005" +
    "\041\006\004\007\037\012\006\013\007\014\011\016\023" +
    "\017\025\020\014\021\035\022\032\023\003\024\027\026" +
    "\031\027\040\030\030\032\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\173" +
    "\021\052\022\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\002\176\003\026\004\013\005\041\006\004" +
    "\007\037\012\006\013\007\014\011\016\023\017\025\020" +
    "\014\021\035\022\032\023\003\024\027\026\031\027\040" +
    "\030\030\032\005\001\001\000\002\001\001\000\004\025" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\002\204\003\026\004\013\005\041\006" +
    "\004\007\037\012\006\013\007\014\011\016\023\017\025" +
    "\020\014\021\035\022\032\023\003\024\027\026\031\027" +
    "\040\030\030\032\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\020\207\021\052\022\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\002\212\003\026" +
    "\004\013\005\041\006\004\007\037\012\006\013\007\014" +
    "\011\016\023\017\025\020\014\021\035\022\032\023\003" +
    "\024\027\026\031\027\040\030\030\032\005\001\001\000" +
    "\002\001\001\000\004\025\214\001\001\000\002\001\001" +
    "\000\012\015\217\020\014\021\106\022\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\002\235" +
    "\003\026\004\013\005\041\006\004\007\037\012\006\013" +
    "\007\014\011\016\023\017\025\020\014\021\035\022\032" +
    "\023\003\024\027\026\031\027\040\030\030\032\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\002\233" +
    "\003\026\004\013\005\041\006\004\007\037\012\006\013" +
    "\007\014\011\016\023\017\025\020\014\021\035\022\032" +
    "\023\003\024\027\026\031\027\040\030\030\032\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\242\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\245\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\253\021\052\022\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\002\256\003\026\004\013" +
    "\005\041\006\004\007\037\012\006\013\007\014\011\016" +
    "\023\017\025\020\014\021\035\022\032\023\003\024\027" +
    "\026\031\027\040\030\030\032\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserPHP$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserPHP$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserPHP$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error (Symbol s)
    {
        report_error("Error de sintaxis en linea: " + (s.left+1) +
                    " ,columna: "+(s.right+1)+" , simbolo: "+s.value, null);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        report_fatal_error("Error de sintaxis no recuperable en linea: " + (s.left+1) +
                    " ,columna: "+(s.right+1)+" , simbolo: "+s.value, null);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserPHP$actions {
  private final ParserPHP parser;

  /** Constructor */
  CUP$ParserPHP$actions(ParserPHP parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserPHP$do_action(
    int                        CUP$ParserPHP$act_num,
    java_cup.runtime.lr_parser CUP$ParserPHP$parser,
    java.util.Stack            CUP$ParserPHP$stack,
    int                        CUP$ParserPHP$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserPHP$result;

      /* select the action based on the action number */
      switch (CUP$ParserPHP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // funciones ::= FUNCTION IDENTIFICADOR PARENTESIS_APERTURA PARENTESIS_CIERRE DOS_PUNTOS VOID LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		
                System.out.println("Definicion de la funcion void");
           
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("funciones",24, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-8)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // funciones ::= FUNCTION IDENTIFICADOR PARENTESIS_APERTURA PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		
                System.out.println("Definicion de la funcion");
           
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("funciones",24, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-6)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // clases_rec ::= 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("clases_rec",23, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // clases_rec ::= COMA VARIABLE clases_rec 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("clases_rec",23, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // definicion_clases ::= CLASES IDENTIFICADOR LLAVE_APERTURA PUBLIC VARIABLE clases_rec PUNTO_COMA NT$0 PUBLIC FUNCTION CONSTRUCT PARENTESIS_APERTURA VARIABLE clases_rec PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE NT$1 PUBLIC FUNCTION IDENTIFICADOR PARENTESIS_APERTURA PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE NT$2 sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)).value;
		
                System.out.println("Definicion de clase completa realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("definicion_clases",22, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-29)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-8)).value;

                System.out.println("Definicion de metodo de clase");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("NT$2",27, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-10)).value;

                System.out.println("Definicion del constructor de clase");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("NT$1",26, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$0 ::= 
            {
              Object RESULT =null;

                System.out.println("Definicion de la propiedad de clase");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("NT$0",25, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // definicion_clases ::= CLASES IDENTIFICADOR LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		
                System.out.println("Definicion de clase simple realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("definicion_clases",22, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-4)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // for_sentencia ::= FOR PARENTESIS_APERTURA dec_entero PUNTO_COMA expresion PUNTO_COMA asignacion PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		 System.out.println("Sentencia for procesada"); 
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("for_sentencia",21, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-10)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // while_sentencia ::= WHILE PARENTESIS_APERTURA expresion PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		 System.out.println("Sentencia while procesada"); 
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("while_sentencia",20, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-6)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ifbucle ::= ELSEIF PARENTESIS_APERTURA expresion PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE ifbucle 
            {
              Object RESULT =null;
		 System.out.println("Sentencia elseif procesada"); 
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("ifbucle",19, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-7)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ifbucle ::= ELSE LLAVE_APERTURA sentencias LLAVE_CIERRE 
            {
              Object RESULT =null;
		 System.out.println("Sentencia else procesada"); 
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("ifbucle",19, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // if_sentencia ::= IF PARENTESIS_APERTURA expresion PARENTESIS_CIERRE LLAVE_APERTURA sentencias LLAVE_CIERRE ifbucle 
            {
              Object RESULT =null;
		 System.out.println("Sentencia if procesada"); 
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("if_sentencia",18, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-7)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // estructura_control ::= funciones 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("estructura_control",17, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // estructura_control ::= for_sentencia 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("estructura_control",17, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // estructura_control ::= while_sentencia 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("estructura_control",17, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // estructura_control ::= if_sentencia 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("estructura_control",17, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operacion_logica ::= expresion OPERADOR_LOGICO_OR expresion 
            {
              Object RESULT =null;
		
                System.out.println("Operación lógica OR realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",16, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operacion_logica ::= expresion OPERADOR_LOGICO_AND expresion 
            {
              Object RESULT =null;
		
                System.out.println("Operación lógica AND realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",16, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operacion_logica ::= expresion OPERADOR_DESIGUALDAD expresion 
            {
              Object RESULT =null;
		
                System.out.println("Comparación de desigualdad realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",16, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operacion_logica ::= expresion OPERADOR_IGUALDAD expresion 
            {
              Object RESULT =null;
		
                System.out.println("Comparación de igualdad realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",16, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operacion_logica ::= expresion MENOR_IGUAL expresion 
            {
              Object RESULT =null;
		
                System.out.println("Comparación menor o igual realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",16, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operacion_logica ::= expresion MAYOR_IGUAL expresion 
            {
              Object RESULT =null;
		
                System.out.println("Comparación mayor o igual realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",16, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operacion_logica ::= expresion MENOR expresion 
            {
              Object RESULT =null;
		
                System.out.println("Comparación menor realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",16, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operacion_logica ::= expresion MAYOR expresion 
            {
              Object RESULT =null;
		
                System.out.println("Comparación mayor realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_logica",16, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operacion_aritmetica ::= expresion OPERADOR_MODULO expresion 
            {
              Object RESULT =null;
		
                System.out.println("Operación módulo realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",15, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operacion_aritmetica ::= expresion OPERADOR_DIVISION expresion 
            {
              Object RESULT =null;
		
                System.out.println("División realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",15, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operacion_aritmetica ::= expresion OPERADOR_MULTIPLICACION expresion 
            {
              Object RESULT =null;
		
                System.out.println("Multiplicación realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",15, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operacion_aritmetica ::= expresion OPERADOR_RESTA expresion 
            {
              Object RESULT =null;
		
                System.out.println("Resta realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",15, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operacion_aritmetica ::= expresion OPERADOR_SUMA expresion 
            {
              Object RESULT =null;
		
                System.out.println("Suma realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("operacion_aritmetica",15, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= PARENTESIS_APERTURA expresion PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= NUMERO_FLOTANTE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= operacion_logica 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= operacion_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // asignacion ::= VARIABLE OPERADOR_ASIGNACION operacion_aritmetica 
            {
              Object RESULT =null;
		
                System.out.println("Asignación realizada");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("asignacion",13, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // dec_cadena ::= VARIABLE OPERADOR_ASIGNACION CADENA 
            {
              Object RESULT =null;
		
                System.out.println("Declaracion de cadena");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("dec_cadena",12, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo_bool ::= FALSE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("tipo_bool",11, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo_bool ::= TRUE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("tipo_bool",11, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // dec_booleano ::= VARIABLE OPERADOR_ASIGNACION tipo_bool 
            {
              Object RESULT =null;
		
                System.out.println("Declaracion de booleano");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("dec_booleano",10, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // dec_flotante ::= VARIABLE OPERADOR_ASIGNACION NUMERO_FLOTANTE 
            {
              Object RESULT =null;
		
                System.out.println("Declaracion de numero flotante");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("dec_flotante",9, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dec_entero ::= VARIABLE OPERADOR_ASIGNACION NUMERO_ENTERO 
            {
              Object RESULT =null;
		
                System.out.println("Declaracion de numero entero");
            
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("dec_entero",8, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // importar_rec ::= 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("importar_rec",7, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // importar_rec ::= BARRA_INVERSA IDENTIFICADOR importar_rec 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("importar_rec",7, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // pakage_rec ::= 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("pakage_rec",6, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // pakage_rec ::= BARRA_INVERSA IDENTIFICADOR pakage_rec 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("pakage_rec",6, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // importar ::= USE IDENTIFICADOR importar_rec 
            {
              Object RESULT =null;
		 
                System.out.println("Declaracion de importar"); 
          
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("importar",5, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // pakage ::= NAMESPACE IDENTIFICADOR pakage_rec 
            {
              Object RESULT =null;
		 
                System.out.println("Declaracion de pakage"); 
          
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("pakage",4, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lista_declaraciones ::= asignacion 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",3, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista_declaraciones ::= dec_cadena 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",3, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_declaraciones ::= dec_booleano 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",3, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_declaraciones ::= dec_flotante 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",3, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_declaraciones ::= dec_entero 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",3, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_declaraciones ::= importar 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",3, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_declaraciones ::= pakage 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",3, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= PARENTESIS_APERTURA expresion PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= operacion_logica 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= operacion_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= lista_declaraciones 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_sentencias ::= definicion_clases 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_sentencias",2, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_sentencias ::= estructura_control 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_sentencias",2, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_sentencias ::= sentencia PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_sentencias",2, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_sentencias ::= lista_sentencias definicion_clases 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_sentencias",2, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_sentencias ::= lista_sentencias estructura_control 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_sentencias",2, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_sentencias ::= lista_sentencias sentencia PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("lista_sentencias",2, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sentencias ::= 
            {
              Object RESULT =null;
		 System.out.println("Fin de entrada alcanzado"); 
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencias",0, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // sentencias ::= lista_sentencias 
            {
              Object RESULT =null;

              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("sentencias",0, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          return CUP$ParserPHP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= sentencias EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)).value;
		RESULT = start_val;
              CUP$ParserPHP$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.elementAt(CUP$ParserPHP$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPHP$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserPHP$parser.done_parsing();
          return CUP$ParserPHP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

